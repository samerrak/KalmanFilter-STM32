
lab1-ecse444.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001711c  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0802711c  0802711c  0002711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802720c  0802720c  00028068  2**0
                  CONTENTS
  4 .ARM          00000008  0802720c  0802720c  0002720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027214  08027214  00028068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027214  08027214  00027214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027218  08027218  00027218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0802721c  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000068  08027284  00028068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08027284  000286b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028068  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001a6c1  00000000  00000000  00028098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000085  00000000  00000000  00042759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00019ae1  00000000  00000000  000427de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ee9  00000000  00000000  0005c2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  0005f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0011fc89  00000000  00000000  00060850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001184  00000000  00000000  001804d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ea72  00000000  00000000  0018165d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b00cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000680c  00000000  00000000  001b0114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000068 	.word	0x20000068
 801001c:	00000000 	.word	0x00000000
 8010020:	08027104 	.word	0x08027104

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000006c 	.word	0x2000006c
 801003c:	08027104 	.word	0x08027104
	...

08020000 <kalman>:



kalman:

	VSTMDB SP!, {s1-s6} // push temperory variables to the stack
 8020000:	ed6d 0a06 	vpush	{s1-s6}
	VLDR.f32 s1, [r0] //load q into first available floating register s1
 8020004:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 s2, [r0, #4] //load r into floating register s2
 8020008:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.f32 s3, [r0, #8] //load x into floating register s3
 802000c:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.f32 s4, [r0, #12] //load p into floating register s4
 8020010:	ed90 2a03 	vldr	s4, [r0, #12]
	// we don't need to load k since it is changed but need to store it at [r0+16]


	VADD.f32 s4, s4, s1 // self.p = self.p + self.q
 8020014:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.f32 s1, s4, s2 // since q is not need we store (self.p + self.r here)
 8020018:	ee72 0a01 	vadd.f32	s1, s4, s2
	VDIV.f32 s1, s4, s1 // since the interm value is not needed k is stored in s1
 802001c:	eec2 0a20 	vdiv.f32	s1, s4, s1


	VSUB.f32 s5, s0, s3 // measurement - self.x
 8020020:	ee70 2a61 	vsub.f32	s5, s0, s3
	VMUL.f32 s5, s5, s1 // k is in s1 in line 13 so we do k(measurement - self.x)
 8020024:	ee62 2aa0 	vmul.f32	s5, s5, s1
	VADD.f32 s3, s3, s5 // self.x + k(measurement - self.x)
 8020028:	ee71 1aa2 	vadd.f32	s3, s3, s5


	VMOV.f32 s6, #0x3F800000 // move 1 into a temp variable
 802002c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	VSUB.f32 s6, s6, s1 // (1 - k)
 8020030:	ee33 3a60 	vsub.f32	s6, s6, s1
	VMUL.f32 s4, s4, s6 // (1-k) * p
 8020034:	ee22 2a03 	vmul.f32	s4, s4, s6

	VSTR.f32 s4, [r0, #12] //store p into where it was loaded from
 8020038:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.f32 s1, [r0, #16] //store p into where it was loaded from
 802003c:	edc0 0a04 	vstr	s1, [r0, #16]
	VSTR.f32 s3, [r0, #8] //store p into where it was loaded from
 8020040:	edc0 1a02 	vstr	s3, [r0, #8]

	VLDMIA SP!, {s1-s6}
 8020044:	ecfd 0a06 	vpop	{s1-s6}

	BX LR
 8020048:	4770      	bx	lr
 802004a:	bf00      	nop
 802004c:	0000      	movs	r0, r0
	...

08020050 <memchr>:
 8020050:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020054:	2a10      	cmp	r2, #16
 8020056:	db2b      	blt.n	80200b0 <memchr+0x60>
 8020058:	f010 0f07 	tst.w	r0, #7
 802005c:	d008      	beq.n	8020070 <memchr+0x20>
 802005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020062:	3a01      	subs	r2, #1
 8020064:	428b      	cmp	r3, r1
 8020066:	d02d      	beq.n	80200c4 <memchr+0x74>
 8020068:	f010 0f07 	tst.w	r0, #7
 802006c:	b342      	cbz	r2, 80200c0 <memchr+0x70>
 802006e:	d1f6      	bne.n	802005e <memchr+0xe>
 8020070:	b4f0      	push	{r4, r5, r6, r7}
 8020072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802007a:	f022 0407 	bic.w	r4, r2, #7
 802007e:	f07f 0700 	mvns.w	r7, #0
 8020082:	2300      	movs	r3, #0
 8020084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020088:	3c08      	subs	r4, #8
 802008a:	ea85 0501 	eor.w	r5, r5, r1
 802008e:	ea86 0601 	eor.w	r6, r6, r1
 8020092:	fa85 f547 	uadd8	r5, r5, r7
 8020096:	faa3 f587 	sel	r5, r3, r7
 802009a:	fa86 f647 	uadd8	r6, r6, r7
 802009e:	faa5 f687 	sel	r6, r5, r7
 80200a2:	b98e      	cbnz	r6, 80200c8 <memchr+0x78>
 80200a4:	d1ee      	bne.n	8020084 <memchr+0x34>
 80200a6:	bcf0      	pop	{r4, r5, r6, r7}
 80200a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80200ac:	f002 0207 	and.w	r2, r2, #7
 80200b0:	b132      	cbz	r2, 80200c0 <memchr+0x70>
 80200b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200b6:	3a01      	subs	r2, #1
 80200b8:	ea83 0301 	eor.w	r3, r3, r1
 80200bc:	b113      	cbz	r3, 80200c4 <memchr+0x74>
 80200be:	d1f8      	bne.n	80200b2 <memchr+0x62>
 80200c0:	2000      	movs	r0, #0
 80200c2:	4770      	bx	lr
 80200c4:	3801      	subs	r0, #1
 80200c6:	4770      	bx	lr
 80200c8:	2d00      	cmp	r5, #0
 80200ca:	bf06      	itte	eq
 80200cc:	4635      	moveq	r5, r6
 80200ce:	3803      	subeq	r0, #3
 80200d0:	3807      	subne	r0, #7
 80200d2:	f015 0f01 	tst.w	r5, #1
 80200d6:	d107      	bne.n	80200e8 <memchr+0x98>
 80200d8:	3001      	adds	r0, #1
 80200da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80200de:	bf02      	ittt	eq
 80200e0:	3001      	addeq	r0, #1
 80200e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80200e6:	3001      	addeq	r0, #1
 80200e8:	bcf0      	pop	{r4, r5, r6, r7}
 80200ea:	3801      	subs	r0, #1
 80200ec:	4770      	bx	lr
 80200ee:	bf00      	nop

080200f0 <__aeabi_uldivmod>:
 80200f0:	b953      	cbnz	r3, 8020108 <__aeabi_uldivmod+0x18>
 80200f2:	b94a      	cbnz	r2, 8020108 <__aeabi_uldivmod+0x18>
 80200f4:	2900      	cmp	r1, #0
 80200f6:	bf08      	it	eq
 80200f8:	2800      	cmpeq	r0, #0
 80200fa:	bf1c      	itt	ne
 80200fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8020100:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8020104:	f000 b96a 	b.w	80203dc <__aeabi_idiv0>
 8020108:	f1ad 0c08 	sub.w	ip, sp, #8
 802010c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020110:	f000 f806 	bl	8020120 <__udivmoddi4>
 8020114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802011c:	b004      	add	sp, #16
 802011e:	4770      	bx	lr

08020120 <__udivmoddi4>:
 8020120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020124:	9d08      	ldr	r5, [sp, #32]
 8020126:	460c      	mov	r4, r1
 8020128:	2b00      	cmp	r3, #0
 802012a:	d14e      	bne.n	80201ca <__udivmoddi4+0xaa>
 802012c:	4694      	mov	ip, r2
 802012e:	458c      	cmp	ip, r1
 8020130:	4686      	mov	lr, r0
 8020132:	fab2 f282 	clz	r2, r2
 8020136:	d962      	bls.n	80201fe <__udivmoddi4+0xde>
 8020138:	b14a      	cbz	r2, 802014e <__udivmoddi4+0x2e>
 802013a:	f1c2 0320 	rsb	r3, r2, #32
 802013e:	4091      	lsls	r1, r2
 8020140:	fa20 f303 	lsr.w	r3, r0, r3
 8020144:	fa0c fc02 	lsl.w	ip, ip, r2
 8020148:	4319      	orrs	r1, r3
 802014a:	fa00 fe02 	lsl.w	lr, r0, r2
 802014e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020152:	fa1f f68c 	uxth.w	r6, ip
 8020156:	fbb1 f4f7 	udiv	r4, r1, r7
 802015a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802015e:	fb07 1114 	mls	r1, r7, r4, r1
 8020162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020166:	fb04 f106 	mul.w	r1, r4, r6
 802016a:	4299      	cmp	r1, r3
 802016c:	d90a      	bls.n	8020184 <__udivmoddi4+0x64>
 802016e:	eb1c 0303 	adds.w	r3, ip, r3
 8020172:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8020176:	f080 8112 	bcs.w	802039e <__udivmoddi4+0x27e>
 802017a:	4299      	cmp	r1, r3
 802017c:	f240 810f 	bls.w	802039e <__udivmoddi4+0x27e>
 8020180:	3c02      	subs	r4, #2
 8020182:	4463      	add	r3, ip
 8020184:	1a59      	subs	r1, r3, r1
 8020186:	fa1f f38e 	uxth.w	r3, lr
 802018a:	fbb1 f0f7 	udiv	r0, r1, r7
 802018e:	fb07 1110 	mls	r1, r7, r0, r1
 8020192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020196:	fb00 f606 	mul.w	r6, r0, r6
 802019a:	429e      	cmp	r6, r3
 802019c:	d90a      	bls.n	80201b4 <__udivmoddi4+0x94>
 802019e:	eb1c 0303 	adds.w	r3, ip, r3
 80201a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80201a6:	f080 80fc 	bcs.w	80203a2 <__udivmoddi4+0x282>
 80201aa:	429e      	cmp	r6, r3
 80201ac:	f240 80f9 	bls.w	80203a2 <__udivmoddi4+0x282>
 80201b0:	4463      	add	r3, ip
 80201b2:	3802      	subs	r0, #2
 80201b4:	1b9b      	subs	r3, r3, r6
 80201b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80201ba:	2100      	movs	r1, #0
 80201bc:	b11d      	cbz	r5, 80201c6 <__udivmoddi4+0xa6>
 80201be:	40d3      	lsrs	r3, r2
 80201c0:	2200      	movs	r2, #0
 80201c2:	e9c5 3200 	strd	r3, r2, [r5]
 80201c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201ca:	428b      	cmp	r3, r1
 80201cc:	d905      	bls.n	80201da <__udivmoddi4+0xba>
 80201ce:	b10d      	cbz	r5, 80201d4 <__udivmoddi4+0xb4>
 80201d0:	e9c5 0100 	strd	r0, r1, [r5]
 80201d4:	2100      	movs	r1, #0
 80201d6:	4608      	mov	r0, r1
 80201d8:	e7f5      	b.n	80201c6 <__udivmoddi4+0xa6>
 80201da:	fab3 f183 	clz	r1, r3
 80201de:	2900      	cmp	r1, #0
 80201e0:	d146      	bne.n	8020270 <__udivmoddi4+0x150>
 80201e2:	42a3      	cmp	r3, r4
 80201e4:	d302      	bcc.n	80201ec <__udivmoddi4+0xcc>
 80201e6:	4290      	cmp	r0, r2
 80201e8:	f0c0 80f0 	bcc.w	80203cc <__udivmoddi4+0x2ac>
 80201ec:	1a86      	subs	r6, r0, r2
 80201ee:	eb64 0303 	sbc.w	r3, r4, r3
 80201f2:	2001      	movs	r0, #1
 80201f4:	2d00      	cmp	r5, #0
 80201f6:	d0e6      	beq.n	80201c6 <__udivmoddi4+0xa6>
 80201f8:	e9c5 6300 	strd	r6, r3, [r5]
 80201fc:	e7e3      	b.n	80201c6 <__udivmoddi4+0xa6>
 80201fe:	2a00      	cmp	r2, #0
 8020200:	f040 8090 	bne.w	8020324 <__udivmoddi4+0x204>
 8020204:	eba1 040c 	sub.w	r4, r1, ip
 8020208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 802020c:	fa1f f78c 	uxth.w	r7, ip
 8020210:	2101      	movs	r1, #1
 8020212:	fbb4 f6f8 	udiv	r6, r4, r8
 8020216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802021a:	fb08 4416 	mls	r4, r8, r6, r4
 802021e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020222:	fb07 f006 	mul.w	r0, r7, r6
 8020226:	4298      	cmp	r0, r3
 8020228:	d908      	bls.n	802023c <__udivmoddi4+0x11c>
 802022a:	eb1c 0303 	adds.w	r3, ip, r3
 802022e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8020232:	d202      	bcs.n	802023a <__udivmoddi4+0x11a>
 8020234:	4298      	cmp	r0, r3
 8020236:	f200 80cd 	bhi.w	80203d4 <__udivmoddi4+0x2b4>
 802023a:	4626      	mov	r6, r4
 802023c:	1a1c      	subs	r4, r3, r0
 802023e:	fa1f f38e 	uxth.w	r3, lr
 8020242:	fbb4 f0f8 	udiv	r0, r4, r8
 8020246:	fb08 4410 	mls	r4, r8, r0, r4
 802024a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802024e:	fb00 f707 	mul.w	r7, r0, r7
 8020252:	429f      	cmp	r7, r3
 8020254:	d908      	bls.n	8020268 <__udivmoddi4+0x148>
 8020256:	eb1c 0303 	adds.w	r3, ip, r3
 802025a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 802025e:	d202      	bcs.n	8020266 <__udivmoddi4+0x146>
 8020260:	429f      	cmp	r7, r3
 8020262:	f200 80b0 	bhi.w	80203c6 <__udivmoddi4+0x2a6>
 8020266:	4620      	mov	r0, r4
 8020268:	1bdb      	subs	r3, r3, r7
 802026a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802026e:	e7a5      	b.n	80201bc <__udivmoddi4+0x9c>
 8020270:	f1c1 0620 	rsb	r6, r1, #32
 8020274:	408b      	lsls	r3, r1
 8020276:	fa22 f706 	lsr.w	r7, r2, r6
 802027a:	431f      	orrs	r7, r3
 802027c:	fa20 fc06 	lsr.w	ip, r0, r6
 8020280:	fa04 f301 	lsl.w	r3, r4, r1
 8020284:	ea43 030c 	orr.w	r3, r3, ip
 8020288:	40f4      	lsrs	r4, r6
 802028a:	fa00 f801 	lsl.w	r8, r0, r1
 802028e:	0c38      	lsrs	r0, r7, #16
 8020290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8020294:	fbb4 fef0 	udiv	lr, r4, r0
 8020298:	fa1f fc87 	uxth.w	ip, r7
 802029c:	fb00 441e 	mls	r4, r0, lr, r4
 80202a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80202a4:	fb0e f90c 	mul.w	r9, lr, ip
 80202a8:	45a1      	cmp	r9, r4
 80202aa:	fa02 f201 	lsl.w	r2, r2, r1
 80202ae:	d90a      	bls.n	80202c6 <__udivmoddi4+0x1a6>
 80202b0:	193c      	adds	r4, r7, r4
 80202b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80202b6:	f080 8084 	bcs.w	80203c2 <__udivmoddi4+0x2a2>
 80202ba:	45a1      	cmp	r9, r4
 80202bc:	f240 8081 	bls.w	80203c2 <__udivmoddi4+0x2a2>
 80202c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80202c4:	443c      	add	r4, r7
 80202c6:	eba4 0409 	sub.w	r4, r4, r9
 80202ca:	fa1f f983 	uxth.w	r9, r3
 80202ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80202d2:	fb00 4413 	mls	r4, r0, r3, r4
 80202d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80202da:	fb03 fc0c 	mul.w	ip, r3, ip
 80202de:	45a4      	cmp	ip, r4
 80202e0:	d907      	bls.n	80202f2 <__udivmoddi4+0x1d2>
 80202e2:	193c      	adds	r4, r7, r4
 80202e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80202e8:	d267      	bcs.n	80203ba <__udivmoddi4+0x29a>
 80202ea:	45a4      	cmp	ip, r4
 80202ec:	d965      	bls.n	80203ba <__udivmoddi4+0x29a>
 80202ee:	3b02      	subs	r3, #2
 80202f0:	443c      	add	r4, r7
 80202f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80202f6:	fba0 9302 	umull	r9, r3, r0, r2
 80202fa:	eba4 040c 	sub.w	r4, r4, ip
 80202fe:	429c      	cmp	r4, r3
 8020300:	46ce      	mov	lr, r9
 8020302:	469c      	mov	ip, r3
 8020304:	d351      	bcc.n	80203aa <__udivmoddi4+0x28a>
 8020306:	d04e      	beq.n	80203a6 <__udivmoddi4+0x286>
 8020308:	b155      	cbz	r5, 8020320 <__udivmoddi4+0x200>
 802030a:	ebb8 030e 	subs.w	r3, r8, lr
 802030e:	eb64 040c 	sbc.w	r4, r4, ip
 8020312:	fa04 f606 	lsl.w	r6, r4, r6
 8020316:	40cb      	lsrs	r3, r1
 8020318:	431e      	orrs	r6, r3
 802031a:	40cc      	lsrs	r4, r1
 802031c:	e9c5 6400 	strd	r6, r4, [r5]
 8020320:	2100      	movs	r1, #0
 8020322:	e750      	b.n	80201c6 <__udivmoddi4+0xa6>
 8020324:	f1c2 0320 	rsb	r3, r2, #32
 8020328:	fa20 f103 	lsr.w	r1, r0, r3
 802032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8020330:	fa24 f303 	lsr.w	r3, r4, r3
 8020334:	4094      	lsls	r4, r2
 8020336:	430c      	orrs	r4, r1
 8020338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 802033c:	fa00 fe02 	lsl.w	lr, r0, r2
 8020340:	fa1f f78c 	uxth.w	r7, ip
 8020344:	fbb3 f0f8 	udiv	r0, r3, r8
 8020348:	fb08 3110 	mls	r1, r8, r0, r3
 802034c:	0c23      	lsrs	r3, r4, #16
 802034e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020352:	fb00 f107 	mul.w	r1, r0, r7
 8020356:	4299      	cmp	r1, r3
 8020358:	d908      	bls.n	802036c <__udivmoddi4+0x24c>
 802035a:	eb1c 0303 	adds.w	r3, ip, r3
 802035e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8020362:	d22c      	bcs.n	80203be <__udivmoddi4+0x29e>
 8020364:	4299      	cmp	r1, r3
 8020366:	d92a      	bls.n	80203be <__udivmoddi4+0x29e>
 8020368:	3802      	subs	r0, #2
 802036a:	4463      	add	r3, ip
 802036c:	1a5b      	subs	r3, r3, r1
 802036e:	b2a4      	uxth	r4, r4
 8020370:	fbb3 f1f8 	udiv	r1, r3, r8
 8020374:	fb08 3311 	mls	r3, r8, r1, r3
 8020378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802037c:	fb01 f307 	mul.w	r3, r1, r7
 8020380:	42a3      	cmp	r3, r4
 8020382:	d908      	bls.n	8020396 <__udivmoddi4+0x276>
 8020384:	eb1c 0404 	adds.w	r4, ip, r4
 8020388:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 802038c:	d213      	bcs.n	80203b6 <__udivmoddi4+0x296>
 802038e:	42a3      	cmp	r3, r4
 8020390:	d911      	bls.n	80203b6 <__udivmoddi4+0x296>
 8020392:	3902      	subs	r1, #2
 8020394:	4464      	add	r4, ip
 8020396:	1ae4      	subs	r4, r4, r3
 8020398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802039c:	e739      	b.n	8020212 <__udivmoddi4+0xf2>
 802039e:	4604      	mov	r4, r0
 80203a0:	e6f0      	b.n	8020184 <__udivmoddi4+0x64>
 80203a2:	4608      	mov	r0, r1
 80203a4:	e706      	b.n	80201b4 <__udivmoddi4+0x94>
 80203a6:	45c8      	cmp	r8, r9
 80203a8:	d2ae      	bcs.n	8020308 <__udivmoddi4+0x1e8>
 80203aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80203ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80203b2:	3801      	subs	r0, #1
 80203b4:	e7a8      	b.n	8020308 <__udivmoddi4+0x1e8>
 80203b6:	4631      	mov	r1, r6
 80203b8:	e7ed      	b.n	8020396 <__udivmoddi4+0x276>
 80203ba:	4603      	mov	r3, r0
 80203bc:	e799      	b.n	80202f2 <__udivmoddi4+0x1d2>
 80203be:	4630      	mov	r0, r6
 80203c0:	e7d4      	b.n	802036c <__udivmoddi4+0x24c>
 80203c2:	46d6      	mov	lr, sl
 80203c4:	e77f      	b.n	80202c6 <__udivmoddi4+0x1a6>
 80203c6:	4463      	add	r3, ip
 80203c8:	3802      	subs	r0, #2
 80203ca:	e74d      	b.n	8020268 <__udivmoddi4+0x148>
 80203cc:	4606      	mov	r6, r0
 80203ce:	4623      	mov	r3, r4
 80203d0:	4608      	mov	r0, r1
 80203d2:	e70f      	b.n	80201f4 <__udivmoddi4+0xd4>
 80203d4:	3e02      	subs	r6, #2
 80203d6:	4463      	add	r3, ip
 80203d8:	e730      	b.n	802023c <__udivmoddi4+0x11c>
 80203da:	bf00      	nop

080203dc <__aeabi_idiv0>:
 80203dc:	4770      	bx	lr
 80203de:	bf00      	nop

080203e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80203e0:	b5b0      	push	{r4, r5, r7, lr}
 80203e2:	b08a      	sub	sp, #40	@ 0x28
 80203e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80203e6:	f001 fa2a 	bl	802183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80203ea:	f000 f875 	bl	80204d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80203ee:	f000 f8d5 	bl	802059c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80203f2:	f000 fc2b 	bl	8020c4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80203f6:	f000 f901 	bl	80205fc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80203fa:	f000 f963 	bl	80206c4 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80203fe:	f000 f999 	bl	8020734 <MX_I2C1_Init>
  MX_I2C2_Init();
 8020402:	f000 f9d7 	bl	80207b4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8020406:	f000 fa15 	bl	8020834 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 802040a:	f000 fa69 	bl	80208e0 <MX_SPI1_Init>
  MX_SPI3_Init();
 802040e:	f000 faa5 	bl	802095c <MX_SPI3_Init>
  MX_UART4_Init();
 8020412:	f000 fae1 	bl	80209d8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8020416:	f000 fb2b 	bl	8020a70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 802041a:	f000 fb75 	bl	8020b08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 802041e:	f000 fbc1 	bl	8020ba4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8020422:	f000 fc0b 	bl	8020c3c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  float array[5] = {0.1,0.1,0.1, 5.0, 0.0};
 8020426:	4b2a      	ldr	r3, [pc, #168]	@ (80204d0 <main+0xf0>)
 8020428:	463c      	mov	r4, r7
 802042a:	461d      	mov	r5, r3
 802042c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802042e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020430:	682b      	ldr	r3, [r5, #0]
 8020432:	6023      	str	r3, [r4, #0]

  for (int i = 0; i < 5; i++) {
 8020434:	2300      	movs	r3, #0
 8020436:	617b      	str	r3, [r7, #20]
 8020438:	e03e      	b.n	80204b8 <main+0xd8>
	  printf("Iteration %d: q = %d, r = %d, p = %d, q = %d, k = %d\n ", i, (int)array[0]*100, (int)array[1]*100, (int)array[2]*100, (int)array[3]*100, (int)array[4]*100);
 802043a:	edd7 7a00 	vldr	s15, [r7]
 802043e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020442:	ee17 2a90 	vmov	r2, s15
 8020446:	2364      	movs	r3, #100	@ 0x64
 8020448:	fb03 f002 	mul.w	r0, r3, r2
 802044c:	edd7 7a01 	vldr	s15, [r7, #4]
 8020450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020454:	ee17 2a90 	vmov	r2, s15
 8020458:	2364      	movs	r3, #100	@ 0x64
 802045a:	fb03 f402 	mul.w	r4, r3, r2
 802045e:	edd7 7a02 	vldr	s15, [r7, #8]
 8020462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020466:	ee17 2a90 	vmov	r2, s15
 802046a:	2364      	movs	r3, #100	@ 0x64
 802046c:	fb02 f303 	mul.w	r3, r2, r3
 8020470:	edd7 7a03 	vldr	s15, [r7, #12]
 8020474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020478:	ee17 1a90 	vmov	r1, s15
 802047c:	2264      	movs	r2, #100	@ 0x64
 802047e:	fb01 f202 	mul.w	r2, r1, r2
 8020482:	edd7 7a04 	vldr	s15, [r7, #16]
 8020486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802048a:	ee17 5a90 	vmov	r5, s15
 802048e:	2164      	movs	r1, #100	@ 0x64
 8020490:	fb05 f101 	mul.w	r1, r5, r1
 8020494:	9102      	str	r1, [sp, #8]
 8020496:	9201      	str	r2, [sp, #4]
 8020498:	9300      	str	r3, [sp, #0]
 802049a:	4623      	mov	r3, r4
 802049c:	4602      	mov	r2, r0
 802049e:	6979      	ldr	r1, [r7, #20]
 80204a0:	480c      	ldr	r0, [pc, #48]	@ (80204d4 <main+0xf4>)
 80204a2:	f005 ffc3 	bl	802642c <iprintf>
	  kalman(array, 5.0);
 80204a6:	463b      	mov	r3, r7
 80204a8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80204ac:	4618      	mov	r0, r3
 80204ae:	f7ff fda7 	bl	8020000 <kalman>
  for (int i = 0; i < 5; i++) {
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	3301      	adds	r3, #1
 80204b6:	617b      	str	r3, [r7, #20]
 80204b8:	697b      	ldr	r3, [r7, #20]
 80204ba:	2b04      	cmp	r3, #4
 80204bc:	ddbd      	ble.n	802043a <main+0x5a>

  }


  kalman(array, 5.0);
 80204be:	463b      	mov	r3, r7
 80204c0:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80204c4:	4618      	mov	r0, r3
 80204c6:	f7ff fd9b 	bl	8020000 <kalman>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80204ca:	bf00      	nop
 80204cc:	e7fd      	b.n	80204ca <main+0xea>
 80204ce:	bf00      	nop
 80204d0:	08027154 	.word	0x08027154
 80204d4:	0802711c 	.word	0x0802711c

080204d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b096      	sub	sp, #88	@ 0x58
 80204dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80204de:	f107 0314 	add.w	r3, r7, #20
 80204e2:	2244      	movs	r2, #68	@ 0x44
 80204e4:	2100      	movs	r1, #0
 80204e6:	4618      	mov	r0, r3
 80204e8:	f005 ffb2 	bl	8026450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80204ec:	463b      	mov	r3, r7
 80204ee:	2200      	movs	r2, #0
 80204f0:	601a      	str	r2, [r3, #0]
 80204f2:	605a      	str	r2, [r3, #4]
 80204f4:	609a      	str	r2, [r3, #8]
 80204f6:	60da      	str	r2, [r3, #12]
 80204f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80204fa:	2000      	movs	r0, #0
 80204fc:	f003 fb1e 	bl	8023b3c <HAL_PWREx_ControlVoltageScaling>
 8020500:	4603      	mov	r3, r0
 8020502:	2b00      	cmp	r3, #0
 8020504:	d001      	beq.n	802050a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8020506:	f000 fce3 	bl	8020ed0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 802050a:	f003 fae7 	bl	8023adc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 802050e:	4b22      	ldr	r3, [pc, #136]	@ (8020598 <SystemClock_Config+0xc0>)
 8020510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020514:	4a20      	ldr	r2, [pc, #128]	@ (8020598 <SystemClock_Config+0xc0>)
 8020516:	f023 0318 	bic.w	r3, r3, #24
 802051a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 802051e:	2314      	movs	r3, #20
 8020520:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8020522:	2301      	movs	r3, #1
 8020524:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020526:	2301      	movs	r3, #1
 8020528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 802052a:	2300      	movs	r3, #0
 802052c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 802052e:	2360      	movs	r3, #96	@ 0x60
 8020530:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020532:	2302      	movs	r3, #2
 8020534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020536:	2301      	movs	r3, #1
 8020538:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802053a:	2301      	movs	r3, #1
 802053c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802053e:	233c      	movs	r3, #60	@ 0x3c
 8020540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020542:	2302      	movs	r3, #2
 8020544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8020546:	2302      	movs	r3, #2
 8020548:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802054a:	2302      	movs	r3, #2
 802054c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802054e:	f107 0314 	add.w	r3, r7, #20
 8020552:	4618      	mov	r0, r3
 8020554:	f003 fb96 	bl	8023c84 <HAL_RCC_OscConfig>
 8020558:	4603      	mov	r3, r0
 802055a:	2b00      	cmp	r3, #0
 802055c:	d001      	beq.n	8020562 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 802055e:	f000 fcb7 	bl	8020ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020562:	230f      	movs	r3, #15
 8020564:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020566:	2303      	movs	r3, #3
 8020568:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802056a:	2300      	movs	r3, #0
 802056c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802056e:	2300      	movs	r3, #0
 8020570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020572:	2300      	movs	r3, #0
 8020574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020576:	463b      	mov	r3, r7
 8020578:	2105      	movs	r1, #5
 802057a:	4618      	mov	r0, r3
 802057c:	f003 ff9c 	bl	80244b8 <HAL_RCC_ClockConfig>
 8020580:	4603      	mov	r3, r0
 8020582:	2b00      	cmp	r3, #0
 8020584:	d001      	beq.n	802058a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8020586:	f000 fca3 	bl	8020ed0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 802058a:	f004 fd83 	bl	8025094 <HAL_RCCEx_EnableMSIPLLMode>
}
 802058e:	bf00      	nop
 8020590:	3758      	adds	r7, #88	@ 0x58
 8020592:	46bd      	mov	sp, r7
 8020594:	bd80      	pop	{r7, pc}
 8020596:	bf00      	nop
 8020598:	40021000 	.word	0x40021000

0802059c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b0a6      	sub	sp, #152	@ 0x98
 80205a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80205a2:	1d3b      	adds	r3, r7, #4
 80205a4:	2294      	movs	r2, #148	@ 0x94
 80205a6:	2100      	movs	r1, #0
 80205a8:	4618      	mov	r0, r3
 80205aa:	f005 ff51 	bl	8026450 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80205ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80205b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80205b4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80205b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80205bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80205c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80205c2:	2301      	movs	r3, #1
 80205c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80205c6:	2301      	movs	r3, #1
 80205c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80205ca:	2318      	movs	r3, #24
 80205cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80205ce:	2302      	movs	r3, #2
 80205d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80205d2:	2302      	movs	r3, #2
 80205d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80205d6:	2302      	movs	r3, #2
 80205d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80205da:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80205de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80205e0:	1d3b      	adds	r3, r7, #4
 80205e2:	4618      	mov	r0, r3
 80205e4:	f004 fa26 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 80205e8:	4603      	mov	r3, r0
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d001      	beq.n	80205f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80205ee:	f000 fc6f 	bl	8020ed0 <Error_Handler>
  }
}
 80205f2:	bf00      	nop
 80205f4:	3798      	adds	r7, #152	@ 0x98
 80205f6:	46bd      	mov	sp, r7
 80205f8:	bd80      	pop	{r7, pc}
	...

080205fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80205fc:	b580      	push	{r7, lr}
 80205fe:	b086      	sub	sp, #24
 8020600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8020602:	463b      	mov	r3, r7
 8020604:	2200      	movs	r2, #0
 8020606:	601a      	str	r2, [r3, #0]
 8020608:	605a      	str	r2, [r3, #4]
 802060a:	609a      	str	r2, [r3, #8]
 802060c:	60da      	str	r2, [r3, #12]
 802060e:	611a      	str	r2, [r3, #16]
 8020610:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8020612:	4b29      	ldr	r3, [pc, #164]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020614:	4a29      	ldr	r2, [pc, #164]	@ (80206bc <MX_ADC1_Init+0xc0>)
 8020616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020618:	4b27      	ldr	r3, [pc, #156]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802061a:	2200      	movs	r2, #0
 802061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802061e:	4b26      	ldr	r3, [pc, #152]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020620:	2200      	movs	r2, #0
 8020622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020624:	4b24      	ldr	r3, [pc, #144]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020626:	2200      	movs	r2, #0
 8020628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 802062a:	4b23      	ldr	r3, [pc, #140]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802062c:	2200      	movs	r2, #0
 802062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020630:	4b21      	ldr	r3, [pc, #132]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020632:	2204      	movs	r2, #4
 8020634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020636:	4b20      	ldr	r3, [pc, #128]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020638:	2200      	movs	r2, #0
 802063a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 802063c:	4b1e      	ldr	r3, [pc, #120]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802063e:	2200      	movs	r2, #0
 8020640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8020642:	4b1d      	ldr	r3, [pc, #116]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020644:	2201      	movs	r2, #1
 8020646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020648:	4b1b      	ldr	r3, [pc, #108]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802064a:	2200      	movs	r2, #0
 802064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020650:	4b19      	ldr	r3, [pc, #100]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020652:	2200      	movs	r2, #0
 8020654:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020656:	4b18      	ldr	r3, [pc, #96]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020658:	2200      	movs	r2, #0
 802065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 802065c:	4b16      	ldr	r3, [pc, #88]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802065e:	2200      	movs	r2, #0
 8020660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020664:	4b14      	ldr	r3, [pc, #80]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020666:	2200      	movs	r2, #0
 8020668:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 802066a:	4b13      	ldr	r3, [pc, #76]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 802066c:	2200      	movs	r2, #0
 802066e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020672:	4811      	ldr	r0, [pc, #68]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 8020674:	f001 faf8 	bl	8021c68 <HAL_ADC_Init>
 8020678:	4603      	mov	r3, r0
 802067a:	2b00      	cmp	r3, #0
 802067c:	d001      	beq.n	8020682 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 802067e:	f000 fc27 	bl	8020ed0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8020682:	4b0f      	ldr	r3, [pc, #60]	@ (80206c0 <MX_ADC1_Init+0xc4>)
 8020684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020686:	2306      	movs	r3, #6
 8020688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 802068a:	2300      	movs	r3, #0
 802068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 802068e:	237f      	movs	r3, #127	@ 0x7f
 8020690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8020692:	2304      	movs	r3, #4
 8020694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8020696:	2300      	movs	r3, #0
 8020698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802069a:	463b      	mov	r3, r7
 802069c:	4619      	mov	r1, r3
 802069e:	4806      	ldr	r0, [pc, #24]	@ (80206b8 <MX_ADC1_Init+0xbc>)
 80206a0:	f001 fc28 	bl	8021ef4 <HAL_ADC_ConfigChannel>
 80206a4:	4603      	mov	r3, r0
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d001      	beq.n	80206ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80206aa:	f000 fc11 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80206ae:	bf00      	nop
 80206b0:	3718      	adds	r7, #24
 80206b2:	46bd      	mov	sp, r7
 80206b4:	bd80      	pop	{r7, pc}
 80206b6:	bf00      	nop
 80206b8:	20000084 	.word	0x20000084
 80206bc:	50040000 	.word	0x50040000
 80206c0:	04300002 	.word	0x04300002

080206c4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80206c4:	b580      	push	{r7, lr}
 80206c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80206c8:	4b18      	ldr	r3, [pc, #96]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206ca:	4a19      	ldr	r2, [pc, #100]	@ (8020730 <MX_DFSDM1_Init+0x6c>)
 80206cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80206ce:	4b17      	ldr	r3, [pc, #92]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206d0:	2201      	movs	r2, #1
 80206d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80206d4:	4b15      	ldr	r3, [pc, #84]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206d6:	2200      	movs	r2, #0
 80206d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80206da:	4b14      	ldr	r3, [pc, #80]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206dc:	2202      	movs	r2, #2
 80206de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80206e0:	4b12      	ldr	r3, [pc, #72]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206e2:	2200      	movs	r2, #0
 80206e4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80206e6:	4b11      	ldr	r3, [pc, #68]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206e8:	2200      	movs	r2, #0
 80206ea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80206ec:	4b0f      	ldr	r3, [pc, #60]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206ee:	2200      	movs	r2, #0
 80206f0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80206f2:	4b0e      	ldr	r3, [pc, #56]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206f4:	2200      	movs	r2, #0
 80206f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80206f8:	4b0c      	ldr	r3, [pc, #48]	@ (802072c <MX_DFSDM1_Init+0x68>)
 80206fa:	2204      	movs	r2, #4
 80206fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80206fe:	4b0b      	ldr	r3, [pc, #44]	@ (802072c <MX_DFSDM1_Init+0x68>)
 8020700:	2200      	movs	r2, #0
 8020702:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8020704:	4b09      	ldr	r3, [pc, #36]	@ (802072c <MX_DFSDM1_Init+0x68>)
 8020706:	2201      	movs	r2, #1
 8020708:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 802070a:	4b08      	ldr	r3, [pc, #32]	@ (802072c <MX_DFSDM1_Init+0x68>)
 802070c:	2200      	movs	r2, #0
 802070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8020710:	4b06      	ldr	r3, [pc, #24]	@ (802072c <MX_DFSDM1_Init+0x68>)
 8020712:	2200      	movs	r2, #0
 8020714:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8020716:	4805      	ldr	r0, [pc, #20]	@ (802072c <MX_DFSDM1_Init+0x68>)
 8020718:	f002 f8fa 	bl	8022910 <HAL_DFSDM_ChannelInit>
 802071c:	4603      	mov	r3, r0
 802071e:	2b00      	cmp	r3, #0
 8020720:	d001      	beq.n	8020726 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8020722:	f000 fbd5 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8020726:	bf00      	nop
 8020728:	bd80      	pop	{r7, pc}
 802072a:	bf00      	nop
 802072c:	200000ec 	.word	0x200000ec
 8020730:	40016040 	.word	0x40016040

08020734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8020734:	b580      	push	{r7, lr}
 8020736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8020738:	4b1b      	ldr	r3, [pc, #108]	@ (80207a8 <MX_I2C1_Init+0x74>)
 802073a:	4a1c      	ldr	r2, [pc, #112]	@ (80207ac <MX_I2C1_Init+0x78>)
 802073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 802073e:	4b1a      	ldr	r3, [pc, #104]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020740:	4a1b      	ldr	r2, [pc, #108]	@ (80207b0 <MX_I2C1_Init+0x7c>)
 8020742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8020744:	4b18      	ldr	r3, [pc, #96]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020746:	2200      	movs	r2, #0
 8020748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802074a:	4b17      	ldr	r3, [pc, #92]	@ (80207a8 <MX_I2C1_Init+0x74>)
 802074c:	2201      	movs	r2, #1
 802074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020750:	4b15      	ldr	r3, [pc, #84]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020752:	2200      	movs	r2, #0
 8020754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8020756:	4b14      	ldr	r3, [pc, #80]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020758:	2200      	movs	r2, #0
 802075a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802075c:	4b12      	ldr	r3, [pc, #72]	@ (80207a8 <MX_I2C1_Init+0x74>)
 802075e:	2200      	movs	r2, #0
 8020760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020762:	4b11      	ldr	r3, [pc, #68]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020764:	2200      	movs	r2, #0
 8020766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020768:	4b0f      	ldr	r3, [pc, #60]	@ (80207a8 <MX_I2C1_Init+0x74>)
 802076a:	2200      	movs	r2, #0
 802076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 802076e:	480e      	ldr	r0, [pc, #56]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020770:	f002 fba7 	bl	8022ec2 <HAL_I2C_Init>
 8020774:	4603      	mov	r3, r0
 8020776:	2b00      	cmp	r3, #0
 8020778:	d001      	beq.n	802077e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 802077a:	f000 fba9 	bl	8020ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802077e:	2100      	movs	r1, #0
 8020780:	4809      	ldr	r0, [pc, #36]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020782:	f002 fc39 	bl	8022ff8 <HAL_I2CEx_ConfigAnalogFilter>
 8020786:	4603      	mov	r3, r0
 8020788:	2b00      	cmp	r3, #0
 802078a:	d001      	beq.n	8020790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 802078c:	f000 fba0 	bl	8020ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8020790:	2100      	movs	r1, #0
 8020792:	4805      	ldr	r0, [pc, #20]	@ (80207a8 <MX_I2C1_Init+0x74>)
 8020794:	f002 fc7b 	bl	802308e <HAL_I2CEx_ConfigDigitalFilter>
 8020798:	4603      	mov	r3, r0
 802079a:	2b00      	cmp	r3, #0
 802079c:	d001      	beq.n	80207a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 802079e:	f000 fb97 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80207a2:	bf00      	nop
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	bf00      	nop
 80207a8:	20000124 	.word	0x20000124
 80207ac:	40005400 	.word	0x40005400
 80207b0:	307075b1 	.word	0x307075b1

080207b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80207b4:	b580      	push	{r7, lr}
 80207b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80207b8:	4b1b      	ldr	r3, [pc, #108]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207ba:	4a1c      	ldr	r2, [pc, #112]	@ (802082c <MX_I2C2_Init+0x78>)
 80207bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80207be:	4b1a      	ldr	r3, [pc, #104]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207c0:	4a1b      	ldr	r2, [pc, #108]	@ (8020830 <MX_I2C2_Init+0x7c>)
 80207c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80207c4:	4b18      	ldr	r3, [pc, #96]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207c6:	2200      	movs	r2, #0
 80207c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80207ca:	4b17      	ldr	r3, [pc, #92]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207cc:	2201      	movs	r2, #1
 80207ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80207d0:	4b15      	ldr	r3, [pc, #84]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207d2:	2200      	movs	r2, #0
 80207d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80207d6:	4b14      	ldr	r3, [pc, #80]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207d8:	2200      	movs	r2, #0
 80207da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80207dc:	4b12      	ldr	r3, [pc, #72]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207de:	2200      	movs	r2, #0
 80207e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80207e2:	4b11      	ldr	r3, [pc, #68]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207e4:	2200      	movs	r2, #0
 80207e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80207e8:	4b0f      	ldr	r3, [pc, #60]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207ea:	2200      	movs	r2, #0
 80207ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80207ee:	480e      	ldr	r0, [pc, #56]	@ (8020828 <MX_I2C2_Init+0x74>)
 80207f0:	f002 fb67 	bl	8022ec2 <HAL_I2C_Init>
 80207f4:	4603      	mov	r3, r0
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d001      	beq.n	80207fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80207fa:	f000 fb69 	bl	8020ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80207fe:	2100      	movs	r1, #0
 8020800:	4809      	ldr	r0, [pc, #36]	@ (8020828 <MX_I2C2_Init+0x74>)
 8020802:	f002 fbf9 	bl	8022ff8 <HAL_I2CEx_ConfigAnalogFilter>
 8020806:	4603      	mov	r3, r0
 8020808:	2b00      	cmp	r3, #0
 802080a:	d001      	beq.n	8020810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802080c:	f000 fb60 	bl	8020ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8020810:	2100      	movs	r1, #0
 8020812:	4805      	ldr	r0, [pc, #20]	@ (8020828 <MX_I2C2_Init+0x74>)
 8020814:	f002 fc3b 	bl	802308e <HAL_I2CEx_ConfigDigitalFilter>
 8020818:	4603      	mov	r3, r0
 802081a:	2b00      	cmp	r3, #0
 802081c:	d001      	beq.n	8020822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802081e:	f000 fb57 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8020822:	bf00      	nop
 8020824:	bd80      	pop	{r7, pc}
 8020826:	bf00      	nop
 8020828:	20000178 	.word	0x20000178
 802082c:	40005800 	.word	0x40005800
 8020830:	307075b1 	.word	0x307075b1

08020834 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8020834:	b580      	push	{r7, lr}
 8020836:	b086      	sub	sp, #24
 8020838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 802083a:	1d3b      	adds	r3, r7, #4
 802083c:	2200      	movs	r2, #0
 802083e:	601a      	str	r2, [r3, #0]
 8020840:	605a      	str	r2, [r3, #4]
 8020842:	609a      	str	r2, [r3, #8]
 8020844:	60da      	str	r2, [r3, #12]
 8020846:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8020848:	4b23      	ldr	r3, [pc, #140]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802084a:	4a24      	ldr	r2, [pc, #144]	@ (80208dc <MX_OCTOSPI1_Init+0xa8>)
 802084c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 802084e:	4b22      	ldr	r3, [pc, #136]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020850:	2201      	movs	r2, #1
 8020852:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8020854:	4b20      	ldr	r3, [pc, #128]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020856:	2200      	movs	r2, #0
 8020858:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 802085a:	4b1f      	ldr	r3, [pc, #124]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802085c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8020860:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8020862:	4b1d      	ldr	r3, [pc, #116]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020864:	2220      	movs	r2, #32
 8020866:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8020868:	4b1b      	ldr	r3, [pc, #108]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802086a:	2201      	movs	r2, #1
 802086c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 802086e:	4b1a      	ldr	r3, [pc, #104]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020870:	2200      	movs	r2, #0
 8020872:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8020874:	4b18      	ldr	r3, [pc, #96]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020876:	2200      	movs	r2, #0
 8020878:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 802087a:	4b17      	ldr	r3, [pc, #92]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802087c:	2201      	movs	r2, #1
 802087e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8020880:	4b15      	ldr	r3, [pc, #84]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020882:	2200      	movs	r2, #0
 8020884:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8020886:	4b14      	ldr	r3, [pc, #80]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020888:	2200      	movs	r2, #0
 802088a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 802088c:	4b12      	ldr	r3, [pc, #72]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802088e:	2200      	movs	r2, #0
 8020890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8020892:	4b11      	ldr	r3, [pc, #68]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 8020894:	2208      	movs	r2, #8
 8020896:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8020898:	480f      	ldr	r0, [pc, #60]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 802089a:	f002 fc45 	bl	8023128 <HAL_OSPI_Init>
 802089e:	4603      	mov	r3, r0
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d001      	beq.n	80208a8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80208a4:	f000 fb14 	bl	8020ed0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80208a8:	2301      	movs	r3, #1
 80208aa:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80208ac:	2301      	movs	r3, #1
 80208ae:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80208b0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80208b4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80208b6:	1d3b      	adds	r3, r7, #4
 80208b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80208bc:	4619      	mov	r1, r3
 80208be:	4806      	ldr	r0, [pc, #24]	@ (80208d8 <MX_OCTOSPI1_Init+0xa4>)
 80208c0:	f002 fcec 	bl	802329c <HAL_OSPIM_Config>
 80208c4:	4603      	mov	r3, r0
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d001      	beq.n	80208ce <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80208ca:	f000 fb01 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80208ce:	bf00      	nop
 80208d0:	3718      	adds	r7, #24
 80208d2:	46bd      	mov	sp, r7
 80208d4:	bd80      	pop	{r7, pc}
 80208d6:	bf00      	nop
 80208d8:	200001cc 	.word	0x200001cc
 80208dc:	a0001000 	.word	0xa0001000

080208e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80208e0:	b580      	push	{r7, lr}
 80208e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80208e4:	4b1b      	ldr	r3, [pc, #108]	@ (8020954 <MX_SPI1_Init+0x74>)
 80208e6:	4a1c      	ldr	r2, [pc, #112]	@ (8020958 <MX_SPI1_Init+0x78>)
 80208e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80208ea:	4b1a      	ldr	r3, [pc, #104]	@ (8020954 <MX_SPI1_Init+0x74>)
 80208ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80208f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80208f2:	4b18      	ldr	r3, [pc, #96]	@ (8020954 <MX_SPI1_Init+0x74>)
 80208f4:	2200      	movs	r2, #0
 80208f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80208f8:	4b16      	ldr	r3, [pc, #88]	@ (8020954 <MX_SPI1_Init+0x74>)
 80208fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80208fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020900:	4b14      	ldr	r3, [pc, #80]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020902:	2200      	movs	r2, #0
 8020904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020906:	4b13      	ldr	r3, [pc, #76]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020908:	2200      	movs	r2, #0
 802090a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802090c:	4b11      	ldr	r3, [pc, #68]	@ (8020954 <MX_SPI1_Init+0x74>)
 802090e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8020914:	4b0f      	ldr	r3, [pc, #60]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020916:	2208      	movs	r2, #8
 8020918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802091a:	4b0e      	ldr	r3, [pc, #56]	@ (8020954 <MX_SPI1_Init+0x74>)
 802091c:	2200      	movs	r2, #0
 802091e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8020920:	4b0c      	ldr	r3, [pc, #48]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020922:	2200      	movs	r2, #0
 8020924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020926:	4b0b      	ldr	r3, [pc, #44]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020928:	2200      	movs	r2, #0
 802092a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 802092c:	4b09      	ldr	r3, [pc, #36]	@ (8020954 <MX_SPI1_Init+0x74>)
 802092e:	2207      	movs	r2, #7
 8020930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8020932:	4b08      	ldr	r3, [pc, #32]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020934:	2200      	movs	r2, #0
 8020936:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8020938:	4b06      	ldr	r3, [pc, #24]	@ (8020954 <MX_SPI1_Init+0x74>)
 802093a:	2208      	movs	r2, #8
 802093c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802093e:	4805      	ldr	r0, [pc, #20]	@ (8020954 <MX_SPI1_Init+0x74>)
 8020940:	f004 fda0 	bl	8025484 <HAL_SPI_Init>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	d001      	beq.n	802094e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 802094a:	f000 fac1 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802094e:	bf00      	nop
 8020950:	bd80      	pop	{r7, pc}
 8020952:	bf00      	nop
 8020954:	2000021c 	.word	0x2000021c
 8020958:	40013000 	.word	0x40013000

0802095c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8020960:	4b1b      	ldr	r3, [pc, #108]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020962:	4a1c      	ldr	r2, [pc, #112]	@ (80209d4 <MX_SPI3_Init+0x78>)
 8020964:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8020966:	4b1a      	ldr	r3, [pc, #104]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 802096c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 802096e:	4b18      	ldr	r3, [pc, #96]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020970:	2200      	movs	r2, #0
 8020972:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8020974:	4b16      	ldr	r3, [pc, #88]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020976:	f44f 7240 	mov.w	r2, #768	@ 0x300
 802097a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 802097c:	4b14      	ldr	r3, [pc, #80]	@ (80209d0 <MX_SPI3_Init+0x74>)
 802097e:	2200      	movs	r2, #0
 8020980:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020982:	4b13      	ldr	r3, [pc, #76]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020984:	2200      	movs	r2, #0
 8020986:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8020988:	4b11      	ldr	r3, [pc, #68]	@ (80209d0 <MX_SPI3_Init+0x74>)
 802098a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802098e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8020990:	4b0f      	ldr	r3, [pc, #60]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020992:	2208      	movs	r2, #8
 8020994:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020996:	4b0e      	ldr	r3, [pc, #56]	@ (80209d0 <MX_SPI3_Init+0x74>)
 8020998:	2200      	movs	r2, #0
 802099a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 802099c:	4b0c      	ldr	r3, [pc, #48]	@ (80209d0 <MX_SPI3_Init+0x74>)
 802099e:	2200      	movs	r2, #0
 80209a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209a2:	4b0b      	ldr	r3, [pc, #44]	@ (80209d0 <MX_SPI3_Init+0x74>)
 80209a4:	2200      	movs	r2, #0
 80209a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80209a8:	4b09      	ldr	r3, [pc, #36]	@ (80209d0 <MX_SPI3_Init+0x74>)
 80209aa:	2207      	movs	r2, #7
 80209ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80209ae:	4b08      	ldr	r3, [pc, #32]	@ (80209d0 <MX_SPI3_Init+0x74>)
 80209b0:	2200      	movs	r2, #0
 80209b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80209b4:	4b06      	ldr	r3, [pc, #24]	@ (80209d0 <MX_SPI3_Init+0x74>)
 80209b6:	2208      	movs	r2, #8
 80209b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80209ba:	4805      	ldr	r0, [pc, #20]	@ (80209d0 <MX_SPI3_Init+0x74>)
 80209bc:	f004 fd62 	bl	8025484 <HAL_SPI_Init>
 80209c0:	4603      	mov	r3, r0
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d001      	beq.n	80209ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80209c6:	f000 fa83 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80209ca:	bf00      	nop
 80209cc:	bd80      	pop	{r7, pc}
 80209ce:	bf00      	nop
 80209d0:	20000280 	.word	0x20000280
 80209d4:	40003c00 	.word	0x40003c00

080209d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80209d8:	b580      	push	{r7, lr}
 80209da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80209dc:	4b22      	ldr	r3, [pc, #136]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209de:	4a23      	ldr	r2, [pc, #140]	@ (8020a6c <MX_UART4_Init+0x94>)
 80209e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80209e2:	4b21      	ldr	r3, [pc, #132]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80209e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80209ea:	4b1f      	ldr	r3, [pc, #124]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209ec:	2200      	movs	r2, #0
 80209ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80209f0:	4b1d      	ldr	r3, [pc, #116]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209f2:	2200      	movs	r2, #0
 80209f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80209f6:	4b1c      	ldr	r3, [pc, #112]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209f8:	2200      	movs	r2, #0
 80209fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80209fc:	4b1a      	ldr	r3, [pc, #104]	@ (8020a68 <MX_UART4_Init+0x90>)
 80209fe:	220c      	movs	r2, #12
 8020a00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020a02:	4b19      	ldr	r3, [pc, #100]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a04:	2200      	movs	r2, #0
 8020a06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8020a08:	4b17      	ldr	r3, [pc, #92]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020a0e:	4b16      	ldr	r3, [pc, #88]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a10:	2200      	movs	r2, #0
 8020a12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020a14:	4b14      	ldr	r3, [pc, #80]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a16:	2200      	movs	r2, #0
 8020a18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020a1a:	4b13      	ldr	r3, [pc, #76]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a1c:	2200      	movs	r2, #0
 8020a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8020a20:	4811      	ldr	r0, [pc, #68]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a22:	f004 fdd2 	bl	80255ca <HAL_UART_Init>
 8020a26:	4603      	mov	r3, r0
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d001      	beq.n	8020a30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8020a2c:	f000 fa50 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020a30:	2100      	movs	r1, #0
 8020a32:	480d      	ldr	r0, [pc, #52]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a34:	f005 fb6e 	bl	8026114 <HAL_UARTEx_SetTxFifoThreshold>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d001      	beq.n	8020a42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8020a3e:	f000 fa47 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020a42:	2100      	movs	r1, #0
 8020a44:	4808      	ldr	r0, [pc, #32]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a46:	f005 fba3 	bl	8026190 <HAL_UARTEx_SetRxFifoThreshold>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	d001      	beq.n	8020a54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8020a50:	f000 fa3e 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8020a54:	4804      	ldr	r0, [pc, #16]	@ (8020a68 <MX_UART4_Init+0x90>)
 8020a56:	f005 fb24 	bl	80260a2 <HAL_UARTEx_DisableFifoMode>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d001      	beq.n	8020a64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8020a60:	f000 fa36 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8020a64:	bf00      	nop
 8020a66:	bd80      	pop	{r7, pc}
 8020a68:	200002e4 	.word	0x200002e4
 8020a6c:	40004c00 	.word	0x40004c00

08020a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020a70:	b580      	push	{r7, lr}
 8020a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020a74:	4b22      	ldr	r3, [pc, #136]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a76:	4a23      	ldr	r2, [pc, #140]	@ (8020b04 <MX_USART1_UART_Init+0x94>)
 8020a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020a7a:	4b21      	ldr	r3, [pc, #132]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8020a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020a82:	4b1f      	ldr	r3, [pc, #124]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a84:	2200      	movs	r2, #0
 8020a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020a88:	4b1d      	ldr	r3, [pc, #116]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a8a:	2200      	movs	r2, #0
 8020a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a90:	2200      	movs	r2, #0
 8020a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020a94:	4b1a      	ldr	r3, [pc, #104]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a96:	220c      	movs	r2, #12
 8020a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020a9a:	4b19      	ldr	r3, [pc, #100]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020aa0:	4b17      	ldr	r3, [pc, #92]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020aa2:	2200      	movs	r2, #0
 8020aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020aa6:	4b16      	ldr	r3, [pc, #88]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020aa8:	2200      	movs	r2, #0
 8020aaa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020aac:	4b14      	ldr	r3, [pc, #80]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020aae:	2200      	movs	r2, #0
 8020ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020ab2:	4b13      	ldr	r3, [pc, #76]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020ab4:	2200      	movs	r2, #0
 8020ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020ab8:	4811      	ldr	r0, [pc, #68]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020aba:	f004 fd86 	bl	80255ca <HAL_UART_Init>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d001      	beq.n	8020ac8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8020ac4:	f000 fa04 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020ac8:	2100      	movs	r1, #0
 8020aca:	480d      	ldr	r0, [pc, #52]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020acc:	f005 fb22 	bl	8026114 <HAL_UARTEx_SetTxFifoThreshold>
 8020ad0:	4603      	mov	r3, r0
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d001      	beq.n	8020ada <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8020ad6:	f000 f9fb 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020ada:	2100      	movs	r1, #0
 8020adc:	4808      	ldr	r0, [pc, #32]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020ade:	f005 fb57 	bl	8026190 <HAL_UARTEx_SetRxFifoThreshold>
 8020ae2:	4603      	mov	r3, r0
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d001      	beq.n	8020aec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8020ae8:	f000 f9f2 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8020aec:	4804      	ldr	r0, [pc, #16]	@ (8020b00 <MX_USART1_UART_Init+0x90>)
 8020aee:	f005 fad8 	bl	80260a2 <HAL_UARTEx_DisableFifoMode>
 8020af2:	4603      	mov	r3, r0
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d001      	beq.n	8020afc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8020af8:	f000 f9ea 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020afc:	bf00      	nop
 8020afe:	bd80      	pop	{r7, pc}
 8020b00:	20000378 	.word	0x20000378
 8020b04:	40013800 	.word	0x40013800

08020b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8020b08:	b580      	push	{r7, lr}
 8020b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020b0c:	4b23      	ldr	r3, [pc, #140]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b0e:	4a24      	ldr	r2, [pc, #144]	@ (8020ba0 <MX_USART2_UART_Init+0x98>)
 8020b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020b12:	4b22      	ldr	r3, [pc, #136]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8020b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8020b1a:	4b20      	ldr	r3, [pc, #128]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020b20:	4b1e      	ldr	r3, [pc, #120]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b22:	2200      	movs	r2, #0
 8020b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020b26:	4b1d      	ldr	r3, [pc, #116]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b2e:	220c      	movs	r2, #12
 8020b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8020b32:	4b1a      	ldr	r3, [pc, #104]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b34:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8020b38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b3a:	4b18      	ldr	r3, [pc, #96]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020b40:	4b16      	ldr	r3, [pc, #88]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b42:	2200      	movs	r2, #0
 8020b44:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020b46:	4b15      	ldr	r3, [pc, #84]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b48:	2200      	movs	r2, #0
 8020b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020b4c:	4b13      	ldr	r3, [pc, #76]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b4e:	2200      	movs	r2, #0
 8020b50:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020b52:	4812      	ldr	r0, [pc, #72]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b54:	f004 fd39 	bl	80255ca <HAL_UART_Init>
 8020b58:	4603      	mov	r3, r0
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	d001      	beq.n	8020b62 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8020b5e:	f000 f9b7 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020b62:	2100      	movs	r1, #0
 8020b64:	480d      	ldr	r0, [pc, #52]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b66:	f005 fad5 	bl	8026114 <HAL_UARTEx_SetTxFifoThreshold>
 8020b6a:	4603      	mov	r3, r0
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d001      	beq.n	8020b74 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8020b70:	f000 f9ae 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020b74:	2100      	movs	r1, #0
 8020b76:	4809      	ldr	r0, [pc, #36]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b78:	f005 fb0a 	bl	8026190 <HAL_UARTEx_SetRxFifoThreshold>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d001      	beq.n	8020b86 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8020b82:	f000 f9a5 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8020b86:	4805      	ldr	r0, [pc, #20]	@ (8020b9c <MX_USART2_UART_Init+0x94>)
 8020b88:	f005 fa8b 	bl	80260a2 <HAL_UARTEx_DisableFifoMode>
 8020b8c:	4603      	mov	r3, r0
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d001      	beq.n	8020b96 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8020b92:	f000 f99d 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020b96:	bf00      	nop
 8020b98:	bd80      	pop	{r7, pc}
 8020b9a:	bf00      	nop
 8020b9c:	2000040c 	.word	0x2000040c
 8020ba0:	40004400 	.word	0x40004400

08020ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020ba8:	4b22      	ldr	r3, [pc, #136]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020baa:	4a23      	ldr	r2, [pc, #140]	@ (8020c38 <MX_USART3_UART_Init+0x94>)
 8020bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020bae:	4b21      	ldr	r3, [pc, #132]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8020bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bb8:	2200      	movs	r2, #0
 8020bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bbe:	2200      	movs	r2, #0
 8020bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bc4:	2200      	movs	r2, #0
 8020bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bca:	220c      	movs	r2, #12
 8020bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020bce:	4b19      	ldr	r3, [pc, #100]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bd0:	2200      	movs	r2, #0
 8020bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020bd4:	4b17      	ldr	r3, [pc, #92]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bd6:	2200      	movs	r2, #0
 8020bd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020bda:	4b16      	ldr	r3, [pc, #88]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bdc:	2200      	movs	r2, #0
 8020bde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8020be0:	4b14      	ldr	r3, [pc, #80]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020be2:	2200      	movs	r2, #0
 8020be4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020be6:	4b13      	ldr	r3, [pc, #76]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020be8:	2200      	movs	r2, #0
 8020bea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020bec:	4811      	ldr	r0, [pc, #68]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020bee:	f004 fcec 	bl	80255ca <HAL_UART_Init>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d001      	beq.n	8020bfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8020bf8:	f000 f96a 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020bfc:	2100      	movs	r1, #0
 8020bfe:	480d      	ldr	r0, [pc, #52]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020c00:	f005 fa88 	bl	8026114 <HAL_UARTEx_SetTxFifoThreshold>
 8020c04:	4603      	mov	r3, r0
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d001      	beq.n	8020c0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8020c0a:	f000 f961 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020c0e:	2100      	movs	r1, #0
 8020c10:	4808      	ldr	r0, [pc, #32]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020c12:	f005 fabd 	bl	8026190 <HAL_UARTEx_SetRxFifoThreshold>
 8020c16:	4603      	mov	r3, r0
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d001      	beq.n	8020c20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8020c1c:	f000 f958 	bl	8020ed0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8020c20:	4804      	ldr	r0, [pc, #16]	@ (8020c34 <MX_USART3_UART_Init+0x90>)
 8020c22:	f005 fa3e 	bl	80260a2 <HAL_UARTEx_DisableFifoMode>
 8020c26:	4603      	mov	r3, r0
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d001      	beq.n	8020c30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8020c2c:	f000 f950 	bl	8020ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020c30:	bf00      	nop
 8020c32:	bd80      	pop	{r7, pc}
 8020c34:	200004a0 	.word	0x200004a0
 8020c38:	40004800 	.word	0x40004800

08020c3c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8020c40:	bf00      	nop
 8020c42:	46bd      	mov	sp, r7
 8020c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c48:	4770      	bx	lr
	...

08020c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b08c      	sub	sp, #48	@ 0x30
 8020c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c52:	f107 031c 	add.w	r3, r7, #28
 8020c56:	2200      	movs	r2, #0
 8020c58:	601a      	str	r2, [r3, #0]
 8020c5a:	605a      	str	r2, [r3, #4]
 8020c5c:	609a      	str	r2, [r3, #8]
 8020c5e:	60da      	str	r2, [r3, #12]
 8020c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020c62:	4b96      	ldr	r3, [pc, #600]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c66:	4a95      	ldr	r2, [pc, #596]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c68:	f043 0310 	orr.w	r3, r3, #16
 8020c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020c6e:	4b93      	ldr	r3, [pc, #588]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c72:	f003 0310 	and.w	r3, r3, #16
 8020c76:	61bb      	str	r3, [r7, #24]
 8020c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c7a:	4b90      	ldr	r3, [pc, #576]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c7e:	4a8f      	ldr	r2, [pc, #572]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c80:	f043 0304 	orr.w	r3, r3, #4
 8020c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020c86:	4b8d      	ldr	r3, [pc, #564]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c8a:	f003 0304 	and.w	r3, r3, #4
 8020c8e:	617b      	str	r3, [r7, #20]
 8020c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c92:	4b8a      	ldr	r3, [pc, #552]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c96:	4a89      	ldr	r2, [pc, #548]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020c9e:	4b87      	ldr	r3, [pc, #540]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020ca6:	613b      	str	r3, [r7, #16]
 8020ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020caa:	4b84      	ldr	r3, [pc, #528]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cae:	4a83      	ldr	r2, [pc, #524]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cb0:	f043 0301 	orr.w	r3, r3, #1
 8020cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020cb6:	4b81      	ldr	r3, [pc, #516]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cba:	f003 0301 	and.w	r3, r3, #1
 8020cbe:	60fb      	str	r3, [r7, #12]
 8020cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cc8:	f043 0302 	orr.w	r3, r3, #2
 8020ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020cce:	4b7b      	ldr	r3, [pc, #492]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cd2:	f003 0302 	and.w	r3, r3, #2
 8020cd6:	60bb      	str	r3, [r7, #8]
 8020cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cda:	4b78      	ldr	r3, [pc, #480]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cde:	4a77      	ldr	r2, [pc, #476]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020ce0:	f043 0308 	orr.w	r3, r3, #8
 8020ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020ce6:	4b75      	ldr	r3, [pc, #468]	@ (8020ebc <MX_GPIO_Init+0x270>)
 8020ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020cea:	f003 0308 	and.w	r3, r3, #8
 8020cee:	607b      	str	r3, [r7, #4]
 8020cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	f240 1105 	movw	r1, #261	@ 0x105
 8020cf8:	4871      	ldr	r0, [pc, #452]	@ (8020ec0 <MX_GPIO_Init+0x274>)
 8020cfa:	f002 f8a7 	bl	8022e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8020cfe:	2200      	movs	r2, #0
 8020d00:	f248 111c 	movw	r1, #33052	@ 0x811c
 8020d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020d08:	f002 f8a0 	bl	8022e4c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8020d0c:	2200      	movs	r2, #0
 8020d0e:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8020d12:	486c      	ldr	r0, [pc, #432]	@ (8020ec4 <MX_GPIO_Init+0x278>)
 8020d14:	f002 f89a 	bl	8022e4c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8020d18:	2200      	movs	r2, #0
 8020d1a:	f242 0183 	movw	r1, #8323	@ 0x2083
 8020d1e:	486a      	ldr	r0, [pc, #424]	@ (8020ec8 <MX_GPIO_Init+0x27c>)
 8020d20:	f002 f894 	bl	8022e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8020d24:	2200      	movs	r2, #0
 8020d26:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8020d2a:	4868      	ldr	r0, [pc, #416]	@ (8020ecc <MX_GPIO_Init+0x280>)
 8020d2c:	f002 f88e 	bl	8022e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8020d30:	f240 1305 	movw	r3, #261	@ 0x105
 8020d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d36:	2301      	movs	r3, #1
 8020d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d3a:	2300      	movs	r3, #0
 8020d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d3e:	2300      	movs	r3, #0
 8020d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020d42:	f107 031c 	add.w	r3, r7, #28
 8020d46:	4619      	mov	r1, r3
 8020d48:	485d      	ldr	r0, [pc, #372]	@ (8020ec0 <MX_GPIO_Init+0x274>)
 8020d4a:	f001 feed 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8020d4e:	237a      	movs	r3, #122	@ 0x7a
 8020d50:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020d52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8020d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d58:	2300      	movs	r3, #0
 8020d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020d5c:	f107 031c 	add.w	r3, r7, #28
 8020d60:	4619      	mov	r1, r3
 8020d62:	4857      	ldr	r0, [pc, #348]	@ (8020ec0 <MX_GPIO_Init+0x274>)
 8020d64:	f001 fee0 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8020d68:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8020d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020d6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8020d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d74:	2300      	movs	r3, #0
 8020d76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d78:	f107 031c 	add.w	r3, r7, #28
 8020d7c:	4619      	mov	r1, r3
 8020d7e:	4853      	ldr	r0, [pc, #332]	@ (8020ecc <MX_GPIO_Init+0x280>)
 8020d80:	f001 fed2 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8020d84:	f248 131c 	movw	r3, #33052	@ 0x811c
 8020d88:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8e:	2300      	movs	r3, #0
 8020d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d92:	2300      	movs	r3, #0
 8020d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d96:	f107 031c 	add.w	r3, r7, #28
 8020d9a:	4619      	mov	r1, r3
 8020d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020da0:	f001 fec2 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8020da4:	2301      	movs	r3, #1
 8020da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020da8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8020dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dae:	2300      	movs	r3, #0
 8020db0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8020db2:	f107 031c 	add.w	r3, r7, #28
 8020db6:	4619      	mov	r1, r3
 8020db8:	4842      	ldr	r0, [pc, #264]	@ (8020ec4 <MX_GPIO_Init+0x278>)
 8020dba:	f001 feb5 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8020dbe:	2302      	movs	r3, #2
 8020dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020dc2:	2302      	movs	r3, #2
 8020dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8020dce:	2302      	movs	r3, #2
 8020dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8020dd2:	f107 031c 	add.w	r3, r7, #28
 8020dd6:	4619      	mov	r1, r3
 8020dd8:	483a      	ldr	r0, [pc, #232]	@ (8020ec4 <MX_GPIO_Init+0x278>)
 8020dda:	f001 fea5 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8020dde:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8020de2:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020de4:	2301      	movs	r3, #1
 8020de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020de8:	2300      	movs	r3, #0
 8020dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dec:	2300      	movs	r3, #0
 8020dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020df0:	f107 031c 	add.w	r3, r7, #28
 8020df4:	4619      	mov	r1, r3
 8020df6:	4833      	ldr	r0, [pc, #204]	@ (8020ec4 <MX_GPIO_Init+0x278>)
 8020df8:	f001 fe96 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8020dfc:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8020e00:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020e02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8020e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e08:	2300      	movs	r3, #0
 8020e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e0c:	f107 031c 	add.w	r3, r7, #28
 8020e10:	4619      	mov	r1, r3
 8020e12:	482d      	ldr	r0, [pc, #180]	@ (8020ec8 <MX_GPIO_Init+0x27c>)
 8020e14:	f001 fe88 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8020e18:	f242 0383 	movw	r3, #8323	@ 0x2083
 8020e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e1e:	2301      	movs	r3, #1
 8020e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e22:	2300      	movs	r3, #0
 8020e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e26:	2300      	movs	r3, #0
 8020e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e2a:	f107 031c 	add.w	r3, r7, #28
 8020e2e:	4619      	mov	r1, r3
 8020e30:	4825      	ldr	r0, [pc, #148]	@ (8020ec8 <MX_GPIO_Init+0x27c>)
 8020e32:	f001 fe79 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8020e36:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8020e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e3c:	2301      	movs	r3, #1
 8020e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e40:	2300      	movs	r3, #0
 8020e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e44:	2300      	movs	r3, #0
 8020e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020e48:	f107 031c 	add.w	r3, r7, #28
 8020e4c:	4619      	mov	r1, r3
 8020e4e:	481f      	ldr	r0, [pc, #124]	@ (8020ecc <MX_GPIO_Init+0x280>)
 8020e50:	f001 fe6a 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8020e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8020e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e5e:	2300      	movs	r3, #0
 8020e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020e62:	f107 031c 	add.w	r3, r7, #28
 8020e66:	4619      	mov	r1, r3
 8020e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020e6c:	f001 fe5c 	bl	8022b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8020e70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8020e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020e76:	2302      	movs	r3, #2
 8020e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e7a:	2300      	movs	r3, #0
 8020e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020e7e:	2303      	movs	r3, #3
 8020e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020e82:	230a      	movs	r3, #10
 8020e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020e86:	f107 031c 	add.w	r3, r7, #28
 8020e8a:	4619      	mov	r1, r3
 8020e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020e90:	f001 fe4a 	bl	8022b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8020e94:	2200      	movs	r2, #0
 8020e96:	2100      	movs	r1, #0
 8020e98:	2017      	movs	r0, #23
 8020e9a:	f001 fd02 	bl	80228a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8020e9e:	2017      	movs	r0, #23
 8020ea0:	f001 fd1b 	bl	80228da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	2100      	movs	r1, #0
 8020ea8:	2028      	movs	r0, #40	@ 0x28
 8020eaa:	f001 fcfa 	bl	80228a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8020eae:	2028      	movs	r0, #40	@ 0x28
 8020eb0:	f001 fd13 	bl	80228da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8020eb4:	bf00      	nop
 8020eb6:	3730      	adds	r7, #48	@ 0x30
 8020eb8:	46bd      	mov	sp, r7
 8020eba:	bd80      	pop	{r7, pc}
 8020ebc:	40021000 	.word	0x40021000
 8020ec0:	48001000 	.word	0x48001000
 8020ec4:	48000400 	.word	0x48000400
 8020ec8:	48000c00 	.word	0x48000c00
 8020ecc:	48000800 	.word	0x48000800

08020ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020ed0:	b480      	push	{r7}
 8020ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020ed4:	b672      	cpsid	i
}
 8020ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020ed8:	bf00      	nop
 8020eda:	e7fd      	b.n	8020ed8 <Error_Handler+0x8>

08020edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020edc:	b480      	push	{r7}
 8020ede:	b083      	sub	sp, #12
 8020ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8020f20 <HAL_MspInit+0x44>)
 8020ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8020f20 <HAL_MspInit+0x44>)
 8020ee8:	f043 0301 	orr.w	r3, r3, #1
 8020eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8020eee:	4b0c      	ldr	r3, [pc, #48]	@ (8020f20 <HAL_MspInit+0x44>)
 8020ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020ef2:	f003 0301 	and.w	r3, r3, #1
 8020ef6:	607b      	str	r3, [r7, #4]
 8020ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020efa:	4b09      	ldr	r3, [pc, #36]	@ (8020f20 <HAL_MspInit+0x44>)
 8020efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020efe:	4a08      	ldr	r2, [pc, #32]	@ (8020f20 <HAL_MspInit+0x44>)
 8020f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8020f06:	4b06      	ldr	r3, [pc, #24]	@ (8020f20 <HAL_MspInit+0x44>)
 8020f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020f0e:	603b      	str	r3, [r7, #0]
 8020f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020f12:	bf00      	nop
 8020f14:	370c      	adds	r7, #12
 8020f16:	46bd      	mov	sp, r7
 8020f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1c:	4770      	bx	lr
 8020f1e:	bf00      	nop
 8020f20:	40021000 	.word	0x40021000

08020f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8020f24:	b580      	push	{r7, lr}
 8020f26:	b08a      	sub	sp, #40	@ 0x28
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f2c:	f107 0314 	add.w	r3, r7, #20
 8020f30:	2200      	movs	r2, #0
 8020f32:	601a      	str	r2, [r3, #0]
 8020f34:	605a      	str	r2, [r3, #4]
 8020f36:	609a      	str	r2, [r3, #8]
 8020f38:	60da      	str	r2, [r3, #12]
 8020f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	681b      	ldr	r3, [r3, #0]
 8020f40:	4a15      	ldr	r2, [pc, #84]	@ (8020f98 <HAL_ADC_MspInit+0x74>)
 8020f42:	4293      	cmp	r3, r2
 8020f44:	d123      	bne.n	8020f8e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8020f46:	4b15      	ldr	r3, [pc, #84]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f4a:	4a14      	ldr	r2, [pc, #80]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020f52:	4b12      	ldr	r3, [pc, #72]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020f5a:	613b      	str	r3, [r7, #16]
 8020f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f62:	4a0e      	ldr	r2, [pc, #56]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f64:	f043 0304 	orr.w	r3, r3, #4
 8020f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8020f9c <HAL_ADC_MspInit+0x78>)
 8020f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f6e:	f003 0304 	and.w	r3, r3, #4
 8020f72:	60fb      	str	r3, [r7, #12]
 8020f74:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8020f76:	233f      	movs	r3, #63	@ 0x3f
 8020f78:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8020f7a:	230b      	movs	r3, #11
 8020f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f7e:	2300      	movs	r3, #0
 8020f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020f82:	f107 0314 	add.w	r3, r7, #20
 8020f86:	4619      	mov	r1, r3
 8020f88:	4805      	ldr	r0, [pc, #20]	@ (8020fa0 <HAL_ADC_MspInit+0x7c>)
 8020f8a:	f001 fdcd 	bl	8022b28 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8020f8e:	bf00      	nop
 8020f90:	3728      	adds	r7, #40	@ 0x28
 8020f92:	46bd      	mov	sp, r7
 8020f94:	bd80      	pop	{r7, pc}
 8020f96:	bf00      	nop
 8020f98:	50040000 	.word	0x50040000
 8020f9c:	40021000 	.word	0x40021000
 8020fa0:	48000800 	.word	0x48000800

08020fa4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b0ae      	sub	sp, #184	@ 0xb8
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	601a      	str	r2, [r3, #0]
 8020fb4:	605a      	str	r2, [r3, #4]
 8020fb6:	609a      	str	r2, [r3, #8]
 8020fb8:	60da      	str	r2, [r3, #12]
 8020fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8020fbc:	f107 0310 	add.w	r3, r7, #16
 8020fc0:	2294      	movs	r2, #148	@ 0x94
 8020fc2:	2100      	movs	r1, #0
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	f005 fa43 	bl	8026450 <memset>
  if(DFSDM1_Init == 0)
 8020fca:	4b25      	ldr	r3, [pc, #148]	@ (8021060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d142      	bne.n	8021058 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8020fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8020fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8020fd8:	2300      	movs	r3, #0
 8020fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8020fde:	f107 0310 	add.w	r3, r7, #16
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	f003 fd26 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 8020fe8:	4603      	mov	r3, r0
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d001      	beq.n	8020ff2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8020fee:	f7ff ff6f 	bl	8020ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8020ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8020ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8020ff8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8020ffe:	4b19      	ldr	r3, [pc, #100]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8021000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8021006:	60fb      	str	r3, [r7, #12]
 8021008:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802100a:	4b16      	ldr	r3, [pc, #88]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 802100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802100e:	4a15      	ldr	r2, [pc, #84]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8021010:	f043 0310 	orr.w	r3, r3, #16
 8021014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8021016:	4b13      	ldr	r3, [pc, #76]	@ (8021064 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8021018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802101a:	f003 0310 	and.w	r3, r3, #16
 802101e:	60bb      	str	r3, [r7, #8]
 8021020:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8021022:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8021026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802102a:	2302      	movs	r3, #2
 802102c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021030:	2300      	movs	r3, #0
 8021032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021036:	2300      	movs	r3, #0
 8021038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 802103c:	2306      	movs	r3, #6
 802103e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021042:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8021046:	4619      	mov	r1, r3
 8021048:	4807      	ldr	r0, [pc, #28]	@ (8021068 <HAL_DFSDM_ChannelMspInit+0xc4>)
 802104a:	f001 fd6d 	bl	8022b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 802104e:	4b04      	ldr	r3, [pc, #16]	@ (8021060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	3301      	adds	r3, #1
 8021054:	4a02      	ldr	r2, [pc, #8]	@ (8021060 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8021056:	6013      	str	r3, [r2, #0]
  }

}
 8021058:	bf00      	nop
 802105a:	37b8      	adds	r7, #184	@ 0xb8
 802105c:	46bd      	mov	sp, r7
 802105e:	bd80      	pop	{r7, pc}
 8021060:	20000534 	.word	0x20000534
 8021064:	40021000 	.word	0x40021000
 8021068:	48001000 	.word	0x48001000

0802106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802106c:	b580      	push	{r7, lr}
 802106e:	b0b0      	sub	sp, #192	@ 0xc0
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021074:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8021078:	2200      	movs	r2, #0
 802107a:	601a      	str	r2, [r3, #0]
 802107c:	605a      	str	r2, [r3, #4]
 802107e:	609a      	str	r2, [r3, #8]
 8021080:	60da      	str	r2, [r3, #12]
 8021082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8021084:	f107 0318 	add.w	r3, r7, #24
 8021088:	2294      	movs	r2, #148	@ 0x94
 802108a:	2100      	movs	r1, #0
 802108c:	4618      	mov	r0, r3
 802108e:	f005 f9df 	bl	8026450 <memset>
  if(hi2c->Instance==I2C1)
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	4a42      	ldr	r2, [pc, #264]	@ (80211a0 <HAL_I2C_MspInit+0x134>)
 8021098:	4293      	cmp	r3, r2
 802109a:	d13c      	bne.n	8021116 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 802109c:	2340      	movs	r3, #64	@ 0x40
 802109e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80210a0:	2300      	movs	r3, #0
 80210a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80210a4:	f107 0318 	add.w	r3, r7, #24
 80210a8:	4618      	mov	r0, r3
 80210aa:	f003 fcc3 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 80210ae:	4603      	mov	r3, r0
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d001      	beq.n	80210b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80210b4:	f7ff ff0c 	bl	8020ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80210b8:	4b3a      	ldr	r3, [pc, #232]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 80210ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80210bc:	4a39      	ldr	r2, [pc, #228]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 80210be:	f043 0302 	orr.w	r3, r3, #2
 80210c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80210c4:	4b37      	ldr	r3, [pc, #220]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 80210c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80210c8:	f003 0302 	and.w	r3, r3, #2
 80210cc:	617b      	str	r3, [r7, #20]
 80210ce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80210d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80210d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80210d8:	2312      	movs	r3, #18
 80210da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80210de:	2301      	movs	r3, #1
 80210e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80210e4:	2303      	movs	r3, #3
 80210e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80210ea:	2304      	movs	r3, #4
 80210ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80210f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80210f4:	4619      	mov	r1, r3
 80210f6:	482c      	ldr	r0, [pc, #176]	@ (80211a8 <HAL_I2C_MspInit+0x13c>)
 80210f8:	f001 fd16 	bl	8022b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80210fc:	4b29      	ldr	r3, [pc, #164]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 80210fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021100:	4a28      	ldr	r2, [pc, #160]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 8021102:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8021106:	6593      	str	r3, [r2, #88]	@ 0x58
 8021108:	4b26      	ldr	r3, [pc, #152]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 802110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802110c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021110:	613b      	str	r3, [r7, #16]
 8021112:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8021114:	e040      	b.n	8021198 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	4a24      	ldr	r2, [pc, #144]	@ (80211ac <HAL_I2C_MspInit+0x140>)
 802111c:	4293      	cmp	r3, r2
 802111e:	d13b      	bne.n	8021198 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8021120:	2380      	movs	r3, #128	@ 0x80
 8021122:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8021124:	2300      	movs	r3, #0
 8021126:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8021128:	f107 0318 	add.w	r3, r7, #24
 802112c:	4618      	mov	r0, r3
 802112e:	f003 fc81 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 8021132:	4603      	mov	r3, r0
 8021134:	2b00      	cmp	r3, #0
 8021136:	d001      	beq.n	802113c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8021138:	f7ff feca 	bl	8020ed0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802113c:	4b19      	ldr	r3, [pc, #100]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 802113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021140:	4a18      	ldr	r2, [pc, #96]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 8021142:	f043 0302 	orr.w	r3, r3, #2
 8021146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8021148:	4b16      	ldr	r3, [pc, #88]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 802114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802114c:	f003 0302 	and.w	r3, r3, #2
 8021150:	60fb      	str	r3, [r7, #12]
 8021152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8021154:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8021158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802115c:	2312      	movs	r3, #18
 802115e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021162:	2301      	movs	r3, #1
 8021164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021168:	2303      	movs	r3, #3
 802116a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802116e:	2304      	movs	r3, #4
 8021170:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021174:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8021178:	4619      	mov	r1, r3
 802117a:	480b      	ldr	r0, [pc, #44]	@ (80211a8 <HAL_I2C_MspInit+0x13c>)
 802117c:	f001 fcd4 	bl	8022b28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8021180:	4b08      	ldr	r3, [pc, #32]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 8021182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021184:	4a07      	ldr	r2, [pc, #28]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 8021186:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 802118a:	6593      	str	r3, [r2, #88]	@ 0x58
 802118c:	4b05      	ldr	r3, [pc, #20]	@ (80211a4 <HAL_I2C_MspInit+0x138>)
 802118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8021194:	60bb      	str	r3, [r7, #8]
 8021196:	68bb      	ldr	r3, [r7, #8]
}
 8021198:	bf00      	nop
 802119a:	37c0      	adds	r7, #192	@ 0xc0
 802119c:	46bd      	mov	sp, r7
 802119e:	bd80      	pop	{r7, pc}
 80211a0:	40005400 	.word	0x40005400
 80211a4:	40021000 	.word	0x40021000
 80211a8:	48000400 	.word	0x48000400
 80211ac:	40005800 	.word	0x40005800

080211b0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80211b0:	b580      	push	{r7, lr}
 80211b2:	b0b0      	sub	sp, #192	@ 0xc0
 80211b4:	af00      	add	r7, sp, #0
 80211b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80211b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80211bc:	2200      	movs	r2, #0
 80211be:	601a      	str	r2, [r3, #0]
 80211c0:	605a      	str	r2, [r3, #4]
 80211c2:	609a      	str	r2, [r3, #8]
 80211c4:	60da      	str	r2, [r3, #12]
 80211c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80211c8:	f107 0318 	add.w	r3, r7, #24
 80211cc:	2294      	movs	r2, #148	@ 0x94
 80211ce:	2100      	movs	r1, #0
 80211d0:	4618      	mov	r0, r3
 80211d2:	f005 f93d 	bl	8026450 <memset>
  if(hospi->Instance==OCTOSPI1)
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	681b      	ldr	r3, [r3, #0]
 80211da:	4a28      	ldr	r2, [pc, #160]	@ (802127c <HAL_OSPI_MspInit+0xcc>)
 80211dc:	4293      	cmp	r3, r2
 80211de:	d149      	bne.n	8021274 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80211e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80211e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80211e6:	2300      	movs	r3, #0
 80211e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80211ec:	f107 0318 	add.w	r3, r7, #24
 80211f0:	4618      	mov	r0, r3
 80211f2:	f003 fc1f 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 80211f6:	4603      	mov	r3, r0
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d001      	beq.n	8021200 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80211fc:	f7ff fe68 	bl	8020ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8021200:	4b1f      	ldr	r3, [pc, #124]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 8021202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021204:	4a1e      	ldr	r2, [pc, #120]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 8021206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802120a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802120c:	4b1c      	ldr	r3, [pc, #112]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 802120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8021214:	617b      	str	r3, [r7, #20]
 8021216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8021218:	4b19      	ldr	r3, [pc, #100]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 802121a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802121c:	4a18      	ldr	r2, [pc, #96]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 802121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021222:	6513      	str	r3, [r2, #80]	@ 0x50
 8021224:	4b16      	ldr	r3, [pc, #88]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 8021226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802122c:	613b      	str	r3, [r7, #16]
 802122e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021230:	4b13      	ldr	r3, [pc, #76]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 8021232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021234:	4a12      	ldr	r2, [pc, #72]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 8021236:	f043 0310 	orr.w	r3, r3, #16
 802123a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802123c:	4b10      	ldr	r3, [pc, #64]	@ (8021280 <HAL_OSPI_MspInit+0xd0>)
 802123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021240:	f003 0310 	and.w	r3, r3, #16
 8021244:	60fb      	str	r3, [r7, #12]
 8021246:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8021248:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 802124c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021250:	2302      	movs	r3, #2
 8021252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021256:	2300      	movs	r3, #0
 8021258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802125c:	2303      	movs	r3, #3
 802125e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8021262:	230a      	movs	r3, #10
 8021264:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021268:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 802126c:	4619      	mov	r1, r3
 802126e:	4805      	ldr	r0, [pc, #20]	@ (8021284 <HAL_OSPI_MspInit+0xd4>)
 8021270:	f001 fc5a 	bl	8022b28 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8021274:	bf00      	nop
 8021276:	37c0      	adds	r7, #192	@ 0xc0
 8021278:	46bd      	mov	sp, r7
 802127a:	bd80      	pop	{r7, pc}
 802127c:	a0001000 	.word	0xa0001000
 8021280:	40021000 	.word	0x40021000
 8021284:	48001000 	.word	0x48001000

08021288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021288:	b580      	push	{r7, lr}
 802128a:	b08c      	sub	sp, #48	@ 0x30
 802128c:	af00      	add	r7, sp, #0
 802128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021290:	f107 031c 	add.w	r3, r7, #28
 8021294:	2200      	movs	r2, #0
 8021296:	601a      	str	r2, [r3, #0]
 8021298:	605a      	str	r2, [r3, #4]
 802129a:	609a      	str	r2, [r3, #8]
 802129c:	60da      	str	r2, [r3, #12]
 802129e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a2f      	ldr	r2, [pc, #188]	@ (8021364 <HAL_SPI_MspInit+0xdc>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d129      	bne.n	80212fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80212aa:	4b2f      	ldr	r3, [pc, #188]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80212ae:	4a2e      	ldr	r2, [pc, #184]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80212b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80212b6:	4b2c      	ldr	r3, [pc, #176]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80212ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80212be:	61bb      	str	r3, [r7, #24]
 80212c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80212c2:	4b29      	ldr	r3, [pc, #164]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80212c6:	4a28      	ldr	r2, [pc, #160]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212c8:	f043 0301 	orr.w	r3, r3, #1
 80212cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80212ce:	4b26      	ldr	r3, [pc, #152]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 80212d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80212d2:	f003 0301 	and.w	r3, r3, #1
 80212d6:	617b      	str	r3, [r7, #20]
 80212d8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80212da:	23e0      	movs	r3, #224	@ 0xe0
 80212dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212de:	2302      	movs	r3, #2
 80212e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212e2:	2300      	movs	r3, #0
 80212e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80212e6:	2303      	movs	r3, #3
 80212e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80212ea:	2305      	movs	r3, #5
 80212ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80212ee:	f107 031c 	add.w	r3, r7, #28
 80212f2:	4619      	mov	r1, r3
 80212f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80212f8:	f001 fc16 	bl	8022b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80212fc:	e02d      	b.n	802135a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	4a1a      	ldr	r2, [pc, #104]	@ (802136c <HAL_SPI_MspInit+0xe4>)
 8021304:	4293      	cmp	r3, r2
 8021306:	d128      	bne.n	802135a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8021308:	4b17      	ldr	r3, [pc, #92]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 802130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802130c:	4a16      	ldr	r2, [pc, #88]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 802130e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8021312:	6593      	str	r3, [r2, #88]	@ 0x58
 8021314:	4b14      	ldr	r3, [pc, #80]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 8021316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 802131c:	613b      	str	r3, [r7, #16]
 802131e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021320:	4b11      	ldr	r3, [pc, #68]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 8021322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021324:	4a10      	ldr	r2, [pc, #64]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 8021326:	f043 0304 	orr.w	r3, r3, #4
 802132a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802132c:	4b0e      	ldr	r3, [pc, #56]	@ (8021368 <HAL_SPI_MspInit+0xe0>)
 802132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021330:	f003 0304 	and.w	r3, r3, #4
 8021334:	60fb      	str	r3, [r7, #12]
 8021336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8021338:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 802133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802133e:	2302      	movs	r3, #2
 8021340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021342:	2300      	movs	r3, #0
 8021344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021346:	2303      	movs	r3, #3
 8021348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802134a:	2306      	movs	r3, #6
 802134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802134e:	f107 031c 	add.w	r3, r7, #28
 8021352:	4619      	mov	r1, r3
 8021354:	4806      	ldr	r0, [pc, #24]	@ (8021370 <HAL_SPI_MspInit+0xe8>)
 8021356:	f001 fbe7 	bl	8022b28 <HAL_GPIO_Init>
}
 802135a:	bf00      	nop
 802135c:	3730      	adds	r7, #48	@ 0x30
 802135e:	46bd      	mov	sp, r7
 8021360:	bd80      	pop	{r7, pc}
 8021362:	bf00      	nop
 8021364:	40013000 	.word	0x40013000
 8021368:	40021000 	.word	0x40021000
 802136c:	40003c00 	.word	0x40003c00
 8021370:	48000800 	.word	0x48000800

08021374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021374:	b580      	push	{r7, lr}
 8021376:	b0b4      	sub	sp, #208	@ 0xd0
 8021378:	af00      	add	r7, sp, #0
 802137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802137c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8021380:	2200      	movs	r2, #0
 8021382:	601a      	str	r2, [r3, #0]
 8021384:	605a      	str	r2, [r3, #4]
 8021386:	609a      	str	r2, [r3, #8]
 8021388:	60da      	str	r2, [r3, #12]
 802138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 802138c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021390:	2294      	movs	r2, #148	@ 0x94
 8021392:	2100      	movs	r1, #0
 8021394:	4618      	mov	r0, r3
 8021396:	f005 f85b 	bl	8026450 <memset>
  if(huart->Instance==UART4)
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	4a83      	ldr	r2, [pc, #524]	@ (80215ac <HAL_UART_MspInit+0x238>)
 80213a0:	4293      	cmp	r3, r2
 80213a2:	d13c      	bne.n	802141e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80213a4:	2308      	movs	r3, #8
 80213a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80213a8:	2300      	movs	r3, #0
 80213aa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80213ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80213b0:	4618      	mov	r0, r3
 80213b2:	f003 fb3f 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 80213b6:	4603      	mov	r3, r0
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d001      	beq.n	80213c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80213bc:	f7ff fd88 	bl	8020ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80213c0:	4b7b      	ldr	r3, [pc, #492]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80213c4:	4a7a      	ldr	r2, [pc, #488]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80213ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80213cc:	4b78      	ldr	r3, [pc, #480]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80213d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80213d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80213d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80213d8:	4b75      	ldr	r3, [pc, #468]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80213dc:	4a74      	ldr	r2, [pc, #464]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213de:	f043 0301 	orr.w	r3, r3, #1
 80213e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80213e4:	4b72      	ldr	r3, [pc, #456]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80213e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80213e8:	f003 0301 	and.w	r3, r3, #1
 80213ec:	623b      	str	r3, [r7, #32]
 80213ee:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80213f0:	2303      	movs	r3, #3
 80213f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80213f6:	2302      	movs	r3, #2
 80213f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80213fc:	2300      	movs	r3, #0
 80213fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021402:	2303      	movs	r3, #3
 8021404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8021408:	2308      	movs	r3, #8
 802140a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802140e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8021412:	4619      	mov	r1, r3
 8021414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8021418:	f001 fb86 	bl	8022b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 802141c:	e0c2      	b.n	80215a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	681b      	ldr	r3, [r3, #0]
 8021422:	4a64      	ldr	r2, [pc, #400]	@ (80215b4 <HAL_UART_MspInit+0x240>)
 8021424:	4293      	cmp	r3, r2
 8021426:	d13b      	bne.n	80214a0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8021428:	2301      	movs	r3, #1
 802142a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 802142c:	2300      	movs	r3, #0
 802142e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8021430:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021434:	4618      	mov	r0, r3
 8021436:	f003 fafd 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 802143a:	4603      	mov	r3, r0
 802143c:	2b00      	cmp	r3, #0
 802143e:	d001      	beq.n	8021444 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8021440:	f7ff fd46 	bl	8020ed0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021444:	4b5a      	ldr	r3, [pc, #360]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021448:	4a59      	ldr	r2, [pc, #356]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802144a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802144e:	6613      	str	r3, [r2, #96]	@ 0x60
 8021450:	4b57      	ldr	r3, [pc, #348]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8021458:	61fb      	str	r3, [r7, #28]
 802145a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802145c:	4b54      	ldr	r3, [pc, #336]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021460:	4a53      	ldr	r2, [pc, #332]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021462:	f043 0302 	orr.w	r3, r3, #2
 8021466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8021468:	4b51      	ldr	r3, [pc, #324]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802146c:	f003 0302 	and.w	r3, r3, #2
 8021470:	61bb      	str	r3, [r7, #24]
 8021472:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8021474:	23c0      	movs	r3, #192	@ 0xc0
 8021476:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802147a:	2302      	movs	r3, #2
 802147c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021480:	2300      	movs	r3, #0
 8021482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021486:	2303      	movs	r3, #3
 8021488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802148c:	2307      	movs	r3, #7
 802148e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021492:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8021496:	4619      	mov	r1, r3
 8021498:	4847      	ldr	r0, [pc, #284]	@ (80215b8 <HAL_UART_MspInit+0x244>)
 802149a:	f001 fb45 	bl	8022b28 <HAL_GPIO_Init>
}
 802149e:	e081      	b.n	80215a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	4a45      	ldr	r2, [pc, #276]	@ (80215bc <HAL_UART_MspInit+0x248>)
 80214a6:	4293      	cmp	r3, r2
 80214a8:	d13b      	bne.n	8021522 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80214aa:	2302      	movs	r3, #2
 80214ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80214ae:	2300      	movs	r3, #0
 80214b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80214b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80214b6:	4618      	mov	r0, r3
 80214b8:	f003 fabc 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 80214bc:	4603      	mov	r3, r0
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d001      	beq.n	80214c6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80214c2:	f7ff fd05 	bl	8020ed0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80214c6:	4b3a      	ldr	r3, [pc, #232]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80214ca:	4a39      	ldr	r2, [pc, #228]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80214d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80214d2:	4b37      	ldr	r3, [pc, #220]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80214d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80214da:	617b      	str	r3, [r7, #20]
 80214dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80214de:	4b34      	ldr	r3, [pc, #208]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80214e2:	4a33      	ldr	r2, [pc, #204]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214e4:	f043 0308 	orr.w	r3, r3, #8
 80214e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80214ea:	4b31      	ldr	r3, [pc, #196]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 80214ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80214ee:	f003 0308 	and.w	r3, r3, #8
 80214f2:	613b      	str	r3, [r7, #16]
 80214f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80214f6:	2378      	movs	r3, #120	@ 0x78
 80214f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214fc:	2302      	movs	r3, #2
 80214fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021502:	2300      	movs	r3, #0
 8021504:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021508:	2303      	movs	r3, #3
 802150a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802150e:	2307      	movs	r3, #7
 8021510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021514:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8021518:	4619      	mov	r1, r3
 802151a:	4829      	ldr	r0, [pc, #164]	@ (80215c0 <HAL_UART_MspInit+0x24c>)
 802151c:	f001 fb04 	bl	8022b28 <HAL_GPIO_Init>
}
 8021520:	e040      	b.n	80215a4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	4a27      	ldr	r2, [pc, #156]	@ (80215c4 <HAL_UART_MspInit+0x250>)
 8021528:	4293      	cmp	r3, r2
 802152a:	d13b      	bne.n	80215a4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802152c:	2304      	movs	r3, #4
 802152e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8021530:	2300      	movs	r3, #0
 8021532:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8021534:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021538:	4618      	mov	r0, r3
 802153a:	f003 fa7b 	bl	8024a34 <HAL_RCCEx_PeriphCLKConfig>
 802153e:	4603      	mov	r3, r0
 8021540:	2b00      	cmp	r3, #0
 8021542:	d001      	beq.n	8021548 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8021544:	f7ff fcc4 	bl	8020ed0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8021548:	4b19      	ldr	r3, [pc, #100]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802154c:	4a18      	ldr	r2, [pc, #96]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802154e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021552:	6593      	str	r3, [r2, #88]	@ 0x58
 8021554:	4b16      	ldr	r3, [pc, #88]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021558:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802155c:	60fb      	str	r3, [r7, #12]
 802155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021560:	4b13      	ldr	r3, [pc, #76]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021564:	4a12      	ldr	r2, [pc, #72]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 8021566:	f043 0308 	orr.w	r3, r3, #8
 802156a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802156c:	4b10      	ldr	r3, [pc, #64]	@ (80215b0 <HAL_UART_MspInit+0x23c>)
 802156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021570:	f003 0308 	and.w	r3, r3, #8
 8021574:	60bb      	str	r3, [r7, #8]
 8021576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8021578:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802157c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021580:	2302      	movs	r3, #2
 8021582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021586:	2300      	movs	r3, #0
 8021588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802158c:	2303      	movs	r3, #3
 802158e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8021592:	2307      	movs	r3, #7
 8021594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021598:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 802159c:	4619      	mov	r1, r3
 802159e:	4808      	ldr	r0, [pc, #32]	@ (80215c0 <HAL_UART_MspInit+0x24c>)
 80215a0:	f001 fac2 	bl	8022b28 <HAL_GPIO_Init>
}
 80215a4:	bf00      	nop
 80215a6:	37d0      	adds	r7, #208	@ 0xd0
 80215a8:	46bd      	mov	sp, r7
 80215aa:	bd80      	pop	{r7, pc}
 80215ac:	40004c00 	.word	0x40004c00
 80215b0:	40021000 	.word	0x40021000
 80215b4:	40013800 	.word	0x40013800
 80215b8:	48000400 	.word	0x48000400
 80215bc:	40004400 	.word	0x40004400
 80215c0:	48000c00 	.word	0x48000c00
 80215c4:	40004800 	.word	0x40004800

080215c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80215c8:	b480      	push	{r7}
 80215ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80215cc:	bf00      	nop
 80215ce:	e7fd      	b.n	80215cc <NMI_Handler+0x4>

080215d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80215d0:	b480      	push	{r7}
 80215d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80215d4:	bf00      	nop
 80215d6:	e7fd      	b.n	80215d4 <HardFault_Handler+0x4>

080215d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80215d8:	b480      	push	{r7}
 80215da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80215dc:	bf00      	nop
 80215de:	e7fd      	b.n	80215dc <MemManage_Handler+0x4>

080215e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80215e0:	b480      	push	{r7}
 80215e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80215e4:	bf00      	nop
 80215e6:	e7fd      	b.n	80215e4 <BusFault_Handler+0x4>

080215e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80215e8:	b480      	push	{r7}
 80215ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80215ec:	bf00      	nop
 80215ee:	e7fd      	b.n	80215ec <UsageFault_Handler+0x4>

080215f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80215f0:	b480      	push	{r7}
 80215f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80215f4:	bf00      	nop
 80215f6:	46bd      	mov	sp, r7
 80215f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215fc:	4770      	bx	lr

080215fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80215fe:	b480      	push	{r7}
 8021600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021602:	bf00      	nop
 8021604:	46bd      	mov	sp, r7
 8021606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160a:	4770      	bx	lr

0802160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802160c:	b480      	push	{r7}
 802160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021610:	bf00      	nop
 8021612:	46bd      	mov	sp, r7
 8021614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021618:	4770      	bx	lr

0802161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802161a:	b580      	push	{r7, lr}
 802161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802161e:	f000 f963 	bl	80218e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021622:	bf00      	nop
 8021624:	bd80      	pop	{r7, pc}

08021626 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8021626:	b580      	push	{r7, lr}
 8021628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 802162a:	2020      	movs	r0, #32
 802162c:	f001 fc26 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8021630:	2040      	movs	r0, #64	@ 0x40
 8021632:	f001 fc23 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8021636:	2080      	movs	r0, #128	@ 0x80
 8021638:	f001 fc20 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 802163c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8021640:	f001 fc1c 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8021644:	bf00      	nop
 8021646:	bd80      	pop	{r7, pc}

08021648 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8021648:	b580      	push	{r7, lr}
 802164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 802164c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8021650:	f001 fc14 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8021654:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8021658:	f001 fc10 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 802165c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8021660:	f001 fc0c 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8021664:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8021668:	f001 fc08 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 802166c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8021670:	f001 fc04 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8021674:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021678:	f001 fc00 	bl	8022e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 802167c:	bf00      	nop
 802167e:	bd80      	pop	{r7, pc}

08021680 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021680:	b580      	push	{r7, lr}
 8021682:	b086      	sub	sp, #24
 8021684:	af00      	add	r7, sp, #0
 8021686:	60f8      	str	r0, [r7, #12]
 8021688:	60b9      	str	r1, [r7, #8]
 802168a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802168c:	2300      	movs	r3, #0
 802168e:	617b      	str	r3, [r7, #20]
 8021690:	e00a      	b.n	80216a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021692:	f3af 8000 	nop.w
 8021696:	4601      	mov	r1, r0
 8021698:	68bb      	ldr	r3, [r7, #8]
 802169a:	1c5a      	adds	r2, r3, #1
 802169c:	60ba      	str	r2, [r7, #8]
 802169e:	b2ca      	uxtb	r2, r1
 80216a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216a2:	697b      	ldr	r3, [r7, #20]
 80216a4:	3301      	adds	r3, #1
 80216a6:	617b      	str	r3, [r7, #20]
 80216a8:	697a      	ldr	r2, [r7, #20]
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	429a      	cmp	r2, r3
 80216ae:	dbf0      	blt.n	8021692 <_read+0x12>
  }

  return len;
 80216b0:	687b      	ldr	r3, [r7, #4]
}
 80216b2:	4618      	mov	r0, r3
 80216b4:	3718      	adds	r7, #24
 80216b6:	46bd      	mov	sp, r7
 80216b8:	bd80      	pop	{r7, pc}

080216ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80216ba:	b580      	push	{r7, lr}
 80216bc:	b086      	sub	sp, #24
 80216be:	af00      	add	r7, sp, #0
 80216c0:	60f8      	str	r0, [r7, #12]
 80216c2:	60b9      	str	r1, [r7, #8]
 80216c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216c6:	2300      	movs	r3, #0
 80216c8:	617b      	str	r3, [r7, #20]
 80216ca:	e009      	b.n	80216e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80216cc:	68bb      	ldr	r3, [r7, #8]
 80216ce:	1c5a      	adds	r2, r3, #1
 80216d0:	60ba      	str	r2, [r7, #8]
 80216d2:	781b      	ldrb	r3, [r3, #0]
 80216d4:	4618      	mov	r0, r3
 80216d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80216da:	697b      	ldr	r3, [r7, #20]
 80216dc:	3301      	adds	r3, #1
 80216de:	617b      	str	r3, [r7, #20]
 80216e0:	697a      	ldr	r2, [r7, #20]
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	429a      	cmp	r2, r3
 80216e6:	dbf1      	blt.n	80216cc <_write+0x12>
  }
  return len;
 80216e8:	687b      	ldr	r3, [r7, #4]
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	3718      	adds	r7, #24
 80216ee:	46bd      	mov	sp, r7
 80216f0:	bd80      	pop	{r7, pc}

080216f2 <_close>:

int _close(int file)
{
 80216f2:	b480      	push	{r7}
 80216f4:	b083      	sub	sp, #12
 80216f6:	af00      	add	r7, sp, #0
 80216f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80216fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80216fe:	4618      	mov	r0, r3
 8021700:	370c      	adds	r7, #12
 8021702:	46bd      	mov	sp, r7
 8021704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021708:	4770      	bx	lr

0802170a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802170a:	b480      	push	{r7}
 802170c:	b083      	sub	sp, #12
 802170e:	af00      	add	r7, sp, #0
 8021710:	6078      	str	r0, [r7, #4]
 8021712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021714:	683b      	ldr	r3, [r7, #0]
 8021716:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802171a:	605a      	str	r2, [r3, #4]
  return 0;
 802171c:	2300      	movs	r3, #0
}
 802171e:	4618      	mov	r0, r3
 8021720:	370c      	adds	r7, #12
 8021722:	46bd      	mov	sp, r7
 8021724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021728:	4770      	bx	lr

0802172a <_isatty>:

int _isatty(int file)
{
 802172a:	b480      	push	{r7}
 802172c:	b083      	sub	sp, #12
 802172e:	af00      	add	r7, sp, #0
 8021730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021732:	2301      	movs	r3, #1
}
 8021734:	4618      	mov	r0, r3
 8021736:	370c      	adds	r7, #12
 8021738:	46bd      	mov	sp, r7
 802173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802173e:	4770      	bx	lr

08021740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021740:	b480      	push	{r7}
 8021742:	b085      	sub	sp, #20
 8021744:	af00      	add	r7, sp, #0
 8021746:	60f8      	str	r0, [r7, #12]
 8021748:	60b9      	str	r1, [r7, #8]
 802174a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802174c:	2300      	movs	r3, #0
}
 802174e:	4618      	mov	r0, r3
 8021750:	3714      	adds	r7, #20
 8021752:	46bd      	mov	sp, r7
 8021754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021758:	4770      	bx	lr
	...

0802175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b086      	sub	sp, #24
 8021760:	af00      	add	r7, sp, #0
 8021762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021764:	4a14      	ldr	r2, [pc, #80]	@ (80217b8 <_sbrk+0x5c>)
 8021766:	4b15      	ldr	r3, [pc, #84]	@ (80217bc <_sbrk+0x60>)
 8021768:	1ad3      	subs	r3, r2, r3
 802176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802176c:	697b      	ldr	r3, [r7, #20]
 802176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021770:	4b13      	ldr	r3, [pc, #76]	@ (80217c0 <_sbrk+0x64>)
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	2b00      	cmp	r3, #0
 8021776:	d102      	bne.n	802177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021778:	4b11      	ldr	r3, [pc, #68]	@ (80217c0 <_sbrk+0x64>)
 802177a:	4a12      	ldr	r2, [pc, #72]	@ (80217c4 <_sbrk+0x68>)
 802177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802177e:	4b10      	ldr	r3, [pc, #64]	@ (80217c0 <_sbrk+0x64>)
 8021780:	681a      	ldr	r2, [r3, #0]
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	4413      	add	r3, r2
 8021786:	693a      	ldr	r2, [r7, #16]
 8021788:	429a      	cmp	r2, r3
 802178a:	d207      	bcs.n	802179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 802178c:	f004 fe68 	bl	8026460 <__errno>
 8021790:	4603      	mov	r3, r0
 8021792:	220c      	movs	r2, #12
 8021794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802179a:	e009      	b.n	80217b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802179c:	4b08      	ldr	r3, [pc, #32]	@ (80217c0 <_sbrk+0x64>)
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80217a2:	4b07      	ldr	r3, [pc, #28]	@ (80217c0 <_sbrk+0x64>)
 80217a4:	681a      	ldr	r2, [r3, #0]
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	4413      	add	r3, r2
 80217aa:	4a05      	ldr	r2, [pc, #20]	@ (80217c0 <_sbrk+0x64>)
 80217ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80217ae:	68fb      	ldr	r3, [r7, #12]
}
 80217b0:	4618      	mov	r0, r3
 80217b2:	3718      	adds	r7, #24
 80217b4:	46bd      	mov	sp, r7
 80217b6:	bd80      	pop	{r7, pc}
 80217b8:	200a0000 	.word	0x200a0000
 80217bc:	00000400 	.word	0x00000400
 80217c0:	20000538 	.word	0x20000538
 80217c4:	200006b0 	.word	0x200006b0

080217c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80217c8:	b480      	push	{r7}
 80217ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80217cc:	4b06      	ldr	r3, [pc, #24]	@ (80217e8 <SystemInit+0x20>)
 80217ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80217d2:	4a05      	ldr	r2, [pc, #20]	@ (80217e8 <SystemInit+0x20>)
 80217d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80217d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80217dc:	bf00      	nop
 80217de:	46bd      	mov	sp, r7
 80217e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e4:	4770      	bx	lr
 80217e6:	bf00      	nop
 80217e8:	e000ed00 	.word	0xe000ed00

080217ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80217ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8021824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80217f0:	f7ff ffea 	bl	80217c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80217f4:	480c      	ldr	r0, [pc, #48]	@ (8021828 <LoopForever+0x6>)
  ldr r1, =_edata
 80217f6:	490d      	ldr	r1, [pc, #52]	@ (802182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80217f8:	4a0d      	ldr	r2, [pc, #52]	@ (8021830 <LoopForever+0xe>)
  movs r3, #0
 80217fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80217fc:	e002      	b.n	8021804 <LoopCopyDataInit>

080217fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80217fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021802:	3304      	adds	r3, #4

08021804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021808:	d3f9      	bcc.n	80217fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802180a:	4a0a      	ldr	r2, [pc, #40]	@ (8021834 <LoopForever+0x12>)
  ldr r4, =_ebss
 802180c:	4c0a      	ldr	r4, [pc, #40]	@ (8021838 <LoopForever+0x16>)
  movs r3, #0
 802180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021810:	e001      	b.n	8021816 <LoopFillZerobss>

08021812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021814:	3204      	adds	r2, #4

08021816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021818:	d3fb      	bcc.n	8021812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802181a:	f004 fe27 	bl	802646c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 802181e:	f7fe fddf 	bl	80203e0 <main>

08021822 <LoopForever>:

LoopForever:
    b LoopForever
 8021822:	e7fe      	b.n	8021822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8021824:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8021828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802182c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8021830:	0802721c 	.word	0x0802721c
  ldr r2, =_sbss
 8021834:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8021838:	200006b0 	.word	0x200006b0

0802183c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 802183c:	e7fe      	b.n	802183c <ADC1_IRQHandler>

0802183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802183e:	b580      	push	{r7, lr}
 8021840:	b082      	sub	sp, #8
 8021842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8021844:	2300      	movs	r3, #0
 8021846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021848:	2003      	movs	r0, #3
 802184a:	f001 f81f 	bl	802288c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802184e:	2000      	movs	r0, #0
 8021850:	f000 f80e 	bl	8021870 <HAL_InitTick>
 8021854:	4603      	mov	r3, r0
 8021856:	2b00      	cmp	r3, #0
 8021858:	d002      	beq.n	8021860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 802185a:	2301      	movs	r3, #1
 802185c:	71fb      	strb	r3, [r7, #7]
 802185e:	e001      	b.n	8021864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8021860:	f7ff fb3c 	bl	8020edc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8021864:	79fb      	ldrb	r3, [r7, #7]
}
 8021866:	4618      	mov	r0, r3
 8021868:	3708      	adds	r7, #8
 802186a:	46bd      	mov	sp, r7
 802186c:	bd80      	pop	{r7, pc}
	...

08021870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021870:	b580      	push	{r7, lr}
 8021872:	b084      	sub	sp, #16
 8021874:	af00      	add	r7, sp, #0
 8021876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8021878:	2300      	movs	r3, #0
 802187a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 802187c:	4b17      	ldr	r3, [pc, #92]	@ (80218dc <HAL_InitTick+0x6c>)
 802187e:	781b      	ldrb	r3, [r3, #0]
 8021880:	2b00      	cmp	r3, #0
 8021882:	d023      	beq.n	80218cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8021884:	4b16      	ldr	r3, [pc, #88]	@ (80218e0 <HAL_InitTick+0x70>)
 8021886:	681a      	ldr	r2, [r3, #0]
 8021888:	4b14      	ldr	r3, [pc, #80]	@ (80218dc <HAL_InitTick+0x6c>)
 802188a:	781b      	ldrb	r3, [r3, #0]
 802188c:	4619      	mov	r1, r3
 802188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021892:	fbb3 f3f1 	udiv	r3, r3, r1
 8021896:	fbb2 f3f3 	udiv	r3, r2, r3
 802189a:	4618      	mov	r0, r3
 802189c:	f001 f82b 	bl	80228f6 <HAL_SYSTICK_Config>
 80218a0:	4603      	mov	r3, r0
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	d10f      	bne.n	80218c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	2b0f      	cmp	r3, #15
 80218aa:	d809      	bhi.n	80218c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80218ac:	2200      	movs	r2, #0
 80218ae:	6879      	ldr	r1, [r7, #4]
 80218b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218b4:	f000 fff5 	bl	80228a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80218b8:	4a0a      	ldr	r2, [pc, #40]	@ (80218e4 <HAL_InitTick+0x74>)
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	6013      	str	r3, [r2, #0]
 80218be:	e007      	b.n	80218d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80218c0:	2301      	movs	r3, #1
 80218c2:	73fb      	strb	r3, [r7, #15]
 80218c4:	e004      	b.n	80218d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80218c6:	2301      	movs	r3, #1
 80218c8:	73fb      	strb	r3, [r7, #15]
 80218ca:	e001      	b.n	80218d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80218cc:	2301      	movs	r3, #1
 80218ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80218d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80218d2:	4618      	mov	r0, r3
 80218d4:	3710      	adds	r7, #16
 80218d6:	46bd      	mov	sp, r7
 80218d8:	bd80      	pop	{r7, pc}
 80218da:	bf00      	nop
 80218dc:	20000008 	.word	0x20000008
 80218e0:	20000000 	.word	0x20000000
 80218e4:	20000004 	.word	0x20000004

080218e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80218e8:	b480      	push	{r7}
 80218ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80218ec:	4b06      	ldr	r3, [pc, #24]	@ (8021908 <HAL_IncTick+0x20>)
 80218ee:	781b      	ldrb	r3, [r3, #0]
 80218f0:	461a      	mov	r2, r3
 80218f2:	4b06      	ldr	r3, [pc, #24]	@ (802190c <HAL_IncTick+0x24>)
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	4413      	add	r3, r2
 80218f8:	4a04      	ldr	r2, [pc, #16]	@ (802190c <HAL_IncTick+0x24>)
 80218fa:	6013      	str	r3, [r2, #0]
}
 80218fc:	bf00      	nop
 80218fe:	46bd      	mov	sp, r7
 8021900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021904:	4770      	bx	lr
 8021906:	bf00      	nop
 8021908:	20000008 	.word	0x20000008
 802190c:	2000053c 	.word	0x2000053c

08021910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021910:	b480      	push	{r7}
 8021912:	af00      	add	r7, sp, #0
  return uwTick;
 8021914:	4b03      	ldr	r3, [pc, #12]	@ (8021924 <HAL_GetTick+0x14>)
 8021916:	681b      	ldr	r3, [r3, #0]
}
 8021918:	4618      	mov	r0, r3
 802191a:	46bd      	mov	sp, r7
 802191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021920:	4770      	bx	lr
 8021922:	bf00      	nop
 8021924:	2000053c 	.word	0x2000053c

08021928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8021928:	b480      	push	{r7}
 802192a:	b083      	sub	sp, #12
 802192c:	af00      	add	r7, sp, #0
 802192e:	6078      	str	r0, [r7, #4]
 8021930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	689b      	ldr	r3, [r3, #8]
 8021936:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 802193a:	683b      	ldr	r3, [r7, #0]
 802193c:	431a      	orrs	r2, r3
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	609a      	str	r2, [r3, #8]
}
 8021942:	bf00      	nop
 8021944:	370c      	adds	r7, #12
 8021946:	46bd      	mov	sp, r7
 8021948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802194c:	4770      	bx	lr

0802194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 802194e:	b480      	push	{r7}
 8021950:	b083      	sub	sp, #12
 8021952:	af00      	add	r7, sp, #0
 8021954:	6078      	str	r0, [r7, #4]
 8021956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	689b      	ldr	r3, [r3, #8]
 802195c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8021960:	683b      	ldr	r3, [r7, #0]
 8021962:	431a      	orrs	r2, r3
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	609a      	str	r2, [r3, #8]
}
 8021968:	bf00      	nop
 802196a:	370c      	adds	r7, #12
 802196c:	46bd      	mov	sp, r7
 802196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021972:	4770      	bx	lr

08021974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8021974:	b480      	push	{r7}
 8021976:	b083      	sub	sp, #12
 8021978:	af00      	add	r7, sp, #0
 802197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	689b      	ldr	r3, [r3, #8]
 8021980:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8021984:	4618      	mov	r0, r3
 8021986:	370c      	adds	r7, #12
 8021988:	46bd      	mov	sp, r7
 802198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802198e:	4770      	bx	lr

08021990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8021990:	b480      	push	{r7}
 8021992:	b087      	sub	sp, #28
 8021994:	af00      	add	r7, sp, #0
 8021996:	60f8      	str	r0, [r7, #12]
 8021998:	60b9      	str	r1, [r7, #8]
 802199a:	607a      	str	r2, [r7, #4]
 802199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	3360      	adds	r3, #96	@ 0x60
 80219a2:	461a      	mov	r2, r3
 80219a4:	68bb      	ldr	r3, [r7, #8]
 80219a6:	009b      	lsls	r3, r3, #2
 80219a8:	4413      	add	r3, r2
 80219aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80219ac:	697b      	ldr	r3, [r7, #20]
 80219ae:	681a      	ldr	r2, [r3, #0]
 80219b0:	4b08      	ldr	r3, [pc, #32]	@ (80219d4 <LL_ADC_SetOffset+0x44>)
 80219b2:	4013      	ands	r3, r2
 80219b4:	687a      	ldr	r2, [r7, #4]
 80219b6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80219ba:	683a      	ldr	r2, [r7, #0]
 80219bc:	430a      	orrs	r2, r1
 80219be:	4313      	orrs	r3, r2
 80219c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80219c4:	697b      	ldr	r3, [r7, #20]
 80219c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80219c8:	bf00      	nop
 80219ca:	371c      	adds	r7, #28
 80219cc:	46bd      	mov	sp, r7
 80219ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d2:	4770      	bx	lr
 80219d4:	03fff000 	.word	0x03fff000

080219d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80219d8:	b480      	push	{r7}
 80219da:	b085      	sub	sp, #20
 80219dc:	af00      	add	r7, sp, #0
 80219de:	6078      	str	r0, [r7, #4]
 80219e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	3360      	adds	r3, #96	@ 0x60
 80219e6:	461a      	mov	r2, r3
 80219e8:	683b      	ldr	r3, [r7, #0]
 80219ea:	009b      	lsls	r3, r3, #2
 80219ec:	4413      	add	r3, r2
 80219ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80219f8:	4618      	mov	r0, r3
 80219fa:	3714      	adds	r7, #20
 80219fc:	46bd      	mov	sp, r7
 80219fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a02:	4770      	bx	lr

08021a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8021a04:	b480      	push	{r7}
 8021a06:	b087      	sub	sp, #28
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	60f8      	str	r0, [r7, #12]
 8021a0c:	60b9      	str	r1, [r7, #8]
 8021a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8021a10:	68fb      	ldr	r3, [r7, #12]
 8021a12:	3360      	adds	r3, #96	@ 0x60
 8021a14:	461a      	mov	r2, r3
 8021a16:	68bb      	ldr	r3, [r7, #8]
 8021a18:	009b      	lsls	r3, r3, #2
 8021a1a:	4413      	add	r3, r2
 8021a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8021a1e:	697b      	ldr	r3, [r7, #20]
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	431a      	orrs	r2, r3
 8021a2a:	697b      	ldr	r3, [r7, #20]
 8021a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8021a2e:	bf00      	nop
 8021a30:	371c      	adds	r7, #28
 8021a32:	46bd      	mov	sp, r7
 8021a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a38:	4770      	bx	lr

08021a3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8021a3a:	b480      	push	{r7}
 8021a3c:	b083      	sub	sp, #12
 8021a3e:	af00      	add	r7, sp, #0
 8021a40:	6078      	str	r0, [r7, #4]
 8021a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	695b      	ldr	r3, [r3, #20]
 8021a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8021a4c:	683b      	ldr	r3, [r7, #0]
 8021a4e:	431a      	orrs	r2, r3
 8021a50:	687b      	ldr	r3, [r7, #4]
 8021a52:	615a      	str	r2, [r3, #20]
}
 8021a54:	bf00      	nop
 8021a56:	370c      	adds	r7, #12
 8021a58:	46bd      	mov	sp, r7
 8021a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5e:	4770      	bx	lr

08021a60 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8021a60:	b480      	push	{r7}
 8021a62:	b087      	sub	sp, #28
 8021a64:	af00      	add	r7, sp, #0
 8021a66:	60f8      	str	r0, [r7, #12]
 8021a68:	60b9      	str	r1, [r7, #8]
 8021a6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8021a6c:	68fb      	ldr	r3, [r7, #12]
 8021a6e:	3330      	adds	r3, #48	@ 0x30
 8021a70:	461a      	mov	r2, r3
 8021a72:	68bb      	ldr	r3, [r7, #8]
 8021a74:	0a1b      	lsrs	r3, r3, #8
 8021a76:	009b      	lsls	r3, r3, #2
 8021a78:	f003 030c 	and.w	r3, r3, #12
 8021a7c:	4413      	add	r3, r2
 8021a7e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8021a80:	697b      	ldr	r3, [r7, #20]
 8021a82:	681a      	ldr	r2, [r3, #0]
 8021a84:	68bb      	ldr	r3, [r7, #8]
 8021a86:	f003 031f 	and.w	r3, r3, #31
 8021a8a:	211f      	movs	r1, #31
 8021a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8021a90:	43db      	mvns	r3, r3
 8021a92:	401a      	ands	r2, r3
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	0e9b      	lsrs	r3, r3, #26
 8021a98:	f003 011f 	and.w	r1, r3, #31
 8021a9c:	68bb      	ldr	r3, [r7, #8]
 8021a9e:	f003 031f 	and.w	r3, r3, #31
 8021aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8021aa6:	431a      	orrs	r2, r3
 8021aa8:	697b      	ldr	r3, [r7, #20]
 8021aaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8021aac:	bf00      	nop
 8021aae:	371c      	adds	r7, #28
 8021ab0:	46bd      	mov	sp, r7
 8021ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab6:	4770      	bx	lr

08021ab8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8021ab8:	b480      	push	{r7}
 8021aba:	b087      	sub	sp, #28
 8021abc:	af00      	add	r7, sp, #0
 8021abe:	60f8      	str	r0, [r7, #12]
 8021ac0:	60b9      	str	r1, [r7, #8]
 8021ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8021ac4:	68fb      	ldr	r3, [r7, #12]
 8021ac6:	3314      	adds	r3, #20
 8021ac8:	461a      	mov	r2, r3
 8021aca:	68bb      	ldr	r3, [r7, #8]
 8021acc:	0e5b      	lsrs	r3, r3, #25
 8021ace:	009b      	lsls	r3, r3, #2
 8021ad0:	f003 0304 	and.w	r3, r3, #4
 8021ad4:	4413      	add	r3, r2
 8021ad6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8021ad8:	697b      	ldr	r3, [r7, #20]
 8021ada:	681a      	ldr	r2, [r3, #0]
 8021adc:	68bb      	ldr	r3, [r7, #8]
 8021ade:	0d1b      	lsrs	r3, r3, #20
 8021ae0:	f003 031f 	and.w	r3, r3, #31
 8021ae4:	2107      	movs	r1, #7
 8021ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8021aea:	43db      	mvns	r3, r3
 8021aec:	401a      	ands	r2, r3
 8021aee:	68bb      	ldr	r3, [r7, #8]
 8021af0:	0d1b      	lsrs	r3, r3, #20
 8021af2:	f003 031f 	and.w	r3, r3, #31
 8021af6:	6879      	ldr	r1, [r7, #4]
 8021af8:	fa01 f303 	lsl.w	r3, r1, r3
 8021afc:	431a      	orrs	r2, r3
 8021afe:	697b      	ldr	r3, [r7, #20]
 8021b00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8021b02:	bf00      	nop
 8021b04:	371c      	adds	r7, #28
 8021b06:	46bd      	mov	sp, r7
 8021b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b0c:	4770      	bx	lr
	...

08021b10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8021b10:	b480      	push	{r7}
 8021b12:	b085      	sub	sp, #20
 8021b14:	af00      	add	r7, sp, #0
 8021b16:	60f8      	str	r0, [r7, #12]
 8021b18:	60b9      	str	r1, [r7, #8]
 8021b1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8021b22:	68bb      	ldr	r3, [r7, #8]
 8021b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8021b28:	43db      	mvns	r3, r3
 8021b2a:	401a      	ands	r2, r3
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	f003 0318 	and.w	r3, r3, #24
 8021b32:	4908      	ldr	r1, [pc, #32]	@ (8021b54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8021b34:	40d9      	lsrs	r1, r3
 8021b36:	68bb      	ldr	r3, [r7, #8]
 8021b38:	400b      	ands	r3, r1
 8021b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8021b3e:	431a      	orrs	r2, r3
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8021b46:	bf00      	nop
 8021b48:	3714      	adds	r7, #20
 8021b4a:	46bd      	mov	sp, r7
 8021b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b50:	4770      	bx	lr
 8021b52:	bf00      	nop
 8021b54:	0007ffff 	.word	0x0007ffff

08021b58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8021b58:	b480      	push	{r7}
 8021b5a:	b083      	sub	sp, #12
 8021b5c:	af00      	add	r7, sp, #0
 8021b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	689b      	ldr	r3, [r3, #8]
 8021b64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8021b68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8021b6c:	687a      	ldr	r2, [r7, #4]
 8021b6e:	6093      	str	r3, [r2, #8]
}
 8021b70:	bf00      	nop
 8021b72:	370c      	adds	r7, #12
 8021b74:	46bd      	mov	sp, r7
 8021b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b7a:	4770      	bx	lr

08021b7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8021b7c:	b480      	push	{r7}
 8021b7e:	b083      	sub	sp, #12
 8021b80:	af00      	add	r7, sp, #0
 8021b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	689b      	ldr	r3, [r3, #8]
 8021b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021b90:	d101      	bne.n	8021b96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8021b92:	2301      	movs	r3, #1
 8021b94:	e000      	b.n	8021b98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8021b96:	2300      	movs	r3, #0
}
 8021b98:	4618      	mov	r0, r3
 8021b9a:	370c      	adds	r7, #12
 8021b9c:	46bd      	mov	sp, r7
 8021b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba2:	4770      	bx	lr

08021ba4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8021ba4:	b480      	push	{r7}
 8021ba6:	b083      	sub	sp, #12
 8021ba8:	af00      	add	r7, sp, #0
 8021baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	689b      	ldr	r3, [r3, #8]
 8021bb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8021bb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8021bb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8021bc0:	bf00      	nop
 8021bc2:	370c      	adds	r7, #12
 8021bc4:	46bd      	mov	sp, r7
 8021bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bca:	4770      	bx	lr

08021bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8021bcc:	b480      	push	{r7}
 8021bce:	b083      	sub	sp, #12
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	689b      	ldr	r3, [r3, #8]
 8021bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021be0:	d101      	bne.n	8021be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8021be2:	2301      	movs	r3, #1
 8021be4:	e000      	b.n	8021be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8021be6:	2300      	movs	r3, #0
}
 8021be8:	4618      	mov	r0, r3
 8021bea:	370c      	adds	r7, #12
 8021bec:	46bd      	mov	sp, r7
 8021bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bf2:	4770      	bx	lr

08021bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8021bf4:	b480      	push	{r7}
 8021bf6:	b083      	sub	sp, #12
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	689b      	ldr	r3, [r3, #8]
 8021c00:	f003 0301 	and.w	r3, r3, #1
 8021c04:	2b01      	cmp	r3, #1
 8021c06:	d101      	bne.n	8021c0c <LL_ADC_IsEnabled+0x18>
 8021c08:	2301      	movs	r3, #1
 8021c0a:	e000      	b.n	8021c0e <LL_ADC_IsEnabled+0x1a>
 8021c0c:	2300      	movs	r3, #0
}
 8021c0e:	4618      	mov	r0, r3
 8021c10:	370c      	adds	r7, #12
 8021c12:	46bd      	mov	sp, r7
 8021c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c18:	4770      	bx	lr

08021c1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8021c1a:	b480      	push	{r7}
 8021c1c:	b083      	sub	sp, #12
 8021c1e:	af00      	add	r7, sp, #0
 8021c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	689b      	ldr	r3, [r3, #8]
 8021c26:	f003 0304 	and.w	r3, r3, #4
 8021c2a:	2b04      	cmp	r3, #4
 8021c2c:	d101      	bne.n	8021c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8021c2e:	2301      	movs	r3, #1
 8021c30:	e000      	b.n	8021c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8021c32:	2300      	movs	r3, #0
}
 8021c34:	4618      	mov	r0, r3
 8021c36:	370c      	adds	r7, #12
 8021c38:	46bd      	mov	sp, r7
 8021c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c3e:	4770      	bx	lr

08021c40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8021c40:	b480      	push	{r7}
 8021c42:	b083      	sub	sp, #12
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	689b      	ldr	r3, [r3, #8]
 8021c4c:	f003 0308 	and.w	r3, r3, #8
 8021c50:	2b08      	cmp	r3, #8
 8021c52:	d101      	bne.n	8021c58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8021c54:	2301      	movs	r3, #1
 8021c56:	e000      	b.n	8021c5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8021c58:	2300      	movs	r3, #0
}
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	370c      	adds	r7, #12
 8021c5e:	46bd      	mov	sp, r7
 8021c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c64:	4770      	bx	lr
	...

08021c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8021c68:	b580      	push	{r7, lr}
 8021c6a:	b088      	sub	sp, #32
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8021c70:	2300      	movs	r3, #0
 8021c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8021c74:	2300      	movs	r3, #0
 8021c76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	d101      	bne.n	8021c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8021c7e:	2301      	movs	r3, #1
 8021c80:	e129      	b.n	8021ed6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	691b      	ldr	r3, [r3, #16]
 8021c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d109      	bne.n	8021ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8021c90:	6878      	ldr	r0, [r7, #4]
 8021c92:	f7ff f947 	bl	8020f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	2200      	movs	r2, #0
 8021c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	681b      	ldr	r3, [r3, #0]
 8021ca8:	4618      	mov	r0, r3
 8021caa:	f7ff ff67 	bl	8021b7c <LL_ADC_IsDeepPowerDownEnabled>
 8021cae:	4603      	mov	r3, r0
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d004      	beq.n	8021cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	4618      	mov	r0, r3
 8021cba:	f7ff ff4d 	bl	8021b58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8021cbe:	687b      	ldr	r3, [r7, #4]
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	f7ff ff82 	bl	8021bcc <LL_ADC_IsInternalRegulatorEnabled>
 8021cc8:	4603      	mov	r3, r0
 8021cca:	2b00      	cmp	r3, #0
 8021ccc:	d115      	bne.n	8021cfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f7ff ff66 	bl	8021ba4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8021cd8:	4b81      	ldr	r3, [pc, #516]	@ (8021ee0 <HAL_ADC_Init+0x278>)
 8021cda:	681b      	ldr	r3, [r3, #0]
 8021cdc:	099b      	lsrs	r3, r3, #6
 8021cde:	4a81      	ldr	r2, [pc, #516]	@ (8021ee4 <HAL_ADC_Init+0x27c>)
 8021ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8021ce4:	099b      	lsrs	r3, r3, #6
 8021ce6:	3301      	adds	r3, #1
 8021ce8:	005b      	lsls	r3, r3, #1
 8021cea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8021cec:	e002      	b.n	8021cf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8021cee:	68fb      	ldr	r3, [r7, #12]
 8021cf0:	3b01      	subs	r3, #1
 8021cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d1f9      	bne.n	8021cee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	4618      	mov	r0, r3
 8021d00:	f7ff ff64 	bl	8021bcc <LL_ADC_IsInternalRegulatorEnabled>
 8021d04:	4603      	mov	r3, r0
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d10d      	bne.n	8021d26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8021d0a:	687b      	ldr	r3, [r7, #4]
 8021d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021d0e:	f043 0210 	orr.w	r2, r3, #16
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8021d1a:	f043 0201 	orr.w	r2, r3, #1
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8021d22:	2301      	movs	r3, #1
 8021d24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	681b      	ldr	r3, [r3, #0]
 8021d2a:	4618      	mov	r0, r3
 8021d2c:	f7ff ff75 	bl	8021c1a <LL_ADC_REG_IsConversionOngoing>
 8021d30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8021d32:	687b      	ldr	r3, [r7, #4]
 8021d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021d36:	f003 0310 	and.w	r3, r3, #16
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	f040 80c2 	bne.w	8021ec4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8021d40:	697b      	ldr	r3, [r7, #20]
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	f040 80be 	bne.w	8021ec4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021d4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8021d50:	f043 0202 	orr.w	r2, r3, #2
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	681b      	ldr	r3, [r3, #0]
 8021d5c:	4618      	mov	r0, r3
 8021d5e:	f7ff ff49 	bl	8021bf4 <LL_ADC_IsEnabled>
 8021d62:	4603      	mov	r3, r0
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d10b      	bne.n	8021d80 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8021d68:	485f      	ldr	r0, [pc, #380]	@ (8021ee8 <HAL_ADC_Init+0x280>)
 8021d6a:	f7ff ff43 	bl	8021bf4 <LL_ADC_IsEnabled>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d105      	bne.n	8021d80 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	685b      	ldr	r3, [r3, #4]
 8021d78:	4619      	mov	r1, r3
 8021d7a:	485c      	ldr	r0, [pc, #368]	@ (8021eec <HAL_ADC_Init+0x284>)
 8021d7c:	f7ff fdd4 	bl	8021928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	7e5b      	ldrb	r3, [r3, #25]
 8021d84:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8021d8a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8021d90:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8021d96:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8021d9e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8021da0:	4313      	orrs	r3, r2
 8021da2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8021daa:	2b01      	cmp	r3, #1
 8021dac:	d106      	bne.n	8021dbc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021db2:	3b01      	subs	r3, #1
 8021db4:	045b      	lsls	r3, r3, #17
 8021db6:	69ba      	ldr	r2, [r7, #24]
 8021db8:	4313      	orrs	r3, r2
 8021dba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d009      	beq.n	8021dd8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021dc8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021dd0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8021dd2:	69ba      	ldr	r2, [r7, #24]
 8021dd4:	4313      	orrs	r3, r2
 8021dd6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	681b      	ldr	r3, [r3, #0]
 8021ddc:	68da      	ldr	r2, [r3, #12]
 8021dde:	4b44      	ldr	r3, [pc, #272]	@ (8021ef0 <HAL_ADC_Init+0x288>)
 8021de0:	4013      	ands	r3, r2
 8021de2:	687a      	ldr	r2, [r7, #4]
 8021de4:	6812      	ldr	r2, [r2, #0]
 8021de6:	69b9      	ldr	r1, [r7, #24]
 8021de8:	430b      	orrs	r3, r1
 8021dea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	4618      	mov	r0, r3
 8021df2:	f7ff ff25 	bl	8021c40 <LL_ADC_INJ_IsConversionOngoing>
 8021df6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8021df8:	697b      	ldr	r3, [r7, #20]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d140      	bne.n	8021e80 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8021dfe:	693b      	ldr	r3, [r7, #16]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d13d      	bne.n	8021e80 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	7e1b      	ldrb	r3, [r3, #24]
 8021e0c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8021e0e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8021e16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8021e18:	4313      	orrs	r3, r2
 8021e1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	681b      	ldr	r3, [r3, #0]
 8021e20:	68db      	ldr	r3, [r3, #12]
 8021e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8021e26:	f023 0306 	bic.w	r3, r3, #6
 8021e2a:	687a      	ldr	r2, [r7, #4]
 8021e2c:	6812      	ldr	r2, [r2, #0]
 8021e2e:	69b9      	ldr	r1, [r7, #24]
 8021e30:	430b      	orrs	r3, r1
 8021e32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8021e3a:	2b01      	cmp	r3, #1
 8021e3c:	d118      	bne.n	8021e70 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	691b      	ldr	r3, [r3, #16]
 8021e44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8021e48:	f023 0304 	bic.w	r3, r3, #4
 8021e4c:	687a      	ldr	r2, [r7, #4]
 8021e4e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8021e50:	687a      	ldr	r2, [r7, #4]
 8021e52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8021e54:	4311      	orrs	r1, r2
 8021e56:	687a      	ldr	r2, [r7, #4]
 8021e58:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8021e5a:	4311      	orrs	r1, r2
 8021e5c:	687a      	ldr	r2, [r7, #4]
 8021e5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8021e60:	430a      	orrs	r2, r1
 8021e62:	431a      	orrs	r2, r3
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	681b      	ldr	r3, [r3, #0]
 8021e68:	f042 0201 	orr.w	r2, r2, #1
 8021e6c:	611a      	str	r2, [r3, #16]
 8021e6e:	e007      	b.n	8021e80 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	681b      	ldr	r3, [r3, #0]
 8021e74:	691a      	ldr	r2, [r3, #16]
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	f022 0201 	bic.w	r2, r2, #1
 8021e7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	691b      	ldr	r3, [r3, #16]
 8021e84:	2b01      	cmp	r3, #1
 8021e86:	d10c      	bne.n	8021ea2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e8e:	f023 010f 	bic.w	r1, r3, #15
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	69db      	ldr	r3, [r3, #28]
 8021e96:	1e5a      	subs	r2, r3, #1
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	430a      	orrs	r2, r1
 8021e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8021ea0:	e007      	b.n	8021eb2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	f022 020f 	bic.w	r2, r2, #15
 8021eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021eb6:	f023 0303 	bic.w	r3, r3, #3
 8021eba:	f043 0201 	orr.w	r2, r3, #1
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8021ec2:	e007      	b.n	8021ed4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021ec8:	f043 0210 	orr.w	r2, r3, #16
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8021ed0:	2301      	movs	r3, #1
 8021ed2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8021ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8021ed6:	4618      	mov	r0, r3
 8021ed8:	3720      	adds	r7, #32
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bd80      	pop	{r7, pc}
 8021ede:	bf00      	nop
 8021ee0:	20000000 	.word	0x20000000
 8021ee4:	053e2d63 	.word	0x053e2d63
 8021ee8:	50040000 	.word	0x50040000
 8021eec:	50040300 	.word	0x50040300
 8021ef0:	fff0c007 	.word	0xfff0c007

08021ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b0b6      	sub	sp, #216	@ 0xd8
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	6078      	str	r0, [r7, #4]
 8021efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8021efe:	2300      	movs	r3, #0
 8021f00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8021f04:	2300      	movs	r3, #0
 8021f06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8021f0e:	2b01      	cmp	r3, #1
 8021f10:	d101      	bne.n	8021f16 <HAL_ADC_ConfigChannel+0x22>
 8021f12:	2302      	movs	r3, #2
 8021f14:	e3d5      	b.n	80226c2 <HAL_ADC_ConfigChannel+0x7ce>
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	2201      	movs	r2, #1
 8021f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	4618      	mov	r0, r3
 8021f24:	f7ff fe79 	bl	8021c1a <LL_ADC_REG_IsConversionOngoing>
 8021f28:	4603      	mov	r3, r0
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	f040 83ba 	bne.w	80226a4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8021f30:	683b      	ldr	r3, [r7, #0]
 8021f32:	685b      	ldr	r3, [r3, #4]
 8021f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8021f38:	683b      	ldr	r3, [r7, #0]
 8021f3a:	685b      	ldr	r3, [r3, #4]
 8021f3c:	2b05      	cmp	r3, #5
 8021f3e:	d824      	bhi.n	8021f8a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8021f40:	683b      	ldr	r3, [r7, #0]
 8021f42:	685b      	ldr	r3, [r3, #4]
 8021f44:	3b02      	subs	r3, #2
 8021f46:	2b03      	cmp	r3, #3
 8021f48:	d81b      	bhi.n	8021f82 <HAL_ADC_ConfigChannel+0x8e>
 8021f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8021f50 <HAL_ADC_ConfigChannel+0x5c>)
 8021f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f50:	08021f61 	.word	0x08021f61
 8021f54:	08021f69 	.word	0x08021f69
 8021f58:	08021f71 	.word	0x08021f71
 8021f5c:	08021f79 	.word	0x08021f79
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8021f60:	230c      	movs	r3, #12
 8021f62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8021f66:	e010      	b.n	8021f8a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8021f68:	2312      	movs	r3, #18
 8021f6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8021f6e:	e00c      	b.n	8021f8a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8021f70:	2318      	movs	r3, #24
 8021f72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8021f76:	e008      	b.n	8021f8a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8021f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8021f80:	e003      	b.n	8021f8a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8021f82:	2306      	movs	r3, #6
 8021f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8021f88:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	6818      	ldr	r0, [r3, #0]
 8021f8e:	683b      	ldr	r3, [r7, #0]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	461a      	mov	r2, r3
 8021f94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8021f98:	f7ff fd62 	bl	8021a60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	4618      	mov	r0, r3
 8021fa2:	f7ff fe3a 	bl	8021c1a <LL_ADC_REG_IsConversionOngoing>
 8021fa6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	4618      	mov	r0, r3
 8021fb0:	f7ff fe46 	bl	8021c40 <LL_ADC_INJ_IsConversionOngoing>
 8021fb4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8021fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	f040 81bf 	bne.w	8022340 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8021fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	f040 81ba 	bne.w	8022340 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8021fcc:	683b      	ldr	r3, [r7, #0]
 8021fce:	689b      	ldr	r3, [r3, #8]
 8021fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8021fd4:	d10f      	bne.n	8021ff6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	6818      	ldr	r0, [r3, #0]
 8021fda:	683b      	ldr	r3, [r7, #0]
 8021fdc:	681b      	ldr	r3, [r3, #0]
 8021fde:	2200      	movs	r2, #0
 8021fe0:	4619      	mov	r1, r3
 8021fe2:	f7ff fd69 	bl	8021ab8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	681b      	ldr	r3, [r3, #0]
 8021fea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8021fee:	4618      	mov	r0, r3
 8021ff0:	f7ff fd23 	bl	8021a3a <LL_ADC_SetSamplingTimeCommonConfig>
 8021ff4:	e00e      	b.n	8022014 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	6818      	ldr	r0, [r3, #0]
 8021ffa:	683b      	ldr	r3, [r7, #0]
 8021ffc:	6819      	ldr	r1, [r3, #0]
 8021ffe:	683b      	ldr	r3, [r7, #0]
 8022000:	689b      	ldr	r3, [r3, #8]
 8022002:	461a      	mov	r2, r3
 8022004:	f7ff fd58 	bl	8021ab8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	2100      	movs	r1, #0
 802200e:	4618      	mov	r0, r3
 8022010:	f7ff fd13 	bl	8021a3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8022014:	683b      	ldr	r3, [r7, #0]
 8022016:	695a      	ldr	r2, [r3, #20]
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	68db      	ldr	r3, [r3, #12]
 802201e:	08db      	lsrs	r3, r3, #3
 8022020:	f003 0303 	and.w	r3, r3, #3
 8022024:	005b      	lsls	r3, r3, #1
 8022026:	fa02 f303 	lsl.w	r3, r2, r3
 802202a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 802202e:	683b      	ldr	r3, [r7, #0]
 8022030:	691b      	ldr	r3, [r3, #16]
 8022032:	2b04      	cmp	r3, #4
 8022034:	d00a      	beq.n	802204c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	6818      	ldr	r0, [r3, #0]
 802203a:	683b      	ldr	r3, [r7, #0]
 802203c:	6919      	ldr	r1, [r3, #16]
 802203e:	683b      	ldr	r3, [r7, #0]
 8022040:	681a      	ldr	r2, [r3, #0]
 8022042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8022046:	f7ff fca3 	bl	8021990 <LL_ADC_SetOffset>
 802204a:	e179      	b.n	8022340 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	2100      	movs	r1, #0
 8022052:	4618      	mov	r0, r3
 8022054:	f7ff fcc0 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 8022058:	4603      	mov	r3, r0
 802205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802205e:	2b00      	cmp	r3, #0
 8022060:	d10a      	bne.n	8022078 <HAL_ADC_ConfigChannel+0x184>
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	681b      	ldr	r3, [r3, #0]
 8022066:	2100      	movs	r1, #0
 8022068:	4618      	mov	r0, r3
 802206a:	f7ff fcb5 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 802206e:	4603      	mov	r3, r0
 8022070:	0e9b      	lsrs	r3, r3, #26
 8022072:	f003 021f 	and.w	r2, r3, #31
 8022076:	e01e      	b.n	80220b6 <HAL_ADC_ConfigChannel+0x1c2>
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	2100      	movs	r1, #0
 802207e:	4618      	mov	r0, r3
 8022080:	f7ff fcaa 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 8022084:	4603      	mov	r3, r0
 8022086:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802208a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802208e:	fa93 f3a3 	rbit	r3, r3
 8022092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8022096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802209a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 802209e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d101      	bne.n	80220aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80220a6:	2320      	movs	r3, #32
 80220a8:	e004      	b.n	80220b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80220aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80220ae:	fab3 f383 	clz	r3, r3
 80220b2:	b2db      	uxtb	r3, r3
 80220b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80220b6:	683b      	ldr	r3, [r7, #0]
 80220b8:	681b      	ldr	r3, [r3, #0]
 80220ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d105      	bne.n	80220ce <HAL_ADC_ConfigChannel+0x1da>
 80220c2:	683b      	ldr	r3, [r7, #0]
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	0e9b      	lsrs	r3, r3, #26
 80220c8:	f003 031f 	and.w	r3, r3, #31
 80220cc:	e018      	b.n	8022100 <HAL_ADC_ConfigChannel+0x20c>
 80220ce:	683b      	ldr	r3, [r7, #0]
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80220d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80220da:	fa93 f3a3 	rbit	r3, r3
 80220de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80220e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80220e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80220ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	d101      	bne.n	80220f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80220f2:	2320      	movs	r3, #32
 80220f4:	e004      	b.n	8022100 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80220f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80220fa:	fab3 f383 	clz	r3, r3
 80220fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8022100:	429a      	cmp	r2, r3
 8022102:	d106      	bne.n	8022112 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	681b      	ldr	r3, [r3, #0]
 8022108:	2200      	movs	r2, #0
 802210a:	2100      	movs	r1, #0
 802210c:	4618      	mov	r0, r3
 802210e:	f7ff fc79 	bl	8021a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8022112:	687b      	ldr	r3, [r7, #4]
 8022114:	681b      	ldr	r3, [r3, #0]
 8022116:	2101      	movs	r1, #1
 8022118:	4618      	mov	r0, r3
 802211a:	f7ff fc5d 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 802211e:	4603      	mov	r3, r0
 8022120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022124:	2b00      	cmp	r3, #0
 8022126:	d10a      	bne.n	802213e <HAL_ADC_ConfigChannel+0x24a>
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	681b      	ldr	r3, [r3, #0]
 802212c:	2101      	movs	r1, #1
 802212e:	4618      	mov	r0, r3
 8022130:	f7ff fc52 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 8022134:	4603      	mov	r3, r0
 8022136:	0e9b      	lsrs	r3, r3, #26
 8022138:	f003 021f 	and.w	r2, r3, #31
 802213c:	e01e      	b.n	802217c <HAL_ADC_ConfigChannel+0x288>
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	2101      	movs	r1, #1
 8022144:	4618      	mov	r0, r3
 8022146:	f7ff fc47 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 802214a:	4603      	mov	r3, r0
 802214c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8022154:	fa93 f3a3 	rbit	r3, r3
 8022158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 802215c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8022160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8022164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8022168:	2b00      	cmp	r3, #0
 802216a:	d101      	bne.n	8022170 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 802216c:	2320      	movs	r3, #32
 802216e:	e004      	b.n	802217a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8022170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8022174:	fab3 f383 	clz	r3, r3
 8022178:	b2db      	uxtb	r3, r3
 802217a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 802217c:	683b      	ldr	r3, [r7, #0]
 802217e:	681b      	ldr	r3, [r3, #0]
 8022180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022184:	2b00      	cmp	r3, #0
 8022186:	d105      	bne.n	8022194 <HAL_ADC_ConfigChannel+0x2a0>
 8022188:	683b      	ldr	r3, [r7, #0]
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	0e9b      	lsrs	r3, r3, #26
 802218e:	f003 031f 	and.w	r3, r3, #31
 8022192:	e018      	b.n	80221c6 <HAL_ADC_ConfigChannel+0x2d2>
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802219c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80221a0:	fa93 f3a3 	rbit	r3, r3
 80221a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80221a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80221ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80221b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d101      	bne.n	80221bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80221b8:	2320      	movs	r3, #32
 80221ba:	e004      	b.n	80221c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80221bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80221c0:	fab3 f383 	clz	r3, r3
 80221c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80221c6:	429a      	cmp	r2, r3
 80221c8:	d106      	bne.n	80221d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	2200      	movs	r2, #0
 80221d0:	2101      	movs	r1, #1
 80221d2:	4618      	mov	r0, r3
 80221d4:	f7ff fc16 	bl	8021a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	681b      	ldr	r3, [r3, #0]
 80221dc:	2102      	movs	r1, #2
 80221de:	4618      	mov	r0, r3
 80221e0:	f7ff fbfa 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 80221e4:	4603      	mov	r3, r0
 80221e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d10a      	bne.n	8022204 <HAL_ADC_ConfigChannel+0x310>
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	2102      	movs	r1, #2
 80221f4:	4618      	mov	r0, r3
 80221f6:	f7ff fbef 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 80221fa:	4603      	mov	r3, r0
 80221fc:	0e9b      	lsrs	r3, r3, #26
 80221fe:	f003 021f 	and.w	r2, r3, #31
 8022202:	e01e      	b.n	8022242 <HAL_ADC_ConfigChannel+0x34e>
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	2102      	movs	r1, #2
 802220a:	4618      	mov	r0, r3
 802220c:	f7ff fbe4 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 8022210:	4603      	mov	r3, r0
 8022212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022216:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802221a:	fa93 f3a3 	rbit	r3, r3
 802221e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8022222:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8022226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 802222a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802222e:	2b00      	cmp	r3, #0
 8022230:	d101      	bne.n	8022236 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8022232:	2320      	movs	r3, #32
 8022234:	e004      	b.n	8022240 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8022236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802223a:	fab3 f383 	clz	r3, r3
 802223e:	b2db      	uxtb	r3, r3
 8022240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8022242:	683b      	ldr	r3, [r7, #0]
 8022244:	681b      	ldr	r3, [r3, #0]
 8022246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802224a:	2b00      	cmp	r3, #0
 802224c:	d105      	bne.n	802225a <HAL_ADC_ConfigChannel+0x366>
 802224e:	683b      	ldr	r3, [r7, #0]
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	0e9b      	lsrs	r3, r3, #26
 8022254:	f003 031f 	and.w	r3, r3, #31
 8022258:	e014      	b.n	8022284 <HAL_ADC_ConfigChannel+0x390>
 802225a:	683b      	ldr	r3, [r7, #0]
 802225c:	681b      	ldr	r3, [r3, #0]
 802225e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8022262:	fa93 f3a3 	rbit	r3, r3
 8022266:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8022268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802226a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 802226e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8022272:	2b00      	cmp	r3, #0
 8022274:	d101      	bne.n	802227a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8022276:	2320      	movs	r3, #32
 8022278:	e004      	b.n	8022284 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 802227a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802227e:	fab3 f383 	clz	r3, r3
 8022282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8022284:	429a      	cmp	r2, r3
 8022286:	d106      	bne.n	8022296 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	681b      	ldr	r3, [r3, #0]
 802228c:	2200      	movs	r2, #0
 802228e:	2102      	movs	r1, #2
 8022290:	4618      	mov	r0, r3
 8022292:	f7ff fbb7 	bl	8021a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	2103      	movs	r1, #3
 802229c:	4618      	mov	r0, r3
 802229e:	f7ff fb9b 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 80222a2:	4603      	mov	r3, r0
 80222a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d10a      	bne.n	80222c2 <HAL_ADC_ConfigChannel+0x3ce>
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	681b      	ldr	r3, [r3, #0]
 80222b0:	2103      	movs	r1, #3
 80222b2:	4618      	mov	r0, r3
 80222b4:	f7ff fb90 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 80222b8:	4603      	mov	r3, r0
 80222ba:	0e9b      	lsrs	r3, r3, #26
 80222bc:	f003 021f 	and.w	r2, r3, #31
 80222c0:	e017      	b.n	80222f2 <HAL_ADC_ConfigChannel+0x3fe>
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	681b      	ldr	r3, [r3, #0]
 80222c6:	2103      	movs	r1, #3
 80222c8:	4618      	mov	r0, r3
 80222ca:	f7ff fb85 	bl	80219d8 <LL_ADC_GetOffsetChannel>
 80222ce:	4603      	mov	r3, r0
 80222d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80222d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80222d4:	fa93 f3a3 	rbit	r3, r3
 80222d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80222da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80222dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80222de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d101      	bne.n	80222e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80222e4:	2320      	movs	r3, #32
 80222e6:	e003      	b.n	80222f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80222e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80222ea:	fab3 f383 	clz	r3, r3
 80222ee:	b2db      	uxtb	r3, r3
 80222f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80222f2:	683b      	ldr	r3, [r7, #0]
 80222f4:	681b      	ldr	r3, [r3, #0]
 80222f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d105      	bne.n	802230a <HAL_ADC_ConfigChannel+0x416>
 80222fe:	683b      	ldr	r3, [r7, #0]
 8022300:	681b      	ldr	r3, [r3, #0]
 8022302:	0e9b      	lsrs	r3, r3, #26
 8022304:	f003 031f 	and.w	r3, r3, #31
 8022308:	e011      	b.n	802232e <HAL_ADC_ConfigChannel+0x43a>
 802230a:	683b      	ldr	r3, [r7, #0]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022312:	fa93 f3a3 	rbit	r3, r3
 8022316:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8022318:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802231a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 802231c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802231e:	2b00      	cmp	r3, #0
 8022320:	d101      	bne.n	8022326 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8022322:	2320      	movs	r3, #32
 8022324:	e003      	b.n	802232e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8022326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8022328:	fab3 f383 	clz	r3, r3
 802232c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 802232e:	429a      	cmp	r2, r3
 8022330:	d106      	bne.n	8022340 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	681b      	ldr	r3, [r3, #0]
 8022336:	2200      	movs	r2, #0
 8022338:	2103      	movs	r1, #3
 802233a:	4618      	mov	r0, r3
 802233c:	f7ff fb62 	bl	8021a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	4618      	mov	r0, r3
 8022346:	f7ff fc55 	bl	8021bf4 <LL_ADC_IsEnabled>
 802234a:	4603      	mov	r3, r0
 802234c:	2b00      	cmp	r3, #0
 802234e:	f040 813f 	bne.w	80225d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	6818      	ldr	r0, [r3, #0]
 8022356:	683b      	ldr	r3, [r7, #0]
 8022358:	6819      	ldr	r1, [r3, #0]
 802235a:	683b      	ldr	r3, [r7, #0]
 802235c:	68db      	ldr	r3, [r3, #12]
 802235e:	461a      	mov	r2, r3
 8022360:	f7ff fbd6 	bl	8021b10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8022364:	683b      	ldr	r3, [r7, #0]
 8022366:	68db      	ldr	r3, [r3, #12]
 8022368:	4a8e      	ldr	r2, [pc, #568]	@ (80225a4 <HAL_ADC_ConfigChannel+0x6b0>)
 802236a:	4293      	cmp	r3, r2
 802236c:	f040 8130 	bne.w	80225d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8022374:	683b      	ldr	r3, [r7, #0]
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802237c:	2b00      	cmp	r3, #0
 802237e:	d10b      	bne.n	8022398 <HAL_ADC_ConfigChannel+0x4a4>
 8022380:	683b      	ldr	r3, [r7, #0]
 8022382:	681b      	ldr	r3, [r3, #0]
 8022384:	0e9b      	lsrs	r3, r3, #26
 8022386:	3301      	adds	r3, #1
 8022388:	f003 031f 	and.w	r3, r3, #31
 802238c:	2b09      	cmp	r3, #9
 802238e:	bf94      	ite	ls
 8022390:	2301      	movls	r3, #1
 8022392:	2300      	movhi	r3, #0
 8022394:	b2db      	uxtb	r3, r3
 8022396:	e019      	b.n	80223cc <HAL_ADC_ConfigChannel+0x4d8>
 8022398:	683b      	ldr	r3, [r7, #0]
 802239a:	681b      	ldr	r3, [r3, #0]
 802239c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802239e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80223a0:	fa93 f3a3 	rbit	r3, r3
 80223a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80223a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80223a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80223aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d101      	bne.n	80223b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80223b0:	2320      	movs	r3, #32
 80223b2:	e003      	b.n	80223bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80223b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80223b6:	fab3 f383 	clz	r3, r3
 80223ba:	b2db      	uxtb	r3, r3
 80223bc:	3301      	adds	r3, #1
 80223be:	f003 031f 	and.w	r3, r3, #31
 80223c2:	2b09      	cmp	r3, #9
 80223c4:	bf94      	ite	ls
 80223c6:	2301      	movls	r3, #1
 80223c8:	2300      	movhi	r3, #0
 80223ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	d079      	beq.n	80224c4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80223d0:	683b      	ldr	r3, [r7, #0]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d107      	bne.n	80223ec <HAL_ADC_ConfigChannel+0x4f8>
 80223dc:	683b      	ldr	r3, [r7, #0]
 80223de:	681b      	ldr	r3, [r3, #0]
 80223e0:	0e9b      	lsrs	r3, r3, #26
 80223e2:	3301      	adds	r3, #1
 80223e4:	069b      	lsls	r3, r3, #26
 80223e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80223ea:	e015      	b.n	8022418 <HAL_ADC_ConfigChannel+0x524>
 80223ec:	683b      	ldr	r3, [r7, #0]
 80223ee:	681b      	ldr	r3, [r3, #0]
 80223f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80223f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80223f4:	fa93 f3a3 	rbit	r3, r3
 80223f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80223fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80223fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80223fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022400:	2b00      	cmp	r3, #0
 8022402:	d101      	bne.n	8022408 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8022404:	2320      	movs	r3, #32
 8022406:	e003      	b.n	8022410 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8022408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802240a:	fab3 f383 	clz	r3, r3
 802240e:	b2db      	uxtb	r3, r3
 8022410:	3301      	adds	r3, #1
 8022412:	069b      	lsls	r3, r3, #26
 8022414:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8022418:	683b      	ldr	r3, [r7, #0]
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022420:	2b00      	cmp	r3, #0
 8022422:	d109      	bne.n	8022438 <HAL_ADC_ConfigChannel+0x544>
 8022424:	683b      	ldr	r3, [r7, #0]
 8022426:	681b      	ldr	r3, [r3, #0]
 8022428:	0e9b      	lsrs	r3, r3, #26
 802242a:	3301      	adds	r3, #1
 802242c:	f003 031f 	and.w	r3, r3, #31
 8022430:	2101      	movs	r1, #1
 8022432:	fa01 f303 	lsl.w	r3, r1, r3
 8022436:	e017      	b.n	8022468 <HAL_ADC_ConfigChannel+0x574>
 8022438:	683b      	ldr	r3, [r7, #0]
 802243a:	681b      	ldr	r3, [r3, #0]
 802243c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022440:	fa93 f3a3 	rbit	r3, r3
 8022444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8022446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022448:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 802244a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802244c:	2b00      	cmp	r3, #0
 802244e:	d101      	bne.n	8022454 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8022450:	2320      	movs	r3, #32
 8022452:	e003      	b.n	802245c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8022454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022456:	fab3 f383 	clz	r3, r3
 802245a:	b2db      	uxtb	r3, r3
 802245c:	3301      	adds	r3, #1
 802245e:	f003 031f 	and.w	r3, r3, #31
 8022462:	2101      	movs	r1, #1
 8022464:	fa01 f303 	lsl.w	r3, r1, r3
 8022468:	ea42 0103 	orr.w	r1, r2, r3
 802246c:	683b      	ldr	r3, [r7, #0]
 802246e:	681b      	ldr	r3, [r3, #0]
 8022470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022474:	2b00      	cmp	r3, #0
 8022476:	d10a      	bne.n	802248e <HAL_ADC_ConfigChannel+0x59a>
 8022478:	683b      	ldr	r3, [r7, #0]
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	0e9b      	lsrs	r3, r3, #26
 802247e:	3301      	adds	r3, #1
 8022480:	f003 021f 	and.w	r2, r3, #31
 8022484:	4613      	mov	r3, r2
 8022486:	005b      	lsls	r3, r3, #1
 8022488:	4413      	add	r3, r2
 802248a:	051b      	lsls	r3, r3, #20
 802248c:	e018      	b.n	80224c0 <HAL_ADC_ConfigChannel+0x5cc>
 802248e:	683b      	ldr	r3, [r7, #0]
 8022490:	681b      	ldr	r3, [r3, #0]
 8022492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022496:	fa93 f3a3 	rbit	r3, r3
 802249a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 802249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802249e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80224a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80224a2:	2b00      	cmp	r3, #0
 80224a4:	d101      	bne.n	80224aa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80224a6:	2320      	movs	r3, #32
 80224a8:	e003      	b.n	80224b2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80224aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80224ac:	fab3 f383 	clz	r3, r3
 80224b0:	b2db      	uxtb	r3, r3
 80224b2:	3301      	adds	r3, #1
 80224b4:	f003 021f 	and.w	r2, r3, #31
 80224b8:	4613      	mov	r3, r2
 80224ba:	005b      	lsls	r3, r3, #1
 80224bc:	4413      	add	r3, r2
 80224be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80224c0:	430b      	orrs	r3, r1
 80224c2:	e080      	b.n	80225c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80224c4:	683b      	ldr	r3, [r7, #0]
 80224c6:	681b      	ldr	r3, [r3, #0]
 80224c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d107      	bne.n	80224e0 <HAL_ADC_ConfigChannel+0x5ec>
 80224d0:	683b      	ldr	r3, [r7, #0]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	0e9b      	lsrs	r3, r3, #26
 80224d6:	3301      	adds	r3, #1
 80224d8:	069b      	lsls	r3, r3, #26
 80224da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80224de:	e015      	b.n	802250c <HAL_ADC_ConfigChannel+0x618>
 80224e0:	683b      	ldr	r3, [r7, #0]
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80224e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80224e8:	fa93 f3a3 	rbit	r3, r3
 80224ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80224ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80224f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d101      	bne.n	80224fc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80224f8:	2320      	movs	r3, #32
 80224fa:	e003      	b.n	8022504 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80224fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80224fe:	fab3 f383 	clz	r3, r3
 8022502:	b2db      	uxtb	r3, r3
 8022504:	3301      	adds	r3, #1
 8022506:	069b      	lsls	r3, r3, #26
 8022508:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 802250c:	683b      	ldr	r3, [r7, #0]
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022514:	2b00      	cmp	r3, #0
 8022516:	d109      	bne.n	802252c <HAL_ADC_ConfigChannel+0x638>
 8022518:	683b      	ldr	r3, [r7, #0]
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	0e9b      	lsrs	r3, r3, #26
 802251e:	3301      	adds	r3, #1
 8022520:	f003 031f 	and.w	r3, r3, #31
 8022524:	2101      	movs	r1, #1
 8022526:	fa01 f303 	lsl.w	r3, r1, r3
 802252a:	e017      	b.n	802255c <HAL_ADC_ConfigChannel+0x668>
 802252c:	683b      	ldr	r3, [r7, #0]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022532:	69fb      	ldr	r3, [r7, #28]
 8022534:	fa93 f3a3 	rbit	r3, r3
 8022538:	61bb      	str	r3, [r7, #24]
  return result;
 802253a:	69bb      	ldr	r3, [r7, #24]
 802253c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 802253e:	6a3b      	ldr	r3, [r7, #32]
 8022540:	2b00      	cmp	r3, #0
 8022542:	d101      	bne.n	8022548 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8022544:	2320      	movs	r3, #32
 8022546:	e003      	b.n	8022550 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8022548:	6a3b      	ldr	r3, [r7, #32]
 802254a:	fab3 f383 	clz	r3, r3
 802254e:	b2db      	uxtb	r3, r3
 8022550:	3301      	adds	r3, #1
 8022552:	f003 031f 	and.w	r3, r3, #31
 8022556:	2101      	movs	r1, #1
 8022558:	fa01 f303 	lsl.w	r3, r1, r3
 802255c:	ea42 0103 	orr.w	r1, r2, r3
 8022560:	683b      	ldr	r3, [r7, #0]
 8022562:	681b      	ldr	r3, [r3, #0]
 8022564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8022568:	2b00      	cmp	r3, #0
 802256a:	d10d      	bne.n	8022588 <HAL_ADC_ConfigChannel+0x694>
 802256c:	683b      	ldr	r3, [r7, #0]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	0e9b      	lsrs	r3, r3, #26
 8022572:	3301      	adds	r3, #1
 8022574:	f003 021f 	and.w	r2, r3, #31
 8022578:	4613      	mov	r3, r2
 802257a:	005b      	lsls	r3, r3, #1
 802257c:	4413      	add	r3, r2
 802257e:	3b1e      	subs	r3, #30
 8022580:	051b      	lsls	r3, r3, #20
 8022582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8022586:	e01d      	b.n	80225c4 <HAL_ADC_ConfigChannel+0x6d0>
 8022588:	683b      	ldr	r3, [r7, #0]
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802258e:	693b      	ldr	r3, [r7, #16]
 8022590:	fa93 f3a3 	rbit	r3, r3
 8022594:	60fb      	str	r3, [r7, #12]
  return result;
 8022596:	68fb      	ldr	r3, [r7, #12]
 8022598:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 802259a:	697b      	ldr	r3, [r7, #20]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d103      	bne.n	80225a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80225a0:	2320      	movs	r3, #32
 80225a2:	e005      	b.n	80225b0 <HAL_ADC_ConfigChannel+0x6bc>
 80225a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80225a8:	697b      	ldr	r3, [r7, #20]
 80225aa:	fab3 f383 	clz	r3, r3
 80225ae:	b2db      	uxtb	r3, r3
 80225b0:	3301      	adds	r3, #1
 80225b2:	f003 021f 	and.w	r2, r3, #31
 80225b6:	4613      	mov	r3, r2
 80225b8:	005b      	lsls	r3, r3, #1
 80225ba:	4413      	add	r3, r2
 80225bc:	3b1e      	subs	r3, #30
 80225be:	051b      	lsls	r3, r3, #20
 80225c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80225c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80225c6:	683a      	ldr	r2, [r7, #0]
 80225c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80225ca:	4619      	mov	r1, r3
 80225cc:	f7ff fa74 	bl	8021ab8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80225d0:	683b      	ldr	r3, [r7, #0]
 80225d2:	681a      	ldr	r2, [r3, #0]
 80225d4:	4b3d      	ldr	r3, [pc, #244]	@ (80226cc <HAL_ADC_ConfigChannel+0x7d8>)
 80225d6:	4013      	ands	r3, r2
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d06c      	beq.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80225dc:	483c      	ldr	r0, [pc, #240]	@ (80226d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80225de:	f7ff f9c9 	bl	8021974 <LL_ADC_GetCommonPathInternalCh>
 80225e2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80225e6:	683b      	ldr	r3, [r7, #0]
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	4a3a      	ldr	r2, [pc, #232]	@ (80226d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80225ec:	4293      	cmp	r3, r2
 80225ee:	d127      	bne.n	8022640 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80225f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80225f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d121      	bne.n	8022640 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	4a35      	ldr	r2, [pc, #212]	@ (80226d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8022602:	4293      	cmp	r3, r2
 8022604:	d157      	bne.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8022606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 802260a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802260e:	4619      	mov	r1, r3
 8022610:	482f      	ldr	r0, [pc, #188]	@ (80226d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8022612:	f7ff f99c 	bl	802194e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8022616:	4b31      	ldr	r3, [pc, #196]	@ (80226dc <HAL_ADC_ConfigChannel+0x7e8>)
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	099b      	lsrs	r3, r3, #6
 802261c:	4a30      	ldr	r2, [pc, #192]	@ (80226e0 <HAL_ADC_ConfigChannel+0x7ec>)
 802261e:	fba2 2303 	umull	r2, r3, r2, r3
 8022622:	099b      	lsrs	r3, r3, #6
 8022624:	1c5a      	adds	r2, r3, #1
 8022626:	4613      	mov	r3, r2
 8022628:	005b      	lsls	r3, r3, #1
 802262a:	4413      	add	r3, r2
 802262c:	009b      	lsls	r3, r3, #2
 802262e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8022630:	e002      	b.n	8022638 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8022632:	68bb      	ldr	r3, [r7, #8]
 8022634:	3b01      	subs	r3, #1
 8022636:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8022638:	68bb      	ldr	r3, [r7, #8]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d1f9      	bne.n	8022632 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 802263e:	e03a      	b.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8022640:	683b      	ldr	r3, [r7, #0]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	4a27      	ldr	r2, [pc, #156]	@ (80226e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8022646:	4293      	cmp	r3, r2
 8022648:	d113      	bne.n	8022672 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 802264a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 802264e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8022652:	2b00      	cmp	r3, #0
 8022654:	d10d      	bne.n	8022672 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	4a1f      	ldr	r2, [pc, #124]	@ (80226d8 <HAL_ADC_ConfigChannel+0x7e4>)
 802265c:	4293      	cmp	r3, r2
 802265e:	d12a      	bne.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8022660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8022664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022668:	4619      	mov	r1, r3
 802266a:	4819      	ldr	r0, [pc, #100]	@ (80226d0 <HAL_ADC_ConfigChannel+0x7dc>)
 802266c:	f7ff f96f 	bl	802194e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8022670:	e021      	b.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8022672:	683b      	ldr	r3, [r7, #0]
 8022674:	681b      	ldr	r3, [r3, #0]
 8022676:	4a1c      	ldr	r2, [pc, #112]	@ (80226e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8022678:	4293      	cmp	r3, r2
 802267a:	d11c      	bne.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 802267c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8022680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8022684:	2b00      	cmp	r3, #0
 8022686:	d116      	bne.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	681b      	ldr	r3, [r3, #0]
 802268c:	4a12      	ldr	r2, [pc, #72]	@ (80226d8 <HAL_ADC_ConfigChannel+0x7e4>)
 802268e:	4293      	cmp	r3, r2
 8022690:	d111      	bne.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8022692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8022696:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 802269a:	4619      	mov	r1, r3
 802269c:	480c      	ldr	r0, [pc, #48]	@ (80226d0 <HAL_ADC_ConfigChannel+0x7dc>)
 802269e:	f7ff f956 	bl	802194e <LL_ADC_SetCommonPathInternalCh>
 80226a2:	e008      	b.n	80226b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80226a8:	f043 0220 	orr.w	r2, r3, #32
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80226b0:	2301      	movs	r3, #1
 80226b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	2200      	movs	r2, #0
 80226ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80226be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80226c2:	4618      	mov	r0, r3
 80226c4:	37d8      	adds	r7, #216	@ 0xd8
 80226c6:	46bd      	mov	sp, r7
 80226c8:	bd80      	pop	{r7, pc}
 80226ca:	bf00      	nop
 80226cc:	80080000 	.word	0x80080000
 80226d0:	50040300 	.word	0x50040300
 80226d4:	c7520000 	.word	0xc7520000
 80226d8:	50040000 	.word	0x50040000
 80226dc:	20000000 	.word	0x20000000
 80226e0:	053e2d63 	.word	0x053e2d63
 80226e4:	cb840000 	.word	0xcb840000
 80226e8:	80000001 	.word	0x80000001

080226ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80226ec:	b480      	push	{r7}
 80226ee:	b085      	sub	sp, #20
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	f003 0307 	and.w	r3, r3, #7
 80226fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80226fc:	4b0c      	ldr	r3, [pc, #48]	@ (8022730 <__NVIC_SetPriorityGrouping+0x44>)
 80226fe:	68db      	ldr	r3, [r3, #12]
 8022700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022702:	68ba      	ldr	r2, [r7, #8]
 8022704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8022708:	4013      	ands	r3, r2
 802270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022710:	68bb      	ldr	r3, [r7, #8]
 8022712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8022718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802271e:	4a04      	ldr	r2, [pc, #16]	@ (8022730 <__NVIC_SetPriorityGrouping+0x44>)
 8022720:	68bb      	ldr	r3, [r7, #8]
 8022722:	60d3      	str	r3, [r2, #12]
}
 8022724:	bf00      	nop
 8022726:	3714      	adds	r7, #20
 8022728:	46bd      	mov	sp, r7
 802272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802272e:	4770      	bx	lr
 8022730:	e000ed00 	.word	0xe000ed00

08022734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022734:	b480      	push	{r7}
 8022736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022738:	4b04      	ldr	r3, [pc, #16]	@ (802274c <__NVIC_GetPriorityGrouping+0x18>)
 802273a:	68db      	ldr	r3, [r3, #12]
 802273c:	0a1b      	lsrs	r3, r3, #8
 802273e:	f003 0307 	and.w	r3, r3, #7
}
 8022742:	4618      	mov	r0, r3
 8022744:	46bd      	mov	sp, r7
 8022746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274a:	4770      	bx	lr
 802274c:	e000ed00 	.word	0xe000ed00

08022750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022750:	b480      	push	{r7}
 8022752:	b083      	sub	sp, #12
 8022754:	af00      	add	r7, sp, #0
 8022756:	4603      	mov	r3, r0
 8022758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802275e:	2b00      	cmp	r3, #0
 8022760:	db0b      	blt.n	802277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022762:	79fb      	ldrb	r3, [r7, #7]
 8022764:	f003 021f 	and.w	r2, r3, #31
 8022768:	4907      	ldr	r1, [pc, #28]	@ (8022788 <__NVIC_EnableIRQ+0x38>)
 802276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802276e:	095b      	lsrs	r3, r3, #5
 8022770:	2001      	movs	r0, #1
 8022772:	fa00 f202 	lsl.w	r2, r0, r2
 8022776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802277a:	bf00      	nop
 802277c:	370c      	adds	r7, #12
 802277e:	46bd      	mov	sp, r7
 8022780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022784:	4770      	bx	lr
 8022786:	bf00      	nop
 8022788:	e000e100 	.word	0xe000e100

0802278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802278c:	b480      	push	{r7}
 802278e:	b083      	sub	sp, #12
 8022790:	af00      	add	r7, sp, #0
 8022792:	4603      	mov	r3, r0
 8022794:	6039      	str	r1, [r7, #0]
 8022796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802279c:	2b00      	cmp	r3, #0
 802279e:	db0a      	blt.n	80227b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80227a0:	683b      	ldr	r3, [r7, #0]
 80227a2:	b2da      	uxtb	r2, r3
 80227a4:	490c      	ldr	r1, [pc, #48]	@ (80227d8 <__NVIC_SetPriority+0x4c>)
 80227a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80227aa:	0112      	lsls	r2, r2, #4
 80227ac:	b2d2      	uxtb	r2, r2
 80227ae:	440b      	add	r3, r1
 80227b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80227b4:	e00a      	b.n	80227cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80227b6:	683b      	ldr	r3, [r7, #0]
 80227b8:	b2da      	uxtb	r2, r3
 80227ba:	4908      	ldr	r1, [pc, #32]	@ (80227dc <__NVIC_SetPriority+0x50>)
 80227bc:	79fb      	ldrb	r3, [r7, #7]
 80227be:	f003 030f 	and.w	r3, r3, #15
 80227c2:	3b04      	subs	r3, #4
 80227c4:	0112      	lsls	r2, r2, #4
 80227c6:	b2d2      	uxtb	r2, r2
 80227c8:	440b      	add	r3, r1
 80227ca:	761a      	strb	r2, [r3, #24]
}
 80227cc:	bf00      	nop
 80227ce:	370c      	adds	r7, #12
 80227d0:	46bd      	mov	sp, r7
 80227d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d6:	4770      	bx	lr
 80227d8:	e000e100 	.word	0xe000e100
 80227dc:	e000ed00 	.word	0xe000ed00

080227e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80227e0:	b480      	push	{r7}
 80227e2:	b089      	sub	sp, #36	@ 0x24
 80227e4:	af00      	add	r7, sp, #0
 80227e6:	60f8      	str	r0, [r7, #12]
 80227e8:	60b9      	str	r1, [r7, #8]
 80227ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	f003 0307 	and.w	r3, r3, #7
 80227f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80227f4:	69fb      	ldr	r3, [r7, #28]
 80227f6:	f1c3 0307 	rsb	r3, r3, #7
 80227fa:	2b04      	cmp	r3, #4
 80227fc:	bf28      	it	cs
 80227fe:	2304      	movcs	r3, #4
 8022800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022802:	69fb      	ldr	r3, [r7, #28]
 8022804:	3304      	adds	r3, #4
 8022806:	2b06      	cmp	r3, #6
 8022808:	d902      	bls.n	8022810 <NVIC_EncodePriority+0x30>
 802280a:	69fb      	ldr	r3, [r7, #28]
 802280c:	3b03      	subs	r3, #3
 802280e:	e000      	b.n	8022812 <NVIC_EncodePriority+0x32>
 8022810:	2300      	movs	r3, #0
 8022812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022818:	69bb      	ldr	r3, [r7, #24]
 802281a:	fa02 f303 	lsl.w	r3, r2, r3
 802281e:	43da      	mvns	r2, r3
 8022820:	68bb      	ldr	r3, [r7, #8]
 8022822:	401a      	ands	r2, r3
 8022824:	697b      	ldr	r3, [r7, #20]
 8022826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022828:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802282c:	697b      	ldr	r3, [r7, #20]
 802282e:	fa01 f303 	lsl.w	r3, r1, r3
 8022832:	43d9      	mvns	r1, r3
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022838:	4313      	orrs	r3, r2
         );
}
 802283a:	4618      	mov	r0, r3
 802283c:	3724      	adds	r7, #36	@ 0x24
 802283e:	46bd      	mov	sp, r7
 8022840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022844:	4770      	bx	lr
	...

08022848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022848:	b580      	push	{r7, lr}
 802284a:	b082      	sub	sp, #8
 802284c:	af00      	add	r7, sp, #0
 802284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	3b01      	subs	r3, #1
 8022854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022858:	d301      	bcc.n	802285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802285a:	2301      	movs	r3, #1
 802285c:	e00f      	b.n	802287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802285e:	4a0a      	ldr	r2, [pc, #40]	@ (8022888 <SysTick_Config+0x40>)
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	3b01      	subs	r3, #1
 8022864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022866:	210f      	movs	r1, #15
 8022868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802286c:	f7ff ff8e 	bl	802278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022870:	4b05      	ldr	r3, [pc, #20]	@ (8022888 <SysTick_Config+0x40>)
 8022872:	2200      	movs	r2, #0
 8022874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022876:	4b04      	ldr	r3, [pc, #16]	@ (8022888 <SysTick_Config+0x40>)
 8022878:	2207      	movs	r2, #7
 802287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802287c:	2300      	movs	r3, #0
}
 802287e:	4618      	mov	r0, r3
 8022880:	3708      	adds	r7, #8
 8022882:	46bd      	mov	sp, r7
 8022884:	bd80      	pop	{r7, pc}
 8022886:	bf00      	nop
 8022888:	e000e010 	.word	0xe000e010

0802288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b082      	sub	sp, #8
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022894:	6878      	ldr	r0, [r7, #4]
 8022896:	f7ff ff29 	bl	80226ec <__NVIC_SetPriorityGrouping>
}
 802289a:	bf00      	nop
 802289c:	3708      	adds	r7, #8
 802289e:	46bd      	mov	sp, r7
 80228a0:	bd80      	pop	{r7, pc}

080228a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80228a2:	b580      	push	{r7, lr}
 80228a4:	b086      	sub	sp, #24
 80228a6:	af00      	add	r7, sp, #0
 80228a8:	4603      	mov	r3, r0
 80228aa:	60b9      	str	r1, [r7, #8]
 80228ac:	607a      	str	r2, [r7, #4]
 80228ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80228b0:	2300      	movs	r3, #0
 80228b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80228b4:	f7ff ff3e 	bl	8022734 <__NVIC_GetPriorityGrouping>
 80228b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80228ba:	687a      	ldr	r2, [r7, #4]
 80228bc:	68b9      	ldr	r1, [r7, #8]
 80228be:	6978      	ldr	r0, [r7, #20]
 80228c0:	f7ff ff8e 	bl	80227e0 <NVIC_EncodePriority>
 80228c4:	4602      	mov	r2, r0
 80228c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80228ca:	4611      	mov	r1, r2
 80228cc:	4618      	mov	r0, r3
 80228ce:	f7ff ff5d 	bl	802278c <__NVIC_SetPriority>
}
 80228d2:	bf00      	nop
 80228d4:	3718      	adds	r7, #24
 80228d6:	46bd      	mov	sp, r7
 80228d8:	bd80      	pop	{r7, pc}

080228da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80228da:	b580      	push	{r7, lr}
 80228dc:	b082      	sub	sp, #8
 80228de:	af00      	add	r7, sp, #0
 80228e0:	4603      	mov	r3, r0
 80228e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80228e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80228e8:	4618      	mov	r0, r3
 80228ea:	f7ff ff31 	bl	8022750 <__NVIC_EnableIRQ>
}
 80228ee:	bf00      	nop
 80228f0:	3708      	adds	r7, #8
 80228f2:	46bd      	mov	sp, r7
 80228f4:	bd80      	pop	{r7, pc}

080228f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80228f6:	b580      	push	{r7, lr}
 80228f8:	b082      	sub	sp, #8
 80228fa:	af00      	add	r7, sp, #0
 80228fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80228fe:	6878      	ldr	r0, [r7, #4]
 8022900:	f7ff ffa2 	bl	8022848 <SysTick_Config>
 8022904:	4603      	mov	r3, r0
}
 8022906:	4618      	mov	r0, r3
 8022908:	3708      	adds	r7, #8
 802290a:	46bd      	mov	sp, r7
 802290c:	bd80      	pop	{r7, pc}
	...

08022910 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8022910:	b580      	push	{r7, lr}
 8022912:	b082      	sub	sp, #8
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	2b00      	cmp	r3, #0
 802291c:	d101      	bne.n	8022922 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 802291e:	2301      	movs	r3, #1
 8022920:	e0ac      	b.n	8022a7c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	681b      	ldr	r3, [r3, #0]
 8022926:	4618      	mov	r0, r3
 8022928:	f000 f8b2 	bl	8022a90 <DFSDM_GetChannelFromInstance>
 802292c:	4603      	mov	r3, r0
 802292e:	4a55      	ldr	r2, [pc, #340]	@ (8022a84 <HAL_DFSDM_ChannelInit+0x174>)
 8022930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022934:	2b00      	cmp	r3, #0
 8022936:	d001      	beq.n	802293c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8022938:	2301      	movs	r3, #1
 802293a:	e09f      	b.n	8022a7c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 802293c:	6878      	ldr	r0, [r7, #4]
 802293e:	f7fe fb31 	bl	8020fa4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8022942:	4b51      	ldr	r3, [pc, #324]	@ (8022a88 <HAL_DFSDM_ChannelInit+0x178>)
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	3301      	adds	r3, #1
 8022948:	4a4f      	ldr	r2, [pc, #316]	@ (8022a88 <HAL_DFSDM_ChannelInit+0x178>)
 802294a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 802294c:	4b4e      	ldr	r3, [pc, #312]	@ (8022a88 <HAL_DFSDM_ChannelInit+0x178>)
 802294e:	681b      	ldr	r3, [r3, #0]
 8022950:	2b01      	cmp	r3, #1
 8022952:	d125      	bne.n	80229a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8022954:	4b4d      	ldr	r3, [pc, #308]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	4a4c      	ldr	r2, [pc, #304]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 802295a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 802295e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8022960:	4b4a      	ldr	r3, [pc, #296]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022962:	681a      	ldr	r2, [r3, #0]
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	689b      	ldr	r3, [r3, #8]
 8022968:	4948      	ldr	r1, [pc, #288]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 802296a:	4313      	orrs	r3, r2
 802296c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 802296e:	4b47      	ldr	r3, [pc, #284]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	4a46      	ldr	r2, [pc, #280]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022974:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8022978:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	791b      	ldrb	r3, [r3, #4]
 802297e:	2b01      	cmp	r3, #1
 8022980:	d108      	bne.n	8022994 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8022982:	4b42      	ldr	r3, [pc, #264]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022984:	681a      	ldr	r2, [r3, #0]
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	68db      	ldr	r3, [r3, #12]
 802298a:	3b01      	subs	r3, #1
 802298c:	041b      	lsls	r3, r3, #16
 802298e:	493f      	ldr	r1, [pc, #252]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022990:	4313      	orrs	r3, r2
 8022992:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8022994:	4b3d      	ldr	r3, [pc, #244]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8022996:	681b      	ldr	r3, [r3, #0]
 8022998:	4a3c      	ldr	r2, [pc, #240]	@ (8022a8c <HAL_DFSDM_ChannelInit+0x17c>)
 802299a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802299e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	681a      	ldr	r2, [r3, #0]
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80229ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	681b      	ldr	r3, [r3, #0]
 80229b4:	6819      	ldr	r1, [r3, #0]
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80229be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80229c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	430a      	orrs	r2, r1
 80229cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	681b      	ldr	r3, [r3, #0]
 80229d2:	681a      	ldr	r2, [r3, #0]
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	f022 020f 	bic.w	r2, r2, #15
 80229dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80229de:	687b      	ldr	r3, [r7, #4]
 80229e0:	681b      	ldr	r3, [r3, #0]
 80229e2:	6819      	ldr	r1, [r3, #0]
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80229ec:	431a      	orrs	r2, r3
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	430a      	orrs	r2, r1
 80229f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	681b      	ldr	r3, [r3, #0]
 80229fa:	689a      	ldr	r2, [r3, #8]
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8022a04:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	681b      	ldr	r3, [r3, #0]
 8022a0a:	6899      	ldr	r1, [r3, #8]
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022a14:	3b01      	subs	r3, #1
 8022a16:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8022a18:	431a      	orrs	r2, r3
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	430a      	orrs	r2, r1
 8022a20:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	685a      	ldr	r2, [r3, #4]
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	f002 0207 	and.w	r2, r2, #7
 8022a30:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8022a32:	687b      	ldr	r3, [r7, #4]
 8022a34:	681b      	ldr	r3, [r3, #0]
 8022a36:	6859      	ldr	r1, [r3, #4]
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a3c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a42:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8022a44:	431a      	orrs	r2, r3
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	430a      	orrs	r2, r1
 8022a4c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	681a      	ldr	r2, [r3, #0]
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8022a5c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	2201      	movs	r2, #1
 8022a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	4618      	mov	r0, r3
 8022a6c:	f000 f810 	bl	8022a90 <DFSDM_GetChannelFromInstance>
 8022a70:	4602      	mov	r2, r0
 8022a72:	4904      	ldr	r1, [pc, #16]	@ (8022a84 <HAL_DFSDM_ChannelInit+0x174>)
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8022a7a:	2300      	movs	r3, #0
}
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	3708      	adds	r7, #8
 8022a80:	46bd      	mov	sp, r7
 8022a82:	bd80      	pop	{r7, pc}
 8022a84:	20000544 	.word	0x20000544
 8022a88:	20000540 	.word	0x20000540
 8022a8c:	40016000 	.word	0x40016000

08022a90 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8022a90:	b480      	push	{r7}
 8022a92:	b085      	sub	sp, #20
 8022a94:	af00      	add	r7, sp, #0
 8022a96:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8022b0c <DFSDM_GetChannelFromInstance+0x7c>)
 8022a9c:	4293      	cmp	r3, r2
 8022a9e:	d102      	bne.n	8022aa6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8022aa0:	2300      	movs	r3, #0
 8022aa2:	60fb      	str	r3, [r7, #12]
 8022aa4:	e02b      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	4a19      	ldr	r2, [pc, #100]	@ (8022b10 <DFSDM_GetChannelFromInstance+0x80>)
 8022aaa:	4293      	cmp	r3, r2
 8022aac:	d102      	bne.n	8022ab4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8022aae:	2301      	movs	r3, #1
 8022ab0:	60fb      	str	r3, [r7, #12]
 8022ab2:	e024      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	4a17      	ldr	r2, [pc, #92]	@ (8022b14 <DFSDM_GetChannelFromInstance+0x84>)
 8022ab8:	4293      	cmp	r3, r2
 8022aba:	d102      	bne.n	8022ac2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8022abc:	2302      	movs	r3, #2
 8022abe:	60fb      	str	r3, [r7, #12]
 8022ac0:	e01d      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	4a14      	ldr	r2, [pc, #80]	@ (8022b18 <DFSDM_GetChannelFromInstance+0x88>)
 8022ac6:	4293      	cmp	r3, r2
 8022ac8:	d102      	bne.n	8022ad0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8022aca:	2304      	movs	r3, #4
 8022acc:	60fb      	str	r3, [r7, #12]
 8022ace:	e016      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	4a12      	ldr	r2, [pc, #72]	@ (8022b1c <DFSDM_GetChannelFromInstance+0x8c>)
 8022ad4:	4293      	cmp	r3, r2
 8022ad6:	d102      	bne.n	8022ade <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8022ad8:	2305      	movs	r3, #5
 8022ada:	60fb      	str	r3, [r7, #12]
 8022adc:	e00f      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8022b20 <DFSDM_GetChannelFromInstance+0x90>)
 8022ae2:	4293      	cmp	r3, r2
 8022ae4:	d102      	bne.n	8022aec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8022ae6:	2306      	movs	r3, #6
 8022ae8:	60fb      	str	r3, [r7, #12]
 8022aea:	e008      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	4a0d      	ldr	r2, [pc, #52]	@ (8022b24 <DFSDM_GetChannelFromInstance+0x94>)
 8022af0:	4293      	cmp	r3, r2
 8022af2:	d102      	bne.n	8022afa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8022af4:	2307      	movs	r3, #7
 8022af6:	60fb      	str	r3, [r7, #12]
 8022af8:	e001      	b.n	8022afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8022afa:	2303      	movs	r3, #3
 8022afc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8022afe:	68fb      	ldr	r3, [r7, #12]
}
 8022b00:	4618      	mov	r0, r3
 8022b02:	3714      	adds	r7, #20
 8022b04:	46bd      	mov	sp, r7
 8022b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b0a:	4770      	bx	lr
 8022b0c:	40016000 	.word	0x40016000
 8022b10:	40016020 	.word	0x40016020
 8022b14:	40016040 	.word	0x40016040
 8022b18:	40016080 	.word	0x40016080
 8022b1c:	400160a0 	.word	0x400160a0
 8022b20:	400160c0 	.word	0x400160c0
 8022b24:	400160e0 	.word	0x400160e0

08022b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022b28:	b480      	push	{r7}
 8022b2a:	b087      	sub	sp, #28
 8022b2c:	af00      	add	r7, sp, #0
 8022b2e:	6078      	str	r0, [r7, #4]
 8022b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8022b32:	2300      	movs	r3, #0
 8022b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8022b36:	e166      	b.n	8022e06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8022b38:	683b      	ldr	r3, [r7, #0]
 8022b3a:	681a      	ldr	r2, [r3, #0]
 8022b3c:	2101      	movs	r1, #1
 8022b3e:	697b      	ldr	r3, [r7, #20]
 8022b40:	fa01 f303 	lsl.w	r3, r1, r3
 8022b44:	4013      	ands	r3, r2
 8022b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8022b48:	68fb      	ldr	r3, [r7, #12]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	f000 8158 	beq.w	8022e00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8022b50:	683b      	ldr	r3, [r7, #0]
 8022b52:	685b      	ldr	r3, [r3, #4]
 8022b54:	f003 0303 	and.w	r3, r3, #3
 8022b58:	2b01      	cmp	r3, #1
 8022b5a:	d005      	beq.n	8022b68 <HAL_GPIO_Init+0x40>
 8022b5c:	683b      	ldr	r3, [r7, #0]
 8022b5e:	685b      	ldr	r3, [r3, #4]
 8022b60:	f003 0303 	and.w	r3, r3, #3
 8022b64:	2b02      	cmp	r3, #2
 8022b66:	d130      	bne.n	8022bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	689b      	ldr	r3, [r3, #8]
 8022b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8022b6e:	697b      	ldr	r3, [r7, #20]
 8022b70:	005b      	lsls	r3, r3, #1
 8022b72:	2203      	movs	r2, #3
 8022b74:	fa02 f303 	lsl.w	r3, r2, r3
 8022b78:	43db      	mvns	r3, r3
 8022b7a:	693a      	ldr	r2, [r7, #16]
 8022b7c:	4013      	ands	r3, r2
 8022b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8022b80:	683b      	ldr	r3, [r7, #0]
 8022b82:	68da      	ldr	r2, [r3, #12]
 8022b84:	697b      	ldr	r3, [r7, #20]
 8022b86:	005b      	lsls	r3, r3, #1
 8022b88:	fa02 f303 	lsl.w	r3, r2, r3
 8022b8c:	693a      	ldr	r2, [r7, #16]
 8022b8e:	4313      	orrs	r3, r2
 8022b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	693a      	ldr	r2, [r7, #16]
 8022b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	685b      	ldr	r3, [r3, #4]
 8022b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8022b9e:	2201      	movs	r2, #1
 8022ba0:	697b      	ldr	r3, [r7, #20]
 8022ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8022ba6:	43db      	mvns	r3, r3
 8022ba8:	693a      	ldr	r2, [r7, #16]
 8022baa:	4013      	ands	r3, r2
 8022bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8022bae:	683b      	ldr	r3, [r7, #0]
 8022bb0:	685b      	ldr	r3, [r3, #4]
 8022bb2:	091b      	lsrs	r3, r3, #4
 8022bb4:	f003 0201 	and.w	r2, r3, #1
 8022bb8:	697b      	ldr	r3, [r7, #20]
 8022bba:	fa02 f303 	lsl.w	r3, r2, r3
 8022bbe:	693a      	ldr	r2, [r7, #16]
 8022bc0:	4313      	orrs	r3, r2
 8022bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	693a      	ldr	r2, [r7, #16]
 8022bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8022bca:	683b      	ldr	r3, [r7, #0]
 8022bcc:	685b      	ldr	r3, [r3, #4]
 8022bce:	f003 0303 	and.w	r3, r3, #3
 8022bd2:	2b03      	cmp	r3, #3
 8022bd4:	d017      	beq.n	8022c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	68db      	ldr	r3, [r3, #12]
 8022bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8022bdc:	697b      	ldr	r3, [r7, #20]
 8022bde:	005b      	lsls	r3, r3, #1
 8022be0:	2203      	movs	r2, #3
 8022be2:	fa02 f303 	lsl.w	r3, r2, r3
 8022be6:	43db      	mvns	r3, r3
 8022be8:	693a      	ldr	r2, [r7, #16]
 8022bea:	4013      	ands	r3, r2
 8022bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8022bee:	683b      	ldr	r3, [r7, #0]
 8022bf0:	689a      	ldr	r2, [r3, #8]
 8022bf2:	697b      	ldr	r3, [r7, #20]
 8022bf4:	005b      	lsls	r3, r3, #1
 8022bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8022bfa:	693a      	ldr	r2, [r7, #16]
 8022bfc:	4313      	orrs	r3, r2
 8022bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	693a      	ldr	r2, [r7, #16]
 8022c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022c06:	683b      	ldr	r3, [r7, #0]
 8022c08:	685b      	ldr	r3, [r3, #4]
 8022c0a:	f003 0303 	and.w	r3, r3, #3
 8022c0e:	2b02      	cmp	r3, #2
 8022c10:	d123      	bne.n	8022c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8022c12:	697b      	ldr	r3, [r7, #20]
 8022c14:	08da      	lsrs	r2, r3, #3
 8022c16:	687b      	ldr	r3, [r7, #4]
 8022c18:	3208      	adds	r2, #8
 8022c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8022c20:	697b      	ldr	r3, [r7, #20]
 8022c22:	f003 0307 	and.w	r3, r3, #7
 8022c26:	009b      	lsls	r3, r3, #2
 8022c28:	220f      	movs	r2, #15
 8022c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8022c2e:	43db      	mvns	r3, r3
 8022c30:	693a      	ldr	r2, [r7, #16]
 8022c32:	4013      	ands	r3, r2
 8022c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8022c36:	683b      	ldr	r3, [r7, #0]
 8022c38:	691a      	ldr	r2, [r3, #16]
 8022c3a:	697b      	ldr	r3, [r7, #20]
 8022c3c:	f003 0307 	and.w	r3, r3, #7
 8022c40:	009b      	lsls	r3, r3, #2
 8022c42:	fa02 f303 	lsl.w	r3, r2, r3
 8022c46:	693a      	ldr	r2, [r7, #16]
 8022c48:	4313      	orrs	r3, r2
 8022c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8022c4c:	697b      	ldr	r3, [r7, #20]
 8022c4e:	08da      	lsrs	r2, r3, #3
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	3208      	adds	r2, #8
 8022c54:	6939      	ldr	r1, [r7, #16]
 8022c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8022c60:	697b      	ldr	r3, [r7, #20]
 8022c62:	005b      	lsls	r3, r3, #1
 8022c64:	2203      	movs	r2, #3
 8022c66:	fa02 f303 	lsl.w	r3, r2, r3
 8022c6a:	43db      	mvns	r3, r3
 8022c6c:	693a      	ldr	r2, [r7, #16]
 8022c6e:	4013      	ands	r3, r2
 8022c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8022c72:	683b      	ldr	r3, [r7, #0]
 8022c74:	685b      	ldr	r3, [r3, #4]
 8022c76:	f003 0203 	and.w	r2, r3, #3
 8022c7a:	697b      	ldr	r3, [r7, #20]
 8022c7c:	005b      	lsls	r3, r3, #1
 8022c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8022c82:	693a      	ldr	r2, [r7, #16]
 8022c84:	4313      	orrs	r3, r2
 8022c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	693a      	ldr	r2, [r7, #16]
 8022c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8022c8e:	683b      	ldr	r3, [r7, #0]
 8022c90:	685b      	ldr	r3, [r3, #4]
 8022c92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	f000 80b2 	beq.w	8022e00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022c9c:	4b61      	ldr	r3, [pc, #388]	@ (8022e24 <HAL_GPIO_Init+0x2fc>)
 8022c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022ca0:	4a60      	ldr	r2, [pc, #384]	@ (8022e24 <HAL_GPIO_Init+0x2fc>)
 8022ca2:	f043 0301 	orr.w	r3, r3, #1
 8022ca6:	6613      	str	r3, [r2, #96]	@ 0x60
 8022ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8022e24 <HAL_GPIO_Init+0x2fc>)
 8022caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022cac:	f003 0301 	and.w	r3, r3, #1
 8022cb0:	60bb      	str	r3, [r7, #8]
 8022cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8022cb4:	4a5c      	ldr	r2, [pc, #368]	@ (8022e28 <HAL_GPIO_Init+0x300>)
 8022cb6:	697b      	ldr	r3, [r7, #20]
 8022cb8:	089b      	lsrs	r3, r3, #2
 8022cba:	3302      	adds	r3, #2
 8022cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8022cc2:	697b      	ldr	r3, [r7, #20]
 8022cc4:	f003 0303 	and.w	r3, r3, #3
 8022cc8:	009b      	lsls	r3, r3, #2
 8022cca:	220f      	movs	r2, #15
 8022ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8022cd0:	43db      	mvns	r3, r3
 8022cd2:	693a      	ldr	r2, [r7, #16]
 8022cd4:	4013      	ands	r3, r2
 8022cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8022cde:	d02b      	beq.n	8022d38 <HAL_GPIO_Init+0x210>
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	4a52      	ldr	r2, [pc, #328]	@ (8022e2c <HAL_GPIO_Init+0x304>)
 8022ce4:	4293      	cmp	r3, r2
 8022ce6:	d025      	beq.n	8022d34 <HAL_GPIO_Init+0x20c>
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	4a51      	ldr	r2, [pc, #324]	@ (8022e30 <HAL_GPIO_Init+0x308>)
 8022cec:	4293      	cmp	r3, r2
 8022cee:	d01f      	beq.n	8022d30 <HAL_GPIO_Init+0x208>
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	4a50      	ldr	r2, [pc, #320]	@ (8022e34 <HAL_GPIO_Init+0x30c>)
 8022cf4:	4293      	cmp	r3, r2
 8022cf6:	d019      	beq.n	8022d2c <HAL_GPIO_Init+0x204>
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	4a4f      	ldr	r2, [pc, #316]	@ (8022e38 <HAL_GPIO_Init+0x310>)
 8022cfc:	4293      	cmp	r3, r2
 8022cfe:	d013      	beq.n	8022d28 <HAL_GPIO_Init+0x200>
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	4a4e      	ldr	r2, [pc, #312]	@ (8022e3c <HAL_GPIO_Init+0x314>)
 8022d04:	4293      	cmp	r3, r2
 8022d06:	d00d      	beq.n	8022d24 <HAL_GPIO_Init+0x1fc>
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	4a4d      	ldr	r2, [pc, #308]	@ (8022e40 <HAL_GPIO_Init+0x318>)
 8022d0c:	4293      	cmp	r3, r2
 8022d0e:	d007      	beq.n	8022d20 <HAL_GPIO_Init+0x1f8>
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	4a4c      	ldr	r2, [pc, #304]	@ (8022e44 <HAL_GPIO_Init+0x31c>)
 8022d14:	4293      	cmp	r3, r2
 8022d16:	d101      	bne.n	8022d1c <HAL_GPIO_Init+0x1f4>
 8022d18:	2307      	movs	r3, #7
 8022d1a:	e00e      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d1c:	2308      	movs	r3, #8
 8022d1e:	e00c      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d20:	2306      	movs	r3, #6
 8022d22:	e00a      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d24:	2305      	movs	r3, #5
 8022d26:	e008      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d28:	2304      	movs	r3, #4
 8022d2a:	e006      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d2c:	2303      	movs	r3, #3
 8022d2e:	e004      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d30:	2302      	movs	r3, #2
 8022d32:	e002      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d34:	2301      	movs	r3, #1
 8022d36:	e000      	b.n	8022d3a <HAL_GPIO_Init+0x212>
 8022d38:	2300      	movs	r3, #0
 8022d3a:	697a      	ldr	r2, [r7, #20]
 8022d3c:	f002 0203 	and.w	r2, r2, #3
 8022d40:	0092      	lsls	r2, r2, #2
 8022d42:	4093      	lsls	r3, r2
 8022d44:	693a      	ldr	r2, [r7, #16]
 8022d46:	4313      	orrs	r3, r2
 8022d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8022d4a:	4937      	ldr	r1, [pc, #220]	@ (8022e28 <HAL_GPIO_Init+0x300>)
 8022d4c:	697b      	ldr	r3, [r7, #20]
 8022d4e:	089b      	lsrs	r3, r3, #2
 8022d50:	3302      	adds	r3, #2
 8022d52:	693a      	ldr	r2, [r7, #16]
 8022d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8022d58:	4b3b      	ldr	r3, [pc, #236]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022d5a:	689b      	ldr	r3, [r3, #8]
 8022d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	43db      	mvns	r3, r3
 8022d62:	693a      	ldr	r2, [r7, #16]
 8022d64:	4013      	ands	r3, r2
 8022d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8022d68:	683b      	ldr	r3, [r7, #0]
 8022d6a:	685b      	ldr	r3, [r3, #4]
 8022d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	d003      	beq.n	8022d7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8022d74:	693a      	ldr	r2, [r7, #16]
 8022d76:	68fb      	ldr	r3, [r7, #12]
 8022d78:	4313      	orrs	r3, r2
 8022d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8022d7c:	4a32      	ldr	r2, [pc, #200]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022d7e:	693b      	ldr	r3, [r7, #16]
 8022d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8022d82:	4b31      	ldr	r3, [pc, #196]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022d84:	68db      	ldr	r3, [r3, #12]
 8022d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8022d88:	68fb      	ldr	r3, [r7, #12]
 8022d8a:	43db      	mvns	r3, r3
 8022d8c:	693a      	ldr	r2, [r7, #16]
 8022d8e:	4013      	ands	r3, r2
 8022d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8022d92:	683b      	ldr	r3, [r7, #0]
 8022d94:	685b      	ldr	r3, [r3, #4]
 8022d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d003      	beq.n	8022da6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8022d9e:	693a      	ldr	r2, [r7, #16]
 8022da0:	68fb      	ldr	r3, [r7, #12]
 8022da2:	4313      	orrs	r3, r2
 8022da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8022da6:	4a28      	ldr	r2, [pc, #160]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022da8:	693b      	ldr	r3, [r7, #16]
 8022daa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8022dac:	4b26      	ldr	r3, [pc, #152]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022dae:	685b      	ldr	r3, [r3, #4]
 8022db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	43db      	mvns	r3, r3
 8022db6:	693a      	ldr	r2, [r7, #16]
 8022db8:	4013      	ands	r3, r2
 8022dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8022dbc:	683b      	ldr	r3, [r7, #0]
 8022dbe:	685b      	ldr	r3, [r3, #4]
 8022dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022dc4:	2b00      	cmp	r3, #0
 8022dc6:	d003      	beq.n	8022dd0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8022dc8:	693a      	ldr	r2, [r7, #16]
 8022dca:	68fb      	ldr	r3, [r7, #12]
 8022dcc:	4313      	orrs	r3, r2
 8022dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8022dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022dd2:	693b      	ldr	r3, [r7, #16]
 8022dd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8022dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8022ddc:	68fb      	ldr	r3, [r7, #12]
 8022dde:	43db      	mvns	r3, r3
 8022de0:	693a      	ldr	r2, [r7, #16]
 8022de2:	4013      	ands	r3, r2
 8022de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8022de6:	683b      	ldr	r3, [r7, #0]
 8022de8:	685b      	ldr	r3, [r3, #4]
 8022dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	d003      	beq.n	8022dfa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8022df2:	693a      	ldr	r2, [r7, #16]
 8022df4:	68fb      	ldr	r3, [r7, #12]
 8022df6:	4313      	orrs	r3, r2
 8022df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8022dfa:	4a13      	ldr	r2, [pc, #76]	@ (8022e48 <HAL_GPIO_Init+0x320>)
 8022dfc:	693b      	ldr	r3, [r7, #16]
 8022dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8022e00:	697b      	ldr	r3, [r7, #20]
 8022e02:	3301      	adds	r3, #1
 8022e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8022e06:	683b      	ldr	r3, [r7, #0]
 8022e08:	681a      	ldr	r2, [r3, #0]
 8022e0a:	697b      	ldr	r3, [r7, #20]
 8022e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	f47f ae91 	bne.w	8022b38 <HAL_GPIO_Init+0x10>
  }
}
 8022e16:	bf00      	nop
 8022e18:	bf00      	nop
 8022e1a:	371c      	adds	r7, #28
 8022e1c:	46bd      	mov	sp, r7
 8022e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e22:	4770      	bx	lr
 8022e24:	40021000 	.word	0x40021000
 8022e28:	40010000 	.word	0x40010000
 8022e2c:	48000400 	.word	0x48000400
 8022e30:	48000800 	.word	0x48000800
 8022e34:	48000c00 	.word	0x48000c00
 8022e38:	48001000 	.word	0x48001000
 8022e3c:	48001400 	.word	0x48001400
 8022e40:	48001800 	.word	0x48001800
 8022e44:	48001c00 	.word	0x48001c00
 8022e48:	40010400 	.word	0x40010400

08022e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022e4c:	b480      	push	{r7}
 8022e4e:	b083      	sub	sp, #12
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	6078      	str	r0, [r7, #4]
 8022e54:	460b      	mov	r3, r1
 8022e56:	807b      	strh	r3, [r7, #2]
 8022e58:	4613      	mov	r3, r2
 8022e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022e5c:	787b      	ldrb	r3, [r7, #1]
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d003      	beq.n	8022e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8022e62:	887a      	ldrh	r2, [r7, #2]
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8022e68:	e002      	b.n	8022e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8022e6a:	887a      	ldrh	r2, [r7, #2]
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8022e70:	bf00      	nop
 8022e72:	370c      	adds	r7, #12
 8022e74:	46bd      	mov	sp, r7
 8022e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e7a:	4770      	bx	lr

08022e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8022e7c:	b580      	push	{r7, lr}
 8022e7e:	b082      	sub	sp, #8
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	4603      	mov	r3, r0
 8022e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8022e86:	4b08      	ldr	r3, [pc, #32]	@ (8022ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8022e88:	695a      	ldr	r2, [r3, #20]
 8022e8a:	88fb      	ldrh	r3, [r7, #6]
 8022e8c:	4013      	ands	r3, r2
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	d006      	beq.n	8022ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8022e92:	4a05      	ldr	r2, [pc, #20]	@ (8022ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8022e94:	88fb      	ldrh	r3, [r7, #6]
 8022e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8022e98:	88fb      	ldrh	r3, [r7, #6]
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f000 f806 	bl	8022eac <HAL_GPIO_EXTI_Callback>
  }
}
 8022ea0:	bf00      	nop
 8022ea2:	3708      	adds	r7, #8
 8022ea4:	46bd      	mov	sp, r7
 8022ea6:	bd80      	pop	{r7, pc}
 8022ea8:	40010400 	.word	0x40010400

08022eac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8022eac:	b480      	push	{r7}
 8022eae:	b083      	sub	sp, #12
 8022eb0:	af00      	add	r7, sp, #0
 8022eb2:	4603      	mov	r3, r0
 8022eb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8022eb6:	bf00      	nop
 8022eb8:	370c      	adds	r7, #12
 8022eba:	46bd      	mov	sp, r7
 8022ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ec0:	4770      	bx	lr

08022ec2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8022ec2:	b580      	push	{r7, lr}
 8022ec4:	b082      	sub	sp, #8
 8022ec6:	af00      	add	r7, sp, #0
 8022ec8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8022eca:	687b      	ldr	r3, [r7, #4]
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d101      	bne.n	8022ed4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8022ed0:	2301      	movs	r3, #1
 8022ed2:	e08d      	b.n	8022ff0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8022eda:	b2db      	uxtb	r3, r3
 8022edc:	2b00      	cmp	r3, #0
 8022ede:	d106      	bne.n	8022eee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8022ee0:	687b      	ldr	r3, [r7, #4]
 8022ee2:	2200      	movs	r2, #0
 8022ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8022ee8:	6878      	ldr	r0, [r7, #4]
 8022eea:	f7fe f8bf 	bl	802106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	2224      	movs	r2, #36	@ 0x24
 8022ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	681a      	ldr	r2, [r3, #0]
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	681b      	ldr	r3, [r3, #0]
 8022f00:	f022 0201 	bic.w	r2, r2, #1
 8022f04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	685a      	ldr	r2, [r3, #4]
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8022f12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	689a      	ldr	r2, [r3, #8]
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	681b      	ldr	r3, [r3, #0]
 8022f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8022f22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	68db      	ldr	r3, [r3, #12]
 8022f28:	2b01      	cmp	r3, #1
 8022f2a:	d107      	bne.n	8022f3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	689a      	ldr	r2, [r3, #8]
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	681b      	ldr	r3, [r3, #0]
 8022f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8022f38:	609a      	str	r2, [r3, #8]
 8022f3a:	e006      	b.n	8022f4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	689a      	ldr	r2, [r3, #8]
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8022f48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	68db      	ldr	r3, [r3, #12]
 8022f4e:	2b02      	cmp	r3, #2
 8022f50:	d108      	bne.n	8022f64 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	681b      	ldr	r3, [r3, #0]
 8022f56:	685a      	ldr	r2, [r3, #4]
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8022f60:	605a      	str	r2, [r3, #4]
 8022f62:	e007      	b.n	8022f74 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	681b      	ldr	r3, [r3, #0]
 8022f68:	685a      	ldr	r2, [r3, #4]
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8022f72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	685b      	ldr	r3, [r3, #4]
 8022f7a:	687a      	ldr	r2, [r7, #4]
 8022f7c:	6812      	ldr	r2, [r2, #0]
 8022f7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8022f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8022f86:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	681b      	ldr	r3, [r3, #0]
 8022f8c:	68da      	ldr	r2, [r3, #12]
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8022f96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	691a      	ldr	r2, [r3, #16]
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	695b      	ldr	r3, [r3, #20]
 8022fa0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	699b      	ldr	r3, [r3, #24]
 8022fa8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	681b      	ldr	r3, [r3, #0]
 8022fae:	430a      	orrs	r2, r1
 8022fb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8022fb2:	687b      	ldr	r3, [r7, #4]
 8022fb4:	69d9      	ldr	r1, [r3, #28]
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	6a1a      	ldr	r2, [r3, #32]
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	681b      	ldr	r3, [r3, #0]
 8022fbe:	430a      	orrs	r2, r1
 8022fc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	681b      	ldr	r3, [r3, #0]
 8022fc6:	681a      	ldr	r2, [r3, #0]
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	f042 0201 	orr.w	r2, r2, #1
 8022fd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	2200      	movs	r2, #0
 8022fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	2220      	movs	r2, #32
 8022fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	2200      	movs	r2, #0
 8022fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8022fe6:	687b      	ldr	r3, [r7, #4]
 8022fe8:	2200      	movs	r2, #0
 8022fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8022fee:	2300      	movs	r3, #0
}
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	3708      	adds	r7, #8
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	bd80      	pop	{r7, pc}

08022ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8022ff8:	b480      	push	{r7}
 8022ffa:	b083      	sub	sp, #12
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	6078      	str	r0, [r7, #4]
 8023000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8023008:	b2db      	uxtb	r3, r3
 802300a:	2b20      	cmp	r3, #32
 802300c:	d138      	bne.n	8023080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8023014:	2b01      	cmp	r3, #1
 8023016:	d101      	bne.n	802301c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8023018:	2302      	movs	r3, #2
 802301a:	e032      	b.n	8023082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	2201      	movs	r2, #1
 8023020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	2224      	movs	r2, #36	@ 0x24
 8023028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	681b      	ldr	r3, [r3, #0]
 8023030:	681a      	ldr	r2, [r3, #0]
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	681b      	ldr	r3, [r3, #0]
 8023036:	f022 0201 	bic.w	r2, r2, #1
 802303a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	681b      	ldr	r3, [r3, #0]
 8023040:	681a      	ldr	r2, [r3, #0]
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 802304a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	6819      	ldr	r1, [r3, #0]
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	681b      	ldr	r3, [r3, #0]
 8023056:	683a      	ldr	r2, [r7, #0]
 8023058:	430a      	orrs	r2, r1
 802305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802305c:	687b      	ldr	r3, [r7, #4]
 802305e:	681b      	ldr	r3, [r3, #0]
 8023060:	681a      	ldr	r2, [r3, #0]
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	681b      	ldr	r3, [r3, #0]
 8023066:	f042 0201 	orr.w	r2, r2, #1
 802306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	2220      	movs	r2, #32
 8023070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	2200      	movs	r2, #0
 8023078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 802307c:	2300      	movs	r3, #0
 802307e:	e000      	b.n	8023082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8023080:	2302      	movs	r3, #2
  }
}
 8023082:	4618      	mov	r0, r3
 8023084:	370c      	adds	r7, #12
 8023086:	46bd      	mov	sp, r7
 8023088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802308c:	4770      	bx	lr

0802308e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802308e:	b480      	push	{r7}
 8023090:	b085      	sub	sp, #20
 8023092:	af00      	add	r7, sp, #0
 8023094:	6078      	str	r0, [r7, #4]
 8023096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 802309e:	b2db      	uxtb	r3, r3
 80230a0:	2b20      	cmp	r3, #32
 80230a2:	d139      	bne.n	8023118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80230aa:	2b01      	cmp	r3, #1
 80230ac:	d101      	bne.n	80230b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80230ae:	2302      	movs	r3, #2
 80230b0:	e033      	b.n	802311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	2201      	movs	r2, #1
 80230b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	2224      	movs	r2, #36	@ 0x24
 80230be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	681a      	ldr	r2, [r3, #0]
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	f022 0201 	bic.w	r2, r2, #1
 80230d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80230da:	68fb      	ldr	r3, [r7, #12]
 80230dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80230e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80230e2:	683b      	ldr	r3, [r7, #0]
 80230e4:	021b      	lsls	r3, r3, #8
 80230e6:	68fa      	ldr	r2, [r7, #12]
 80230e8:	4313      	orrs	r3, r2
 80230ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	68fa      	ldr	r2, [r7, #12]
 80230f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	681b      	ldr	r3, [r3, #0]
 80230f8:	681a      	ldr	r2, [r3, #0]
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	f042 0201 	orr.w	r2, r2, #1
 8023102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	2220      	movs	r2, #32
 8023108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	2200      	movs	r2, #0
 8023110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8023114:	2300      	movs	r3, #0
 8023116:	e000      	b.n	802311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8023118:	2302      	movs	r3, #2
  }
}
 802311a:	4618      	mov	r0, r3
 802311c:	3714      	adds	r7, #20
 802311e:	46bd      	mov	sp, r7
 8023120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023124:	4770      	bx	lr
	...

08023128 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b086      	sub	sp, #24
 802312c:	af02      	add	r7, sp, #8
 802312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023130:	2300      	movs	r3, #0
 8023132:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8023134:	f7fe fbec 	bl	8021910 <HAL_GetTick>
 8023138:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	2b00      	cmp	r3, #0
 802313e:	d102      	bne.n	8023146 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8023140:	2301      	movs	r3, #1
 8023142:	73fb      	strb	r3, [r7, #15]
 8023144:	e092      	b.n	802326c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	2200      	movs	r2, #0
 802314a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023150:	2b00      	cmp	r3, #0
 8023152:	f040 808b 	bne.w	802326c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8023156:	6878      	ldr	r0, [r7, #4]
 8023158:	f7fe f82a 	bl	80211b0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 802315c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8023160:	6878      	ldr	r0, [r7, #4]
 8023162:	f000 f88b 	bl	802327c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	689a      	ldr	r2, [r3, #8]
 802316c:	4b42      	ldr	r3, [pc, #264]	@ (8023278 <HAL_OSPI_Init+0x150>)
 802316e:	4013      	ands	r3, r2
 8023170:	687a      	ldr	r2, [r7, #4]
 8023172:	68d1      	ldr	r1, [r2, #12]
 8023174:	687a      	ldr	r2, [r7, #4]
 8023176:	6912      	ldr	r2, [r2, #16]
 8023178:	3a01      	subs	r2, #1
 802317a:	0412      	lsls	r2, r2, #16
 802317c:	4311      	orrs	r1, r2
 802317e:	687a      	ldr	r2, [r7, #4]
 8023180:	6952      	ldr	r2, [r2, #20]
 8023182:	3a01      	subs	r2, #1
 8023184:	0212      	lsls	r2, r2, #8
 8023186:	4311      	orrs	r1, r2
 8023188:	687a      	ldr	r2, [r7, #4]
 802318a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802318c:	4311      	orrs	r1, r2
 802318e:	687a      	ldr	r2, [r7, #4]
 8023190:	69d2      	ldr	r2, [r2, #28]
 8023192:	4311      	orrs	r1, r2
 8023194:	687a      	ldr	r2, [r7, #4]
 8023196:	6812      	ldr	r2, [r2, #0]
 8023198:	430b      	orrs	r3, r1
 802319a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	0412      	lsls	r2, r2, #16
 80231a6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	681b      	ldr	r3, [r3, #0]
 80231ae:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	685b      	ldr	r3, [r3, #4]
 80231b6:	3b01      	subs	r3, #1
 80231b8:	021a      	lsls	r2, r3, #8
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	430a      	orrs	r2, r1
 80231c0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80231c6:	9300      	str	r3, [sp, #0]
 80231c8:	68bb      	ldr	r3, [r7, #8]
 80231ca:	2200      	movs	r2, #0
 80231cc:	2120      	movs	r1, #32
 80231ce:	6878      	ldr	r0, [r7, #4]
 80231d0:	f000 fb9c 	bl	802390c <OSPI_WaitFlagStateUntilTimeout>
 80231d4:	4603      	mov	r3, r0
 80231d6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80231d8:	7bfb      	ldrb	r3, [r7, #15]
 80231da:	2b00      	cmp	r3, #0
 80231dc:	d146      	bne.n	802326c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	68db      	ldr	r3, [r3, #12]
 80231e4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	6a1b      	ldr	r3, [r3, #32]
 80231ec:	1e5a      	subs	r2, r3, #1
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	430a      	orrs	r2, r1
 80231f4:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	681b      	ldr	r3, [r3, #0]
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8023200:	687b      	ldr	r3, [r7, #4]
 8023202:	689a      	ldr	r2, [r3, #8]
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	681b      	ldr	r3, [r3, #0]
 8023208:	430a      	orrs	r2, r1
 802320a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 802320c:	687b      	ldr	r3, [r7, #4]
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8023214:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802321c:	687b      	ldr	r3, [r7, #4]
 802321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023220:	431a      	orrs	r2, r3
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	681b      	ldr	r3, [r3, #0]
 8023226:	430a      	orrs	r2, r1
 8023228:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	681b      	ldr	r3, [r3, #0]
 8023230:	681a      	ldr	r2, [r3, #0]
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	681b      	ldr	r3, [r3, #0]
 8023236:	f042 0201 	orr.w	r2, r2, #1
 802323a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	699b      	ldr	r3, [r3, #24]
 8023240:	2b02      	cmp	r3, #2
 8023242:	d107      	bne.n	8023254 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	681b      	ldr	r3, [r3, #0]
 8023248:	689a      	ldr	r2, [r3, #8]
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	f042 0202 	orr.w	r2, r2, #2
 8023252:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8023254:	687b      	ldr	r3, [r7, #4]
 8023256:	68db      	ldr	r3, [r3, #12]
 8023258:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802325c:	d103      	bne.n	8023266 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	2201      	movs	r2, #1
 8023262:	645a      	str	r2, [r3, #68]	@ 0x44
 8023264:	e002      	b.n	802326c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	2202      	movs	r2, #2
 802326a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 802326c:	7bfb      	ldrb	r3, [r7, #15]
}
 802326e:	4618      	mov	r0, r3
 8023270:	3710      	adds	r7, #16
 8023272:	46bd      	mov	sp, r7
 8023274:	bd80      	pop	{r7, pc}
 8023276:	bf00      	nop
 8023278:	f8e0f8f4 	.word	0xf8e0f8f4

0802327c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 802327c:	b480      	push	{r7}
 802327e:	b083      	sub	sp, #12
 8023280:	af00      	add	r7, sp, #0
 8023282:	6078      	str	r0, [r7, #4]
 8023284:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	683a      	ldr	r2, [r7, #0]
 802328a:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 802328c:	2300      	movs	r3, #0
}
 802328e:	4618      	mov	r0, r3
 8023290:	370c      	adds	r7, #12
 8023292:	46bd      	mov	sp, r7
 8023294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023298:	4770      	bx	lr
	...

0802329c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b092      	sub	sp, #72	@ 0x48
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	60f8      	str	r0, [r7, #12]
 80232a4:	60b9      	str	r1, [r7, #8]
 80232a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80232a8:	2300      	movs	r3, #0
 80232aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80232ae:	2300      	movs	r3, #0
 80232b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80232b4:	68fb      	ldr	r3, [r7, #12]
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	4a08      	ldr	r2, [pc, #32]	@ (80232dc <HAL_OSPIM_Config+0x40>)
 80232ba:	4293      	cmp	r3, r2
 80232bc:	d105      	bne.n	80232ca <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80232be:	2300      	movs	r3, #0
 80232c0:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80232c2:	2301      	movs	r3, #1
 80232c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80232c8:	e004      	b.n	80232d4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80232ca:	2301      	movs	r3, #1
 80232cc:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80232ce:	2300      	movs	r3, #0
 80232d0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80232d4:	2300      	movs	r3, #0
 80232d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80232da:	e01f      	b.n	802331c <HAL_OSPIM_Config+0x80>
 80232dc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80232e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80232e4:	3301      	adds	r3, #1
 80232e6:	b2d8      	uxtb	r0, r3
 80232e8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80232ec:	f107 0114 	add.w	r1, r7, #20
 80232f0:	4613      	mov	r3, r2
 80232f2:	009b      	lsls	r3, r3, #2
 80232f4:	4413      	add	r3, r2
 80232f6:	009b      	lsls	r3, r3, #2
 80232f8:	440b      	add	r3, r1
 80232fa:	4619      	mov	r1, r3
 80232fc:	f000 fb3e 	bl	802397c <OSPIM_GetConfig>
 8023300:	4603      	mov	r3, r0
 8023302:	2b00      	cmp	r3, #0
 8023304:	d005      	beq.n	8023312 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8023306:	2301      	movs	r3, #1
 8023308:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 802330c:	68fb      	ldr	r3, [r7, #12]
 802330e:	2208      	movs	r2, #8
 8023310:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8023312:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8023316:	3301      	adds	r3, #1
 8023318:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 802331c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8023320:	2b01      	cmp	r3, #1
 8023322:	d9dd      	bls.n	80232e0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8023324:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8023328:	2b00      	cmp	r3, #0
 802332a:	f040 82e3 	bne.w	80238f4 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 802332e:	4bc5      	ldr	r3, [pc, #788]	@ (8023644 <HAL_OSPIM_Config+0x3a8>)
 8023330:	681b      	ldr	r3, [r3, #0]
 8023332:	f003 0301 	and.w	r3, r3, #1
 8023336:	2b00      	cmp	r3, #0
 8023338:	d00b      	beq.n	8023352 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 802333a:	4bc2      	ldr	r3, [pc, #776]	@ (8023644 <HAL_OSPIM_Config+0x3a8>)
 802333c:	681b      	ldr	r3, [r3, #0]
 802333e:	4ac1      	ldr	r2, [pc, #772]	@ (8023644 <HAL_OSPIM_Config+0x3a8>)
 8023340:	f023 0301 	bic.w	r3, r3, #1
 8023344:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8023346:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 802334a:	f043 0301 	orr.w	r3, r3, #1
 802334e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8023352:	4bbd      	ldr	r3, [pc, #756]	@ (8023648 <HAL_OSPIM_Config+0x3ac>)
 8023354:	681b      	ldr	r3, [r3, #0]
 8023356:	f003 0301 	and.w	r3, r3, #1
 802335a:	2b00      	cmp	r3, #0
 802335c:	d00b      	beq.n	8023376 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 802335e:	4bba      	ldr	r3, [pc, #744]	@ (8023648 <HAL_OSPIM_Config+0x3ac>)
 8023360:	681b      	ldr	r3, [r3, #0]
 8023362:	4ab9      	ldr	r2, [pc, #740]	@ (8023648 <HAL_OSPIM_Config+0x3ac>)
 8023364:	f023 0301 	bic.w	r3, r3, #1
 8023368:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 802336a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 802336e:	f043 0302 	orr.w	r3, r3, #2
 8023372:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8023376:	49b5      	ldr	r1, [pc, #724]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 8023378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802337a:	4613      	mov	r3, r2
 802337c:	009b      	lsls	r3, r3, #2
 802337e:	4413      	add	r3, r2
 8023380:	009b      	lsls	r3, r3, #2
 8023382:	3348      	adds	r3, #72	@ 0x48
 8023384:	443b      	add	r3, r7
 8023386:	3b2c      	subs	r3, #44	@ 0x2c
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	3b01      	subs	r3, #1
 802338c:	009b      	lsls	r3, r3, #2
 802338e:	440b      	add	r3, r1
 8023390:	6859      	ldr	r1, [r3, #4]
 8023392:	48ae      	ldr	r0, [pc, #696]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 8023394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023396:	4613      	mov	r3, r2
 8023398:	009b      	lsls	r3, r3, #2
 802339a:	4413      	add	r3, r2
 802339c:	009b      	lsls	r3, r3, #2
 802339e:	3348      	adds	r3, #72	@ 0x48
 80233a0:	443b      	add	r3, r7
 80233a2:	3b2c      	subs	r3, #44	@ 0x2c
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	3b01      	subs	r3, #1
 80233a8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80233ac:	009b      	lsls	r3, r3, #2
 80233ae:	4403      	add	r3, r0
 80233b0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80233b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80233b4:	4613      	mov	r3, r2
 80233b6:	009b      	lsls	r3, r3, #2
 80233b8:	4413      	add	r3, r2
 80233ba:	009b      	lsls	r3, r3, #2
 80233bc:	3348      	adds	r3, #72	@ 0x48
 80233be:	443b      	add	r3, r7
 80233c0:	3b34      	subs	r3, #52	@ 0x34
 80233c2:	681b      	ldr	r3, [r3, #0]
 80233c4:	2b00      	cmp	r3, #0
 80233c6:	f000 80a1 	beq.w	802350c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80233ca:	49a0      	ldr	r1, [pc, #640]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80233cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80233ce:	4613      	mov	r3, r2
 80233d0:	009b      	lsls	r3, r3, #2
 80233d2:	4413      	add	r3, r2
 80233d4:	009b      	lsls	r3, r3, #2
 80233d6:	3348      	adds	r3, #72	@ 0x48
 80233d8:	443b      	add	r3, r7
 80233da:	3b34      	subs	r3, #52	@ 0x34
 80233dc:	681b      	ldr	r3, [r3, #0]
 80233de:	3b01      	subs	r3, #1
 80233e0:	009b      	lsls	r3, r3, #2
 80233e2:	440b      	add	r3, r1
 80233e4:	6859      	ldr	r1, [r3, #4]
 80233e6:	4899      	ldr	r0, [pc, #612]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80233e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80233ea:	4613      	mov	r3, r2
 80233ec:	009b      	lsls	r3, r3, #2
 80233ee:	4413      	add	r3, r2
 80233f0:	009b      	lsls	r3, r3, #2
 80233f2:	3348      	adds	r3, #72	@ 0x48
 80233f4:	443b      	add	r3, r7
 80233f6:	3b34      	subs	r3, #52	@ 0x34
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	3b01      	subs	r3, #1
 80233fc:	f021 0201 	bic.w	r2, r1, #1
 8023400:	009b      	lsls	r3, r3, #2
 8023402:	4403      	add	r3, r0
 8023404:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8023406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023408:	4613      	mov	r3, r2
 802340a:	009b      	lsls	r3, r3, #2
 802340c:	4413      	add	r3, r2
 802340e:	009b      	lsls	r3, r3, #2
 8023410:	3348      	adds	r3, #72	@ 0x48
 8023412:	443b      	add	r3, r7
 8023414:	3b30      	subs	r3, #48	@ 0x30
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	2b00      	cmp	r3, #0
 802341a:	d01d      	beq.n	8023458 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 802341c:	498b      	ldr	r1, [pc, #556]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 802341e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023420:	4613      	mov	r3, r2
 8023422:	009b      	lsls	r3, r3, #2
 8023424:	4413      	add	r3, r2
 8023426:	009b      	lsls	r3, r3, #2
 8023428:	3348      	adds	r3, #72	@ 0x48
 802342a:	443b      	add	r3, r7
 802342c:	3b30      	subs	r3, #48	@ 0x30
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	3b01      	subs	r3, #1
 8023432:	009b      	lsls	r3, r3, #2
 8023434:	440b      	add	r3, r1
 8023436:	6859      	ldr	r1, [r3, #4]
 8023438:	4884      	ldr	r0, [pc, #528]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 802343a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802343c:	4613      	mov	r3, r2
 802343e:	009b      	lsls	r3, r3, #2
 8023440:	4413      	add	r3, r2
 8023442:	009b      	lsls	r3, r3, #2
 8023444:	3348      	adds	r3, #72	@ 0x48
 8023446:	443b      	add	r3, r7
 8023448:	3b30      	subs	r3, #48	@ 0x30
 802344a:	681b      	ldr	r3, [r3, #0]
 802344c:	3b01      	subs	r3, #1
 802344e:	f021 0210 	bic.w	r2, r1, #16
 8023452:	009b      	lsls	r3, r3, #2
 8023454:	4403      	add	r3, r0
 8023456:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8023458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802345a:	4613      	mov	r3, r2
 802345c:	009b      	lsls	r3, r3, #2
 802345e:	4413      	add	r3, r2
 8023460:	009b      	lsls	r3, r3, #2
 8023462:	3348      	adds	r3, #72	@ 0x48
 8023464:	443b      	add	r3, r7
 8023466:	3b28      	subs	r3, #40	@ 0x28
 8023468:	681b      	ldr	r3, [r3, #0]
 802346a:	2b00      	cmp	r3, #0
 802346c:	d021      	beq.n	80234b2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 802346e:	4977      	ldr	r1, [pc, #476]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 8023470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023472:	4613      	mov	r3, r2
 8023474:	009b      	lsls	r3, r3, #2
 8023476:	4413      	add	r3, r2
 8023478:	009b      	lsls	r3, r3, #2
 802347a:	3348      	adds	r3, #72	@ 0x48
 802347c:	443b      	add	r3, r7
 802347e:	3b28      	subs	r3, #40	@ 0x28
 8023480:	681b      	ldr	r3, [r3, #0]
 8023482:	3b01      	subs	r3, #1
 8023484:	f003 0301 	and.w	r3, r3, #1
 8023488:	009b      	lsls	r3, r3, #2
 802348a:	440b      	add	r3, r1
 802348c:	6859      	ldr	r1, [r3, #4]
 802348e:	486f      	ldr	r0, [pc, #444]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 8023490:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023492:	4613      	mov	r3, r2
 8023494:	009b      	lsls	r3, r3, #2
 8023496:	4413      	add	r3, r2
 8023498:	009b      	lsls	r3, r3, #2
 802349a:	3348      	adds	r3, #72	@ 0x48
 802349c:	443b      	add	r3, r7
 802349e:	3b28      	subs	r3, #40	@ 0x28
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	3b01      	subs	r3, #1
 80234a4:	f003 0301 	and.w	r3, r3, #1
 80234a8:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80234ac:	009b      	lsls	r3, r3, #2
 80234ae:	4403      	add	r3, r0
 80234b0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80234b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80234b4:	4613      	mov	r3, r2
 80234b6:	009b      	lsls	r3, r3, #2
 80234b8:	4413      	add	r3, r2
 80234ba:	009b      	lsls	r3, r3, #2
 80234bc:	3348      	adds	r3, #72	@ 0x48
 80234be:	443b      	add	r3, r7
 80234c0:	3b24      	subs	r3, #36	@ 0x24
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d021      	beq.n	802350c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80234c8:	4960      	ldr	r1, [pc, #384]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80234ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80234cc:	4613      	mov	r3, r2
 80234ce:	009b      	lsls	r3, r3, #2
 80234d0:	4413      	add	r3, r2
 80234d2:	009b      	lsls	r3, r3, #2
 80234d4:	3348      	adds	r3, #72	@ 0x48
 80234d6:	443b      	add	r3, r7
 80234d8:	3b24      	subs	r3, #36	@ 0x24
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	3b01      	subs	r3, #1
 80234de:	f003 0301 	and.w	r3, r3, #1
 80234e2:	009b      	lsls	r3, r3, #2
 80234e4:	440b      	add	r3, r1
 80234e6:	6859      	ldr	r1, [r3, #4]
 80234e8:	4858      	ldr	r0, [pc, #352]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80234ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80234ec:	4613      	mov	r3, r2
 80234ee:	009b      	lsls	r3, r3, #2
 80234f0:	4413      	add	r3, r2
 80234f2:	009b      	lsls	r3, r3, #2
 80234f4:	3348      	adds	r3, #72	@ 0x48
 80234f6:	443b      	add	r3, r7
 80234f8:	3b24      	subs	r3, #36	@ 0x24
 80234fa:	681b      	ldr	r3, [r3, #0]
 80234fc:	3b01      	subs	r3, #1
 80234fe:	f003 0301 	and.w	r3, r3, #1
 8023502:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8023506:	009b      	lsls	r3, r3, #2
 8023508:	4403      	add	r3, r0
 802350a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 802350c:	68bb      	ldr	r3, [r7, #8]
 802350e:	6819      	ldr	r1, [r3, #0]
 8023510:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023514:	4613      	mov	r3, r2
 8023516:	009b      	lsls	r3, r3, #2
 8023518:	4413      	add	r3, r2
 802351a:	009b      	lsls	r3, r3, #2
 802351c:	3348      	adds	r3, #72	@ 0x48
 802351e:	443b      	add	r3, r7
 8023520:	3b34      	subs	r3, #52	@ 0x34
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	4299      	cmp	r1, r3
 8023526:	d03c      	beq.n	80235a2 <HAL_OSPIM_Config+0x306>
 8023528:	68bb      	ldr	r3, [r7, #8]
 802352a:	6899      	ldr	r1, [r3, #8]
 802352c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023530:	4613      	mov	r3, r2
 8023532:	009b      	lsls	r3, r3, #2
 8023534:	4413      	add	r3, r2
 8023536:	009b      	lsls	r3, r3, #2
 8023538:	3348      	adds	r3, #72	@ 0x48
 802353a:	443b      	add	r3, r7
 802353c:	3b2c      	subs	r3, #44	@ 0x2c
 802353e:	681b      	ldr	r3, [r3, #0]
 8023540:	4299      	cmp	r1, r3
 8023542:	d02e      	beq.n	80235a2 <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8023544:	68bb      	ldr	r3, [r7, #8]
 8023546:	6859      	ldr	r1, [r3, #4]
 8023548:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802354c:	4613      	mov	r3, r2
 802354e:	009b      	lsls	r3, r3, #2
 8023550:	4413      	add	r3, r2
 8023552:	009b      	lsls	r3, r3, #2
 8023554:	3348      	adds	r3, #72	@ 0x48
 8023556:	443b      	add	r3, r7
 8023558:	3b30      	subs	r3, #48	@ 0x30
 802355a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 802355c:	4299      	cmp	r1, r3
 802355e:	d103      	bne.n	8023568 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8023560:	68bb      	ldr	r3, [r7, #8]
 8023562:	685b      	ldr	r3, [r3, #4]
 8023564:	2b00      	cmp	r3, #0
 8023566:	d11c      	bne.n	80235a2 <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8023568:	68bb      	ldr	r3, [r7, #8]
 802356a:	68d9      	ldr	r1, [r3, #12]
 802356c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023570:	4613      	mov	r3, r2
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	4413      	add	r3, r2
 8023576:	009b      	lsls	r3, r3, #2
 8023578:	3348      	adds	r3, #72	@ 0x48
 802357a:	443b      	add	r3, r7
 802357c:	3b28      	subs	r3, #40	@ 0x28
 802357e:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8023580:	4299      	cmp	r1, r3
 8023582:	d00e      	beq.n	80235a2 <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8023584:	68bb      	ldr	r3, [r7, #8]
 8023586:	6919      	ldr	r1, [r3, #16]
 8023588:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802358c:	4613      	mov	r3, r2
 802358e:	009b      	lsls	r3, r3, #2
 8023590:	4413      	add	r3, r2
 8023592:	009b      	lsls	r3, r3, #2
 8023594:	3348      	adds	r3, #72	@ 0x48
 8023596:	443b      	add	r3, r7
 8023598:	3b24      	subs	r3, #36	@ 0x24
 802359a:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 802359c:	4299      	cmp	r1, r3
 802359e:	f040 80d4 	bne.w	802374a <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80235a2:	492a      	ldr	r1, [pc, #168]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80235a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80235a8:	4613      	mov	r3, r2
 80235aa:	009b      	lsls	r3, r3, #2
 80235ac:	4413      	add	r3, r2
 80235ae:	009b      	lsls	r3, r3, #2
 80235b0:	3348      	adds	r3, #72	@ 0x48
 80235b2:	443b      	add	r3, r7
 80235b4:	3b34      	subs	r3, #52	@ 0x34
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	3b01      	subs	r3, #1
 80235ba:	009b      	lsls	r3, r3, #2
 80235bc:	440b      	add	r3, r1
 80235be:	6859      	ldr	r1, [r3, #4]
 80235c0:	4822      	ldr	r0, [pc, #136]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80235c2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80235c6:	4613      	mov	r3, r2
 80235c8:	009b      	lsls	r3, r3, #2
 80235ca:	4413      	add	r3, r2
 80235cc:	009b      	lsls	r3, r3, #2
 80235ce:	3348      	adds	r3, #72	@ 0x48
 80235d0:	443b      	add	r3, r7
 80235d2:	3b34      	subs	r3, #52	@ 0x34
 80235d4:	681b      	ldr	r3, [r3, #0]
 80235d6:	3b01      	subs	r3, #1
 80235d8:	f021 0201 	bic.w	r2, r1, #1
 80235dc:	009b      	lsls	r3, r3, #2
 80235de:	4403      	add	r3, r0
 80235e0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80235e2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80235e6:	4613      	mov	r3, r2
 80235e8:	009b      	lsls	r3, r3, #2
 80235ea:	4413      	add	r3, r2
 80235ec:	009b      	lsls	r3, r3, #2
 80235ee:	3348      	adds	r3, #72	@ 0x48
 80235f0:	443b      	add	r3, r7
 80235f2:	3b30      	subs	r3, #48	@ 0x30
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d01f      	beq.n	802363a <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80235fa:	4914      	ldr	r1, [pc, #80]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 80235fc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023600:	4613      	mov	r3, r2
 8023602:	009b      	lsls	r3, r3, #2
 8023604:	4413      	add	r3, r2
 8023606:	009b      	lsls	r3, r3, #2
 8023608:	3348      	adds	r3, #72	@ 0x48
 802360a:	443b      	add	r3, r7
 802360c:	3b30      	subs	r3, #48	@ 0x30
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	3b01      	subs	r3, #1
 8023612:	009b      	lsls	r3, r3, #2
 8023614:	440b      	add	r3, r1
 8023616:	6859      	ldr	r1, [r3, #4]
 8023618:	480c      	ldr	r0, [pc, #48]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 802361a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802361e:	4613      	mov	r3, r2
 8023620:	009b      	lsls	r3, r3, #2
 8023622:	4413      	add	r3, r2
 8023624:	009b      	lsls	r3, r3, #2
 8023626:	3348      	adds	r3, #72	@ 0x48
 8023628:	443b      	add	r3, r7
 802362a:	3b30      	subs	r3, #48	@ 0x30
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	3b01      	subs	r3, #1
 8023630:	f021 0210 	bic.w	r2, r1, #16
 8023634:	009b      	lsls	r3, r3, #2
 8023636:	4403      	add	r3, r0
 8023638:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 802363a:	4904      	ldr	r1, [pc, #16]	@ (802364c <HAL_OSPIM_Config+0x3b0>)
 802363c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023640:	e006      	b.n	8023650 <HAL_OSPIM_Config+0x3b4>
 8023642:	bf00      	nop
 8023644:	a0001000 	.word	0xa0001000
 8023648:	a0001400 	.word	0xa0001400
 802364c:	50061c00 	.word	0x50061c00
 8023650:	4613      	mov	r3, r2
 8023652:	009b      	lsls	r3, r3, #2
 8023654:	4413      	add	r3, r2
 8023656:	009b      	lsls	r3, r3, #2
 8023658:	3348      	adds	r3, #72	@ 0x48
 802365a:	443b      	add	r3, r7
 802365c:	3b2c      	subs	r3, #44	@ 0x2c
 802365e:	681b      	ldr	r3, [r3, #0]
 8023660:	3b01      	subs	r3, #1
 8023662:	009b      	lsls	r3, r3, #2
 8023664:	440b      	add	r3, r1
 8023666:	6859      	ldr	r1, [r3, #4]
 8023668:	48a5      	ldr	r0, [pc, #660]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 802366a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802366e:	4613      	mov	r3, r2
 8023670:	009b      	lsls	r3, r3, #2
 8023672:	4413      	add	r3, r2
 8023674:	009b      	lsls	r3, r3, #2
 8023676:	3348      	adds	r3, #72	@ 0x48
 8023678:	443b      	add	r3, r7
 802367a:	3b2c      	subs	r3, #44	@ 0x2c
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	3b01      	subs	r3, #1
 8023680:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8023684:	009b      	lsls	r3, r3, #2
 8023686:	4403      	add	r3, r0
 8023688:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 802368a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802368e:	4613      	mov	r3, r2
 8023690:	009b      	lsls	r3, r3, #2
 8023692:	4413      	add	r3, r2
 8023694:	009b      	lsls	r3, r3, #2
 8023696:	3348      	adds	r3, #72	@ 0x48
 8023698:	443b      	add	r3, r7
 802369a:	3b28      	subs	r3, #40	@ 0x28
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	2b00      	cmp	r3, #0
 80236a0:	d023      	beq.n	80236ea <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80236a2:	4997      	ldr	r1, [pc, #604]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80236a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80236a8:	4613      	mov	r3, r2
 80236aa:	009b      	lsls	r3, r3, #2
 80236ac:	4413      	add	r3, r2
 80236ae:	009b      	lsls	r3, r3, #2
 80236b0:	3348      	adds	r3, #72	@ 0x48
 80236b2:	443b      	add	r3, r7
 80236b4:	3b28      	subs	r3, #40	@ 0x28
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	3b01      	subs	r3, #1
 80236ba:	f003 0301 	and.w	r3, r3, #1
 80236be:	009b      	lsls	r3, r3, #2
 80236c0:	440b      	add	r3, r1
 80236c2:	6859      	ldr	r1, [r3, #4]
 80236c4:	488e      	ldr	r0, [pc, #568]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80236c6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80236ca:	4613      	mov	r3, r2
 80236cc:	009b      	lsls	r3, r3, #2
 80236ce:	4413      	add	r3, r2
 80236d0:	009b      	lsls	r3, r3, #2
 80236d2:	3348      	adds	r3, #72	@ 0x48
 80236d4:	443b      	add	r3, r7
 80236d6:	3b28      	subs	r3, #40	@ 0x28
 80236d8:	681b      	ldr	r3, [r3, #0]
 80236da:	3b01      	subs	r3, #1
 80236dc:	f003 0301 	and.w	r3, r3, #1
 80236e0:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80236e4:	009b      	lsls	r3, r3, #2
 80236e6:	4403      	add	r3, r0
 80236e8:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80236ea:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80236ee:	4613      	mov	r3, r2
 80236f0:	009b      	lsls	r3, r3, #2
 80236f2:	4413      	add	r3, r2
 80236f4:	009b      	lsls	r3, r3, #2
 80236f6:	3348      	adds	r3, #72	@ 0x48
 80236f8:	443b      	add	r3, r7
 80236fa:	3b24      	subs	r3, #36	@ 0x24
 80236fc:	681b      	ldr	r3, [r3, #0]
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d023      	beq.n	802374a <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8023702:	497f      	ldr	r1, [pc, #508]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023704:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8023708:	4613      	mov	r3, r2
 802370a:	009b      	lsls	r3, r3, #2
 802370c:	4413      	add	r3, r2
 802370e:	009b      	lsls	r3, r3, #2
 8023710:	3348      	adds	r3, #72	@ 0x48
 8023712:	443b      	add	r3, r7
 8023714:	3b24      	subs	r3, #36	@ 0x24
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	3b01      	subs	r3, #1
 802371a:	f003 0301 	and.w	r3, r3, #1
 802371e:	009b      	lsls	r3, r3, #2
 8023720:	440b      	add	r3, r1
 8023722:	6859      	ldr	r1, [r3, #4]
 8023724:	4876      	ldr	r0, [pc, #472]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023726:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 802372a:	4613      	mov	r3, r2
 802372c:	009b      	lsls	r3, r3, #2
 802372e:	4413      	add	r3, r2
 8023730:	009b      	lsls	r3, r3, #2
 8023732:	3348      	adds	r3, #72	@ 0x48
 8023734:	443b      	add	r3, r7
 8023736:	3b24      	subs	r3, #36	@ 0x24
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	3b01      	subs	r3, #1
 802373c:	f003 0301 	and.w	r3, r3, #1
 8023740:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8023744:	009b      	lsls	r3, r3, #2
 8023746:	4403      	add	r3, r0
 8023748:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 802374a:	4a6d      	ldr	r2, [pc, #436]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 802374c:	68bb      	ldr	r3, [r7, #8]
 802374e:	689b      	ldr	r3, [r3, #8]
 8023750:	3b01      	subs	r3, #1
 8023752:	009b      	lsls	r3, r3, #2
 8023754:	4413      	add	r3, r2
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 802375c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802375e:	025b      	lsls	r3, r3, #9
 8023760:	431a      	orrs	r2, r3
 8023762:	4967      	ldr	r1, [pc, #412]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023764:	68bb      	ldr	r3, [r7, #8]
 8023766:	689b      	ldr	r3, [r3, #8]
 8023768:	3b01      	subs	r3, #1
 802376a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802376e:	009b      	lsls	r3, r3, #2
 8023770:	440b      	add	r3, r1
 8023772:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8023774:	4a62      	ldr	r2, [pc, #392]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023776:	68bb      	ldr	r3, [r7, #8]
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	3b01      	subs	r3, #1
 802377c:	009b      	lsls	r3, r3, #2
 802377e:	4413      	add	r3, r2
 8023780:	685b      	ldr	r3, [r3, #4]
 8023782:	f023 0203 	bic.w	r2, r3, #3
 8023786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023788:	005b      	lsls	r3, r3, #1
 802378a:	431a      	orrs	r2, r3
 802378c:	495c      	ldr	r1, [pc, #368]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 802378e:	68bb      	ldr	r3, [r7, #8]
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	3b01      	subs	r3, #1
 8023794:	f042 0201 	orr.w	r2, r2, #1
 8023798:	009b      	lsls	r3, r3, #2
 802379a:	440b      	add	r3, r1
 802379c:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 802379e:	68bb      	ldr	r3, [r7, #8]
 80237a0:	685b      	ldr	r3, [r3, #4]
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	d014      	beq.n	80237d0 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80237a6:	4a56      	ldr	r2, [pc, #344]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80237a8:	68bb      	ldr	r3, [r7, #8]
 80237aa:	685b      	ldr	r3, [r3, #4]
 80237ac:	3b01      	subs	r3, #1
 80237ae:	009b      	lsls	r3, r3, #2
 80237b0:	4413      	add	r3, r2
 80237b2:	685b      	ldr	r3, [r3, #4]
 80237b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80237b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80237ba:	015b      	lsls	r3, r3, #5
 80237bc:	431a      	orrs	r2, r3
 80237be:	4950      	ldr	r1, [pc, #320]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80237c0:	68bb      	ldr	r3, [r7, #8]
 80237c2:	685b      	ldr	r3, [r3, #4]
 80237c4:	3b01      	subs	r3, #1
 80237c6:	f042 0210 	orr.w	r2, r2, #16
 80237ca:	009b      	lsls	r3, r3, #2
 80237cc:	440b      	add	r3, r1
 80237ce:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80237d0:	68bb      	ldr	r3, [r7, #8]
 80237d2:	68db      	ldr	r3, [r3, #12]
 80237d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d019      	beq.n	8023810 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80237dc:	4a48      	ldr	r2, [pc, #288]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80237de:	68bb      	ldr	r3, [r7, #8]
 80237e0:	68db      	ldr	r3, [r3, #12]
 80237e2:	3b01      	subs	r3, #1
 80237e4:	f003 0301 	and.w	r3, r3, #1
 80237e8:	009b      	lsls	r3, r3, #2
 80237ea:	4413      	add	r3, r2
 80237ec:	685b      	ldr	r3, [r3, #4]
 80237ee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80237f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80237f4:	049b      	lsls	r3, r3, #18
 80237f6:	431a      	orrs	r2, r3
 80237f8:	4941      	ldr	r1, [pc, #260]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80237fa:	68bb      	ldr	r3, [r7, #8]
 80237fc:	68db      	ldr	r3, [r3, #12]
 80237fe:	3b01      	subs	r3, #1
 8023800:	f003 0301 	and.w	r3, r3, #1
 8023804:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8023808:	009b      	lsls	r3, r3, #2
 802380a:	440b      	add	r3, r1
 802380c:	605a      	str	r2, [r3, #4]
 802380e:	e01c      	b.n	802384a <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8023810:	68bb      	ldr	r3, [r7, #8]
 8023812:	68db      	ldr	r3, [r3, #12]
 8023814:	2b00      	cmp	r3, #0
 8023816:	d018      	beq.n	802384a <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8023818:	4a39      	ldr	r2, [pc, #228]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 802381a:	68bb      	ldr	r3, [r7, #8]
 802381c:	68db      	ldr	r3, [r3, #12]
 802381e:	3b01      	subs	r3, #1
 8023820:	f003 0301 	and.w	r3, r3, #1
 8023824:	009b      	lsls	r3, r3, #2
 8023826:	4413      	add	r3, r2
 8023828:	685b      	ldr	r3, [r3, #4]
 802382a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 802382e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023830:	069b      	lsls	r3, r3, #26
 8023832:	431a      	orrs	r2, r3
 8023834:	4932      	ldr	r1, [pc, #200]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023836:	68bb      	ldr	r3, [r7, #8]
 8023838:	68db      	ldr	r3, [r3, #12]
 802383a:	3b01      	subs	r3, #1
 802383c:	f003 0301 	and.w	r3, r3, #1
 8023840:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8023844:	009b      	lsls	r3, r3, #2
 8023846:	440b      	add	r3, r1
 8023848:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 802384a:	68bb      	ldr	r3, [r7, #8]
 802384c:	691b      	ldr	r3, [r3, #16]
 802384e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8023852:	2b00      	cmp	r3, #0
 8023854:	d019      	beq.n	802388a <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8023856:	4a2a      	ldr	r2, [pc, #168]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023858:	68bb      	ldr	r3, [r7, #8]
 802385a:	691b      	ldr	r3, [r3, #16]
 802385c:	3b01      	subs	r3, #1
 802385e:	f003 0301 	and.w	r3, r3, #1
 8023862:	009b      	lsls	r3, r3, #2
 8023864:	4413      	add	r3, r2
 8023866:	685b      	ldr	r3, [r3, #4]
 8023868:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 802386c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802386e:	049b      	lsls	r3, r3, #18
 8023870:	431a      	orrs	r2, r3
 8023872:	4923      	ldr	r1, [pc, #140]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023874:	68bb      	ldr	r3, [r7, #8]
 8023876:	691b      	ldr	r3, [r3, #16]
 8023878:	3b01      	subs	r3, #1
 802387a:	f003 0301 	and.w	r3, r3, #1
 802387e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8023882:	009b      	lsls	r3, r3, #2
 8023884:	440b      	add	r3, r1
 8023886:	605a      	str	r2, [r3, #4]
 8023888:	e01c      	b.n	80238c4 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 802388a:	68bb      	ldr	r3, [r7, #8]
 802388c:	691b      	ldr	r3, [r3, #16]
 802388e:	2b00      	cmp	r3, #0
 8023890:	d018      	beq.n	80238c4 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8023892:	4a1b      	ldr	r2, [pc, #108]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 8023894:	68bb      	ldr	r3, [r7, #8]
 8023896:	691b      	ldr	r3, [r3, #16]
 8023898:	3b01      	subs	r3, #1
 802389a:	f003 0301 	and.w	r3, r3, #1
 802389e:	009b      	lsls	r3, r3, #2
 80238a0:	4413      	add	r3, r2
 80238a2:	685b      	ldr	r3, [r3, #4]
 80238a4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80238a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80238aa:	069b      	lsls	r3, r3, #26
 80238ac:	431a      	orrs	r2, r3
 80238ae:	4914      	ldr	r1, [pc, #80]	@ (8023900 <HAL_OSPIM_Config+0x664>)
 80238b0:	68bb      	ldr	r3, [r7, #8]
 80238b2:	691b      	ldr	r3, [r3, #16]
 80238b4:	3b01      	subs	r3, #1
 80238b6:	f003 0301 	and.w	r3, r3, #1
 80238ba:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80238be:	009b      	lsls	r3, r3, #2
 80238c0:	440b      	add	r3, r1
 80238c2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80238c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80238c8:	f003 0301 	and.w	r3, r3, #1
 80238cc:	2b00      	cmp	r3, #0
 80238ce:	d005      	beq.n	80238dc <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80238d0:	4b0c      	ldr	r3, [pc, #48]	@ (8023904 <HAL_OSPIM_Config+0x668>)
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	4a0b      	ldr	r2, [pc, #44]	@ (8023904 <HAL_OSPIM_Config+0x668>)
 80238d6:	f043 0301 	orr.w	r3, r3, #1
 80238da:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80238dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80238e0:	f003 0302 	and.w	r3, r3, #2
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d005      	beq.n	80238f4 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80238e8:	4b07      	ldr	r3, [pc, #28]	@ (8023908 <HAL_OSPIM_Config+0x66c>)
 80238ea:	681b      	ldr	r3, [r3, #0]
 80238ec:	4a06      	ldr	r2, [pc, #24]	@ (8023908 <HAL_OSPIM_Config+0x66c>)
 80238ee:	f043 0301 	orr.w	r3, r3, #1
 80238f2:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80238f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80238f8:	4618      	mov	r0, r3
 80238fa:	3748      	adds	r7, #72	@ 0x48
 80238fc:	46bd      	mov	sp, r7
 80238fe:	bd80      	pop	{r7, pc}
 8023900:	50061c00 	.word	0x50061c00
 8023904:	a0001000 	.word	0xa0001000
 8023908:	a0001400 	.word	0xa0001400

0802390c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 802390c:	b580      	push	{r7, lr}
 802390e:	b084      	sub	sp, #16
 8023910:	af00      	add	r7, sp, #0
 8023912:	60f8      	str	r0, [r7, #12]
 8023914:	60b9      	str	r1, [r7, #8]
 8023916:	603b      	str	r3, [r7, #0]
 8023918:	4613      	mov	r3, r2
 802391a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 802391c:	e01a      	b.n	8023954 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802391e:	69bb      	ldr	r3, [r7, #24]
 8023920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023924:	d016      	beq.n	8023954 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023926:	f7fd fff3 	bl	8021910 <HAL_GetTick>
 802392a:	4602      	mov	r2, r0
 802392c:	683b      	ldr	r3, [r7, #0]
 802392e:	1ad3      	subs	r3, r2, r3
 8023930:	69ba      	ldr	r2, [r7, #24]
 8023932:	429a      	cmp	r2, r3
 8023934:	d302      	bcc.n	802393c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8023936:	69bb      	ldr	r3, [r7, #24]
 8023938:	2b00      	cmp	r3, #0
 802393a:	d10b      	bne.n	8023954 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 802393c:	68fb      	ldr	r3, [r7, #12]
 802393e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023942:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8023948:	f043 0201 	orr.w	r2, r3, #1
 802394c:	68fb      	ldr	r3, [r7, #12]
 802394e:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8023950:	2301      	movs	r3, #1
 8023952:	e00e      	b.n	8023972 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	6a1a      	ldr	r2, [r3, #32]
 802395a:	68bb      	ldr	r3, [r7, #8]
 802395c:	4013      	ands	r3, r2
 802395e:	2b00      	cmp	r3, #0
 8023960:	bf14      	ite	ne
 8023962:	2301      	movne	r3, #1
 8023964:	2300      	moveq	r3, #0
 8023966:	b2db      	uxtb	r3, r3
 8023968:	461a      	mov	r2, r3
 802396a:	79fb      	ldrb	r3, [r7, #7]
 802396c:	429a      	cmp	r2, r3
 802396e:	d1d6      	bne.n	802391e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8023970:	2300      	movs	r3, #0
}
 8023972:	4618      	mov	r0, r3
 8023974:	3710      	adds	r7, #16
 8023976:	46bd      	mov	sp, r7
 8023978:	bd80      	pop	{r7, pc}
	...

0802397c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 802397c:	b480      	push	{r7}
 802397e:	b087      	sub	sp, #28
 8023980:	af00      	add	r7, sp, #0
 8023982:	4603      	mov	r3, r0
 8023984:	6039      	str	r1, [r7, #0]
 8023986:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8023988:	2300      	movs	r3, #0
 802398a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 802398c:	2300      	movs	r3, #0
 802398e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8023990:	79fb      	ldrb	r3, [r7, #7]
 8023992:	2b00      	cmp	r3, #0
 8023994:	d005      	beq.n	80239a2 <OSPIM_GetConfig+0x26>
 8023996:	79fb      	ldrb	r3, [r7, #7]
 8023998:	2b02      	cmp	r3, #2
 802399a:	d802      	bhi.n	80239a2 <OSPIM_GetConfig+0x26>
 802399c:	683b      	ldr	r3, [r7, #0]
 802399e:	2b00      	cmp	r3, #0
 80239a0:	d102      	bne.n	80239a8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80239a2:	2301      	movs	r3, #1
 80239a4:	75fb      	strb	r3, [r7, #23]
 80239a6:	e08e      	b.n	8023ac6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80239a8:	683b      	ldr	r3, [r7, #0]
 80239aa:	2200      	movs	r2, #0
 80239ac:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80239ae:	683b      	ldr	r3, [r7, #0]
 80239b0:	2200      	movs	r2, #0
 80239b2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80239b4:	683b      	ldr	r3, [r7, #0]
 80239b6:	2200      	movs	r2, #0
 80239b8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80239ba:	683b      	ldr	r3, [r7, #0]
 80239bc:	2200      	movs	r2, #0
 80239be:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80239c0:	683b      	ldr	r3, [r7, #0]
 80239c2:	2200      	movs	r2, #0
 80239c4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80239c6:	79fb      	ldrb	r3, [r7, #7]
 80239c8:	2b02      	cmp	r3, #2
 80239ca:	d101      	bne.n	80239d0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80239cc:	4b41      	ldr	r3, [pc, #260]	@ (8023ad4 <OSPIM_GetConfig+0x158>)
 80239ce:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80239d0:	2300      	movs	r3, #0
 80239d2:	60fb      	str	r3, [r7, #12]
 80239d4:	e074      	b.n	8023ac0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80239d6:	4a40      	ldr	r2, [pc, #256]	@ (8023ad8 <OSPIM_GetConfig+0x15c>)
 80239d8:	68fb      	ldr	r3, [r7, #12]
 80239da:	009b      	lsls	r3, r3, #2
 80239dc:	4413      	add	r3, r2
 80239de:	685b      	ldr	r3, [r3, #4]
 80239e0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80239e2:	68bb      	ldr	r3, [r7, #8]
 80239e4:	f003 0301 	and.w	r3, r3, #1
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d00a      	beq.n	8023a02 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80239ec:	68ba      	ldr	r2, [r7, #8]
 80239ee:	693b      	ldr	r3, [r7, #16]
 80239f0:	4053      	eors	r3, r2
 80239f2:	f003 0302 	and.w	r3, r3, #2
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d103      	bne.n	8023a02 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80239fa:	68fb      	ldr	r3, [r7, #12]
 80239fc:	1c5a      	adds	r2, r3, #1
 80239fe:	683b      	ldr	r3, [r7, #0]
 8023a00:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8023a02:	68bb      	ldr	r3, [r7, #8]
 8023a04:	f003 0310 	and.w	r3, r3, #16
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	d00a      	beq.n	8023a22 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8023a0c:	68ba      	ldr	r2, [r7, #8]
 8023a0e:	693b      	ldr	r3, [r7, #16]
 8023a10:	4053      	eors	r3, r2
 8023a12:	f003 0320 	and.w	r3, r3, #32
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d103      	bne.n	8023a22 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8023a1a:	68fb      	ldr	r3, [r7, #12]
 8023a1c:	1c5a      	adds	r2, r3, #1
 8023a1e:	683b      	ldr	r3, [r7, #0]
 8023a20:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8023a22:	68bb      	ldr	r3, [r7, #8]
 8023a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023a28:	2b00      	cmp	r3, #0
 8023a2a:	d00a      	beq.n	8023a42 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8023a2c:	68ba      	ldr	r2, [r7, #8]
 8023a2e:	693b      	ldr	r3, [r7, #16]
 8023a30:	4053      	eors	r3, r2
 8023a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d103      	bne.n	8023a42 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8023a3a:	68fb      	ldr	r3, [r7, #12]
 8023a3c:	1c5a      	adds	r2, r3, #1
 8023a3e:	683b      	ldr	r3, [r7, #0]
 8023a40:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8023a42:	68bb      	ldr	r3, [r7, #8]
 8023a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	d018      	beq.n	8023a7e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8023a4c:	68ba      	ldr	r2, [r7, #8]
 8023a4e:	693b      	ldr	r3, [r7, #16]
 8023a50:	4053      	eors	r3, r2
 8023a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	d111      	bne.n	8023a7e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8023a5a:	68bb      	ldr	r3, [r7, #8]
 8023a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	d106      	bne.n	8023a72 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8023a64:	68fb      	ldr	r3, [r7, #12]
 8023a66:	3301      	adds	r3, #1
 8023a68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8023a6c:	683b      	ldr	r3, [r7, #0]
 8023a6e:	60da      	str	r2, [r3, #12]
 8023a70:	e005      	b.n	8023a7e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8023a72:	68fb      	ldr	r3, [r7, #12]
 8023a74:	3301      	adds	r3, #1
 8023a76:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8023a7a:	683b      	ldr	r3, [r7, #0]
 8023a7c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8023a7e:	68bb      	ldr	r3, [r7, #8]
 8023a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d018      	beq.n	8023aba <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8023a88:	68ba      	ldr	r2, [r7, #8]
 8023a8a:	693b      	ldr	r3, [r7, #16]
 8023a8c:	4053      	eors	r3, r2
 8023a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	d111      	bne.n	8023aba <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8023a96:	68bb      	ldr	r3, [r7, #8]
 8023a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d106      	bne.n	8023aae <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8023aa0:	68fb      	ldr	r3, [r7, #12]
 8023aa2:	3301      	adds	r3, #1
 8023aa4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8023aa8:	683b      	ldr	r3, [r7, #0]
 8023aaa:	611a      	str	r2, [r3, #16]
 8023aac:	e005      	b.n	8023aba <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	3301      	adds	r3, #1
 8023ab2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8023ab6:	683b      	ldr	r3, [r7, #0]
 8023ab8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	3301      	adds	r3, #1
 8023abe:	60fb      	str	r3, [r7, #12]
 8023ac0:	68fb      	ldr	r3, [r7, #12]
 8023ac2:	2b01      	cmp	r3, #1
 8023ac4:	d987      	bls.n	80239d6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8023ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8023ac8:	4618      	mov	r0, r3
 8023aca:	371c      	adds	r7, #28
 8023acc:	46bd      	mov	sp, r7
 8023ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ad2:	4770      	bx	lr
 8023ad4:	04040222 	.word	0x04040222
 8023ad8:	50061c00 	.word	0x50061c00

08023adc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8023adc:	b480      	push	{r7}
 8023ade:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8023ae0:	4b05      	ldr	r3, [pc, #20]	@ (8023af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8023ae2:	681b      	ldr	r3, [r3, #0]
 8023ae4:	4a04      	ldr	r2, [pc, #16]	@ (8023af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8023ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023aea:	6013      	str	r3, [r2, #0]
}
 8023aec:	bf00      	nop
 8023aee:	46bd      	mov	sp, r7
 8023af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af4:	4770      	bx	lr
 8023af6:	bf00      	nop
 8023af8:	40007000 	.word	0x40007000

08023afc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8023afc:	b480      	push	{r7}
 8023afe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8023b00:	4b0d      	ldr	r3, [pc, #52]	@ (8023b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8023b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023b0c:	d102      	bne.n	8023b14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8023b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023b12:	e00b      	b.n	8023b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8023b14:	4b08      	ldr	r3, [pc, #32]	@ (8023b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8023b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023b22:	d102      	bne.n	8023b2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8023b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023b28:	e000      	b.n	8023b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8023b2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	46bd      	mov	sp, r7
 8023b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b34:	4770      	bx	lr
 8023b36:	bf00      	nop
 8023b38:	40007000 	.word	0x40007000

08023b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8023b3c:	b480      	push	{r7}
 8023b3e:	b085      	sub	sp, #20
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	2b00      	cmp	r3, #0
 8023b48:	d141      	bne.n	8023bce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8023b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8023b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023b56:	d131      	bne.n	8023bbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8023b58:	4b47      	ldr	r3, [pc, #284]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023b5e:	4a46      	ldr	r2, [pc, #280]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023b64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8023b68:	4b43      	ldr	r3, [pc, #268]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8023b70:	4a41      	ldr	r2, [pc, #260]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8023b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8023b78:	4b40      	ldr	r3, [pc, #256]	@ (8023c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8023b7a:	681b      	ldr	r3, [r3, #0]
 8023b7c:	2232      	movs	r2, #50	@ 0x32
 8023b7e:	fb02 f303 	mul.w	r3, r2, r3
 8023b82:	4a3f      	ldr	r2, [pc, #252]	@ (8023c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8023b84:	fba2 2303 	umull	r2, r3, r2, r3
 8023b88:	0c9b      	lsrs	r3, r3, #18
 8023b8a:	3301      	adds	r3, #1
 8023b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8023b8e:	e002      	b.n	8023b96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8023b90:	68fb      	ldr	r3, [r7, #12]
 8023b92:	3b01      	subs	r3, #1
 8023b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8023b96:	4b38      	ldr	r3, [pc, #224]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023b98:	695b      	ldr	r3, [r3, #20]
 8023b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023ba2:	d102      	bne.n	8023baa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8023ba4:	68fb      	ldr	r3, [r7, #12]
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	d1f2      	bne.n	8023b90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8023baa:	4b33      	ldr	r3, [pc, #204]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bac:	695b      	ldr	r3, [r3, #20]
 8023bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023bb6:	d158      	bne.n	8023c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8023bb8:	2303      	movs	r3, #3
 8023bba:	e057      	b.n	8023c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8023bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8023bcc:	e04d      	b.n	8023c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023bd4:	d141      	bne.n	8023c5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8023bd6:	4b28      	ldr	r3, [pc, #160]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8023bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023be2:	d131      	bne.n	8023c48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8023be4:	4b24      	ldr	r3, [pc, #144]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023bea:	4a23      	ldr	r2, [pc, #140]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8023bf4:	4b20      	ldr	r3, [pc, #128]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bf6:	681b      	ldr	r3, [r3, #0]
 8023bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8023bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8023c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8023c04:	4b1d      	ldr	r3, [pc, #116]	@ (8023c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	2232      	movs	r2, #50	@ 0x32
 8023c0a:	fb02 f303 	mul.w	r3, r2, r3
 8023c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8023c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8023c10:	fba2 2303 	umull	r2, r3, r2, r3
 8023c14:	0c9b      	lsrs	r3, r3, #18
 8023c16:	3301      	adds	r3, #1
 8023c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8023c1a:	e002      	b.n	8023c22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8023c1c:	68fb      	ldr	r3, [r7, #12]
 8023c1e:	3b01      	subs	r3, #1
 8023c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8023c22:	4b15      	ldr	r3, [pc, #84]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c24:	695b      	ldr	r3, [r3, #20]
 8023c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023c2e:	d102      	bne.n	8023c36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8023c30:	68fb      	ldr	r3, [r7, #12]
 8023c32:	2b00      	cmp	r3, #0
 8023c34:	d1f2      	bne.n	8023c1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8023c36:	4b10      	ldr	r3, [pc, #64]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c38:	695b      	ldr	r3, [r3, #20]
 8023c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023c42:	d112      	bne.n	8023c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8023c44:	2303      	movs	r3, #3
 8023c46:	e011      	b.n	8023c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8023c48:	4b0b      	ldr	r3, [pc, #44]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8023c58:	e007      	b.n	8023c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8023c5a:	4b07      	ldr	r3, [pc, #28]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c5c:	681b      	ldr	r3, [r3, #0]
 8023c5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8023c62:	4a05      	ldr	r2, [pc, #20]	@ (8023c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8023c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8023c68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8023c6a:	2300      	movs	r3, #0
}
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	3714      	adds	r7, #20
 8023c70:	46bd      	mov	sp, r7
 8023c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c76:	4770      	bx	lr
 8023c78:	40007000 	.word	0x40007000
 8023c7c:	20000000 	.word	0x20000000
 8023c80:	431bde83 	.word	0x431bde83

08023c84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023c84:	b580      	push	{r7, lr}
 8023c86:	b088      	sub	sp, #32
 8023c88:	af00      	add	r7, sp, #0
 8023c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	d102      	bne.n	8023c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8023c92:	2301      	movs	r3, #1
 8023c94:	f000 bc08 	b.w	80244a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8023c98:	4b96      	ldr	r3, [pc, #600]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023c9a:	689b      	ldr	r3, [r3, #8]
 8023c9c:	f003 030c 	and.w	r3, r3, #12
 8023ca0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8023ca2:	4b94      	ldr	r3, [pc, #592]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ca4:	68db      	ldr	r3, [r3, #12]
 8023ca6:	f003 0303 	and.w	r3, r3, #3
 8023caa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	f003 0310 	and.w	r3, r3, #16
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	f000 80e4 	beq.w	8023e82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8023cba:	69bb      	ldr	r3, [r7, #24]
 8023cbc:	2b00      	cmp	r3, #0
 8023cbe:	d007      	beq.n	8023cd0 <HAL_RCC_OscConfig+0x4c>
 8023cc0:	69bb      	ldr	r3, [r7, #24]
 8023cc2:	2b0c      	cmp	r3, #12
 8023cc4:	f040 808b 	bne.w	8023dde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8023cc8:	697b      	ldr	r3, [r7, #20]
 8023cca:	2b01      	cmp	r3, #1
 8023ccc:	f040 8087 	bne.w	8023dde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8023cd0:	4b88      	ldr	r3, [pc, #544]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	f003 0302 	and.w	r3, r3, #2
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	d005      	beq.n	8023ce8 <HAL_RCC_OscConfig+0x64>
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	699b      	ldr	r3, [r3, #24]
 8023ce0:	2b00      	cmp	r3, #0
 8023ce2:	d101      	bne.n	8023ce8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8023ce4:	2301      	movs	r3, #1
 8023ce6:	e3df      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	6a1a      	ldr	r2, [r3, #32]
 8023cec:	4b81      	ldr	r3, [pc, #516]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023cee:	681b      	ldr	r3, [r3, #0]
 8023cf0:	f003 0308 	and.w	r3, r3, #8
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	d004      	beq.n	8023d02 <HAL_RCC_OscConfig+0x7e>
 8023cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023cfa:	681b      	ldr	r3, [r3, #0]
 8023cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8023d00:	e005      	b.n	8023d0e <HAL_RCC_OscConfig+0x8a>
 8023d02:	4b7c      	ldr	r3, [pc, #496]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8023d08:	091b      	lsrs	r3, r3, #4
 8023d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8023d0e:	4293      	cmp	r3, r2
 8023d10:	d223      	bcs.n	8023d5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	6a1b      	ldr	r3, [r3, #32]
 8023d16:	4618      	mov	r0, r3
 8023d18:	f000 fdcc 	bl	80248b4 <RCC_SetFlashLatencyFromMSIRange>
 8023d1c:	4603      	mov	r3, r0
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d001      	beq.n	8023d26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8023d22:	2301      	movs	r3, #1
 8023d24:	e3c0      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8023d26:	4b73      	ldr	r3, [pc, #460]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d28:	681b      	ldr	r3, [r3, #0]
 8023d2a:	4a72      	ldr	r2, [pc, #456]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d2c:	f043 0308 	orr.w	r3, r3, #8
 8023d30:	6013      	str	r3, [r2, #0]
 8023d32:	4b70      	ldr	r3, [pc, #448]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d34:	681b      	ldr	r3, [r3, #0]
 8023d36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8023d3a:	687b      	ldr	r3, [r7, #4]
 8023d3c:	6a1b      	ldr	r3, [r3, #32]
 8023d3e:	496d      	ldr	r1, [pc, #436]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d40:	4313      	orrs	r3, r2
 8023d42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8023d44:	4b6b      	ldr	r3, [pc, #428]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d46:	685b      	ldr	r3, [r3, #4]
 8023d48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	69db      	ldr	r3, [r3, #28]
 8023d50:	021b      	lsls	r3, r3, #8
 8023d52:	4968      	ldr	r1, [pc, #416]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d54:	4313      	orrs	r3, r2
 8023d56:	604b      	str	r3, [r1, #4]
 8023d58:	e025      	b.n	8023da6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8023d5a:	4b66      	ldr	r3, [pc, #408]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d5c:	681b      	ldr	r3, [r3, #0]
 8023d5e:	4a65      	ldr	r2, [pc, #404]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d60:	f043 0308 	orr.w	r3, r3, #8
 8023d64:	6013      	str	r3, [r2, #0]
 8023d66:	4b63      	ldr	r3, [pc, #396]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d68:	681b      	ldr	r3, [r3, #0]
 8023d6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	6a1b      	ldr	r3, [r3, #32]
 8023d72:	4960      	ldr	r1, [pc, #384]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d74:	4313      	orrs	r3, r2
 8023d76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8023d78:	4b5e      	ldr	r3, [pc, #376]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d7a:	685b      	ldr	r3, [r3, #4]
 8023d7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8023d80:	687b      	ldr	r3, [r7, #4]
 8023d82:	69db      	ldr	r3, [r3, #28]
 8023d84:	021b      	lsls	r3, r3, #8
 8023d86:	495b      	ldr	r1, [pc, #364]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023d88:	4313      	orrs	r3, r2
 8023d8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8023d8c:	69bb      	ldr	r3, [r7, #24]
 8023d8e:	2b00      	cmp	r3, #0
 8023d90:	d109      	bne.n	8023da6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	6a1b      	ldr	r3, [r3, #32]
 8023d96:	4618      	mov	r0, r3
 8023d98:	f000 fd8c 	bl	80248b4 <RCC_SetFlashLatencyFromMSIRange>
 8023d9c:	4603      	mov	r3, r0
 8023d9e:	2b00      	cmp	r3, #0
 8023da0:	d001      	beq.n	8023da6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8023da2:	2301      	movs	r3, #1
 8023da4:	e380      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8023da6:	f000 fcc1 	bl	802472c <HAL_RCC_GetSysClockFreq>
 8023daa:	4602      	mov	r2, r0
 8023dac:	4b51      	ldr	r3, [pc, #324]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023dae:	689b      	ldr	r3, [r3, #8]
 8023db0:	091b      	lsrs	r3, r3, #4
 8023db2:	f003 030f 	and.w	r3, r3, #15
 8023db6:	4950      	ldr	r1, [pc, #320]	@ (8023ef8 <HAL_RCC_OscConfig+0x274>)
 8023db8:	5ccb      	ldrb	r3, [r1, r3]
 8023dba:	f003 031f 	and.w	r3, r3, #31
 8023dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8023dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8023efc <HAL_RCC_OscConfig+0x278>)
 8023dc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8023dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8023f00 <HAL_RCC_OscConfig+0x27c>)
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	4618      	mov	r0, r3
 8023dcc:	f7fd fd50 	bl	8021870 <HAL_InitTick>
 8023dd0:	4603      	mov	r3, r0
 8023dd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8023dd4:	7bfb      	ldrb	r3, [r7, #15]
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d052      	beq.n	8023e80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8023dda:	7bfb      	ldrb	r3, [r7, #15]
 8023ddc:	e364      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	699b      	ldr	r3, [r3, #24]
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d032      	beq.n	8023e4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8023de6:	4b43      	ldr	r3, [pc, #268]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023de8:	681b      	ldr	r3, [r3, #0]
 8023dea:	4a42      	ldr	r2, [pc, #264]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023dec:	f043 0301 	orr.w	r3, r3, #1
 8023df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8023df2:	f7fd fd8d 	bl	8021910 <HAL_GetTick>
 8023df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8023df8:	e008      	b.n	8023e0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8023dfa:	f7fd fd89 	bl	8021910 <HAL_GetTick>
 8023dfe:	4602      	mov	r2, r0
 8023e00:	693b      	ldr	r3, [r7, #16]
 8023e02:	1ad3      	subs	r3, r2, r3
 8023e04:	2b02      	cmp	r3, #2
 8023e06:	d901      	bls.n	8023e0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8023e08:	2303      	movs	r3, #3
 8023e0a:	e34d      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8023e0c:	4b39      	ldr	r3, [pc, #228]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	f003 0302 	and.w	r3, r3, #2
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	d0f0      	beq.n	8023dfa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8023e18:	4b36      	ldr	r3, [pc, #216]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	4a35      	ldr	r2, [pc, #212]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e1e:	f043 0308 	orr.w	r3, r3, #8
 8023e22:	6013      	str	r3, [r2, #0]
 8023e24:	4b33      	ldr	r3, [pc, #204]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e26:	681b      	ldr	r3, [r3, #0]
 8023e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8023e2c:	687b      	ldr	r3, [r7, #4]
 8023e2e:	6a1b      	ldr	r3, [r3, #32]
 8023e30:	4930      	ldr	r1, [pc, #192]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e32:	4313      	orrs	r3, r2
 8023e34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8023e36:	4b2f      	ldr	r3, [pc, #188]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e38:	685b      	ldr	r3, [r3, #4]
 8023e3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	69db      	ldr	r3, [r3, #28]
 8023e42:	021b      	lsls	r3, r3, #8
 8023e44:	492b      	ldr	r1, [pc, #172]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e46:	4313      	orrs	r3, r2
 8023e48:	604b      	str	r3, [r1, #4]
 8023e4a:	e01a      	b.n	8023e82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8023e4c:	4b29      	ldr	r3, [pc, #164]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e4e:	681b      	ldr	r3, [r3, #0]
 8023e50:	4a28      	ldr	r2, [pc, #160]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e52:	f023 0301 	bic.w	r3, r3, #1
 8023e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8023e58:	f7fd fd5a 	bl	8021910 <HAL_GetTick>
 8023e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8023e5e:	e008      	b.n	8023e72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8023e60:	f7fd fd56 	bl	8021910 <HAL_GetTick>
 8023e64:	4602      	mov	r2, r0
 8023e66:	693b      	ldr	r3, [r7, #16]
 8023e68:	1ad3      	subs	r3, r2, r3
 8023e6a:	2b02      	cmp	r3, #2
 8023e6c:	d901      	bls.n	8023e72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8023e6e:	2303      	movs	r3, #3
 8023e70:	e31a      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8023e72:	4b20      	ldr	r3, [pc, #128]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023e74:	681b      	ldr	r3, [r3, #0]
 8023e76:	f003 0302 	and.w	r3, r3, #2
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d1f0      	bne.n	8023e60 <HAL_RCC_OscConfig+0x1dc>
 8023e7e:	e000      	b.n	8023e82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8023e80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023e82:	687b      	ldr	r3, [r7, #4]
 8023e84:	681b      	ldr	r3, [r3, #0]
 8023e86:	f003 0301 	and.w	r3, r3, #1
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d073      	beq.n	8023f76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8023e8e:	69bb      	ldr	r3, [r7, #24]
 8023e90:	2b08      	cmp	r3, #8
 8023e92:	d005      	beq.n	8023ea0 <HAL_RCC_OscConfig+0x21c>
 8023e94:	69bb      	ldr	r3, [r7, #24]
 8023e96:	2b0c      	cmp	r3, #12
 8023e98:	d10e      	bne.n	8023eb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8023e9a:	697b      	ldr	r3, [r7, #20]
 8023e9c:	2b03      	cmp	r3, #3
 8023e9e:	d10b      	bne.n	8023eb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023ea0:	4b14      	ldr	r3, [pc, #80]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ea2:	681b      	ldr	r3, [r3, #0]
 8023ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	d063      	beq.n	8023f74 <HAL_RCC_OscConfig+0x2f0>
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	685b      	ldr	r3, [r3, #4]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d15f      	bne.n	8023f74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8023eb4:	2301      	movs	r3, #1
 8023eb6:	e2f7      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	685b      	ldr	r3, [r3, #4]
 8023ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023ec0:	d106      	bne.n	8023ed0 <HAL_RCC_OscConfig+0x24c>
 8023ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ec4:	681b      	ldr	r3, [r3, #0]
 8023ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8023ecc:	6013      	str	r3, [r2, #0]
 8023ece:	e025      	b.n	8023f1c <HAL_RCC_OscConfig+0x298>
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	685b      	ldr	r3, [r3, #4]
 8023ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8023ed8:	d114      	bne.n	8023f04 <HAL_RCC_OscConfig+0x280>
 8023eda:	4b06      	ldr	r3, [pc, #24]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023edc:	681b      	ldr	r3, [r3, #0]
 8023ede:	4a05      	ldr	r2, [pc, #20]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8023ee4:	6013      	str	r3, [r2, #0]
 8023ee6:	4b03      	ldr	r3, [pc, #12]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023ee8:	681b      	ldr	r3, [r3, #0]
 8023eea:	4a02      	ldr	r2, [pc, #8]	@ (8023ef4 <HAL_RCC_OscConfig+0x270>)
 8023eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8023ef0:	6013      	str	r3, [r2, #0]
 8023ef2:	e013      	b.n	8023f1c <HAL_RCC_OscConfig+0x298>
 8023ef4:	40021000 	.word	0x40021000
 8023ef8:	08027168 	.word	0x08027168
 8023efc:	20000000 	.word	0x20000000
 8023f00:	20000004 	.word	0x20000004
 8023f04:	4ba0      	ldr	r3, [pc, #640]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f06:	681b      	ldr	r3, [r3, #0]
 8023f08:	4a9f      	ldr	r2, [pc, #636]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8023f0e:	6013      	str	r3, [r2, #0]
 8023f10:	4b9d      	ldr	r3, [pc, #628]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	4a9c      	ldr	r2, [pc, #624]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8023f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	685b      	ldr	r3, [r3, #4]
 8023f20:	2b00      	cmp	r3, #0
 8023f22:	d013      	beq.n	8023f4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023f24:	f7fd fcf4 	bl	8021910 <HAL_GetTick>
 8023f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8023f2a:	e008      	b.n	8023f3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023f2c:	f7fd fcf0 	bl	8021910 <HAL_GetTick>
 8023f30:	4602      	mov	r2, r0
 8023f32:	693b      	ldr	r3, [r7, #16]
 8023f34:	1ad3      	subs	r3, r2, r3
 8023f36:	2b64      	cmp	r3, #100	@ 0x64
 8023f38:	d901      	bls.n	8023f3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8023f3a:	2303      	movs	r3, #3
 8023f3c:	e2b4      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8023f3e:	4b92      	ldr	r3, [pc, #584]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d0f0      	beq.n	8023f2c <HAL_RCC_OscConfig+0x2a8>
 8023f4a:	e014      	b.n	8023f76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023f4c:	f7fd fce0 	bl	8021910 <HAL_GetTick>
 8023f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8023f52:	e008      	b.n	8023f66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023f54:	f7fd fcdc 	bl	8021910 <HAL_GetTick>
 8023f58:	4602      	mov	r2, r0
 8023f5a:	693b      	ldr	r3, [r7, #16]
 8023f5c:	1ad3      	subs	r3, r2, r3
 8023f5e:	2b64      	cmp	r3, #100	@ 0x64
 8023f60:	d901      	bls.n	8023f66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8023f62:	2303      	movs	r3, #3
 8023f64:	e2a0      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8023f66:	4b88      	ldr	r3, [pc, #544]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d1f0      	bne.n	8023f54 <HAL_RCC_OscConfig+0x2d0>
 8023f72:	e000      	b.n	8023f76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	681b      	ldr	r3, [r3, #0]
 8023f7a:	f003 0302 	and.w	r3, r3, #2
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d060      	beq.n	8024044 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8023f82:	69bb      	ldr	r3, [r7, #24]
 8023f84:	2b04      	cmp	r3, #4
 8023f86:	d005      	beq.n	8023f94 <HAL_RCC_OscConfig+0x310>
 8023f88:	69bb      	ldr	r3, [r7, #24]
 8023f8a:	2b0c      	cmp	r3, #12
 8023f8c:	d119      	bne.n	8023fc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8023f8e:	697b      	ldr	r3, [r7, #20]
 8023f90:	2b02      	cmp	r3, #2
 8023f92:	d116      	bne.n	8023fc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8023f94:	4b7c      	ldr	r3, [pc, #496]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d005      	beq.n	8023fac <HAL_RCC_OscConfig+0x328>
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	68db      	ldr	r3, [r3, #12]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d101      	bne.n	8023fac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8023fa8:	2301      	movs	r3, #1
 8023faa:	e27d      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023fac:	4b76      	ldr	r3, [pc, #472]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023fae:	685b      	ldr	r3, [r3, #4]
 8023fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	691b      	ldr	r3, [r3, #16]
 8023fb8:	061b      	lsls	r3, r3, #24
 8023fba:	4973      	ldr	r1, [pc, #460]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023fbc:	4313      	orrs	r3, r2
 8023fbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8023fc0:	e040      	b.n	8024044 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	68db      	ldr	r3, [r3, #12]
 8023fc6:	2b00      	cmp	r3, #0
 8023fc8:	d023      	beq.n	8024012 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023fca:	4b6f      	ldr	r3, [pc, #444]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023fcc:	681b      	ldr	r3, [r3, #0]
 8023fce:	4a6e      	ldr	r2, [pc, #440]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023fd6:	f7fd fc9b 	bl	8021910 <HAL_GetTick>
 8023fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8023fdc:	e008      	b.n	8023ff0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023fde:	f7fd fc97 	bl	8021910 <HAL_GetTick>
 8023fe2:	4602      	mov	r2, r0
 8023fe4:	693b      	ldr	r3, [r7, #16]
 8023fe6:	1ad3      	subs	r3, r2, r3
 8023fe8:	2b02      	cmp	r3, #2
 8023fea:	d901      	bls.n	8023ff0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8023fec:	2303      	movs	r3, #3
 8023fee:	e25b      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8023ff0:	4b65      	ldr	r3, [pc, #404]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023ff2:	681b      	ldr	r3, [r3, #0]
 8023ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d0f0      	beq.n	8023fde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023ffc:	4b62      	ldr	r3, [pc, #392]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8023ffe:	685b      	ldr	r3, [r3, #4]
 8024000:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8024004:	687b      	ldr	r3, [r7, #4]
 8024006:	691b      	ldr	r3, [r3, #16]
 8024008:	061b      	lsls	r3, r3, #24
 802400a:	495f      	ldr	r1, [pc, #380]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802400c:	4313      	orrs	r3, r2
 802400e:	604b      	str	r3, [r1, #4]
 8024010:	e018      	b.n	8024044 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8024012:	4b5d      	ldr	r3, [pc, #372]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	4a5c      	ldr	r2, [pc, #368]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802401e:	f7fd fc77 	bl	8021910 <HAL_GetTick>
 8024022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8024024:	e008      	b.n	8024038 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8024026:	f7fd fc73 	bl	8021910 <HAL_GetTick>
 802402a:	4602      	mov	r2, r0
 802402c:	693b      	ldr	r3, [r7, #16]
 802402e:	1ad3      	subs	r3, r2, r3
 8024030:	2b02      	cmp	r3, #2
 8024032:	d901      	bls.n	8024038 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8024034:	2303      	movs	r3, #3
 8024036:	e237      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8024038:	4b53      	ldr	r3, [pc, #332]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024040:	2b00      	cmp	r3, #0
 8024042:	d1f0      	bne.n	8024026 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	681b      	ldr	r3, [r3, #0]
 8024048:	f003 0308 	and.w	r3, r3, #8
 802404c:	2b00      	cmp	r3, #0
 802404e:	d03c      	beq.n	80240ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	695b      	ldr	r3, [r3, #20]
 8024054:	2b00      	cmp	r3, #0
 8024056:	d01c      	beq.n	8024092 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8024058:	4b4b      	ldr	r3, [pc, #300]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802405e:	4a4a      	ldr	r2, [pc, #296]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024060:	f043 0301 	orr.w	r3, r3, #1
 8024064:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024068:	f7fd fc52 	bl	8021910 <HAL_GetTick>
 802406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 802406e:	e008      	b.n	8024082 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8024070:	f7fd fc4e 	bl	8021910 <HAL_GetTick>
 8024074:	4602      	mov	r2, r0
 8024076:	693b      	ldr	r3, [r7, #16]
 8024078:	1ad3      	subs	r3, r2, r3
 802407a:	2b02      	cmp	r3, #2
 802407c:	d901      	bls.n	8024082 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 802407e:	2303      	movs	r3, #3
 8024080:	e212      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8024082:	4b41      	ldr	r3, [pc, #260]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8024088:	f003 0302 	and.w	r3, r3, #2
 802408c:	2b00      	cmp	r3, #0
 802408e:	d0ef      	beq.n	8024070 <HAL_RCC_OscConfig+0x3ec>
 8024090:	e01b      	b.n	80240ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8024092:	4b3d      	ldr	r3, [pc, #244]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8024098:	4a3b      	ldr	r2, [pc, #236]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802409a:	f023 0301 	bic.w	r3, r3, #1
 802409e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80240a2:	f7fd fc35 	bl	8021910 <HAL_GetTick>
 80240a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80240a8:	e008      	b.n	80240bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80240aa:	f7fd fc31 	bl	8021910 <HAL_GetTick>
 80240ae:	4602      	mov	r2, r0
 80240b0:	693b      	ldr	r3, [r7, #16]
 80240b2:	1ad3      	subs	r3, r2, r3
 80240b4:	2b02      	cmp	r3, #2
 80240b6:	d901      	bls.n	80240bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80240b8:	2303      	movs	r3, #3
 80240ba:	e1f5      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80240bc:	4b32      	ldr	r3, [pc, #200]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 80240be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80240c2:	f003 0302 	and.w	r3, r3, #2
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d1ef      	bne.n	80240aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	f003 0304 	and.w	r3, r3, #4
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	f000 80a6 	beq.w	8024224 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80240d8:	2300      	movs	r3, #0
 80240da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80240dc:	4b2a      	ldr	r3, [pc, #168]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 80240de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80240e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	d10d      	bne.n	8024104 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80240e8:	4b27      	ldr	r3, [pc, #156]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 80240ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80240ec:	4a26      	ldr	r2, [pc, #152]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 80240ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80240f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80240f4:	4b24      	ldr	r3, [pc, #144]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 80240f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80240f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80240fc:	60bb      	str	r3, [r7, #8]
 80240fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024100:	2301      	movs	r3, #1
 8024102:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8024104:	4b21      	ldr	r3, [pc, #132]	@ (802418c <HAL_RCC_OscConfig+0x508>)
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802410c:	2b00      	cmp	r3, #0
 802410e:	d118      	bne.n	8024142 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8024110:	4b1e      	ldr	r3, [pc, #120]	@ (802418c <HAL_RCC_OscConfig+0x508>)
 8024112:	681b      	ldr	r3, [r3, #0]
 8024114:	4a1d      	ldr	r2, [pc, #116]	@ (802418c <HAL_RCC_OscConfig+0x508>)
 8024116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802411a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802411c:	f7fd fbf8 	bl	8021910 <HAL_GetTick>
 8024120:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8024122:	e008      	b.n	8024136 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024124:	f7fd fbf4 	bl	8021910 <HAL_GetTick>
 8024128:	4602      	mov	r2, r0
 802412a:	693b      	ldr	r3, [r7, #16]
 802412c:	1ad3      	subs	r3, r2, r3
 802412e:	2b02      	cmp	r3, #2
 8024130:	d901      	bls.n	8024136 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8024132:	2303      	movs	r3, #3
 8024134:	e1b8      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8024136:	4b15      	ldr	r3, [pc, #84]	@ (802418c <HAL_RCC_OscConfig+0x508>)
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802413e:	2b00      	cmp	r3, #0
 8024140:	d0f0      	beq.n	8024124 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	689b      	ldr	r3, [r3, #8]
 8024146:	2b01      	cmp	r3, #1
 8024148:	d108      	bne.n	802415c <HAL_RCC_OscConfig+0x4d8>
 802414a:	4b0f      	ldr	r3, [pc, #60]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024150:	4a0d      	ldr	r2, [pc, #52]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024152:	f043 0301 	orr.w	r3, r3, #1
 8024156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 802415a:	e029      	b.n	80241b0 <HAL_RCC_OscConfig+0x52c>
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	689b      	ldr	r3, [r3, #8]
 8024160:	2b05      	cmp	r3, #5
 8024162:	d115      	bne.n	8024190 <HAL_RCC_OscConfig+0x50c>
 8024164:	4b08      	ldr	r3, [pc, #32]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802416a:	4a07      	ldr	r2, [pc, #28]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802416c:	f043 0304 	orr.w	r3, r3, #4
 8024170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8024174:	4b04      	ldr	r3, [pc, #16]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 8024176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802417a:	4a03      	ldr	r2, [pc, #12]	@ (8024188 <HAL_RCC_OscConfig+0x504>)
 802417c:	f043 0301 	orr.w	r3, r3, #1
 8024180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8024184:	e014      	b.n	80241b0 <HAL_RCC_OscConfig+0x52c>
 8024186:	bf00      	nop
 8024188:	40021000 	.word	0x40021000
 802418c:	40007000 	.word	0x40007000
 8024190:	4b9d      	ldr	r3, [pc, #628]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024196:	4a9c      	ldr	r2, [pc, #624]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024198:	f023 0301 	bic.w	r3, r3, #1
 802419c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80241a0:	4b99      	ldr	r3, [pc, #612]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80241a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80241a6:	4a98      	ldr	r2, [pc, #608]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80241a8:	f023 0304 	bic.w	r3, r3, #4
 80241ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	689b      	ldr	r3, [r3, #8]
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d016      	beq.n	80241e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80241b8:	f7fd fbaa 	bl	8021910 <HAL_GetTick>
 80241bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80241be:	e00a      	b.n	80241d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80241c0:	f7fd fba6 	bl	8021910 <HAL_GetTick>
 80241c4:	4602      	mov	r2, r0
 80241c6:	693b      	ldr	r3, [r7, #16]
 80241c8:	1ad3      	subs	r3, r2, r3
 80241ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80241ce:	4293      	cmp	r3, r2
 80241d0:	d901      	bls.n	80241d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80241d2:	2303      	movs	r3, #3
 80241d4:	e168      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80241d6:	4b8c      	ldr	r3, [pc, #560]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80241d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80241dc:	f003 0302 	and.w	r3, r3, #2
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d0ed      	beq.n	80241c0 <HAL_RCC_OscConfig+0x53c>
 80241e4:	e015      	b.n	8024212 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80241e6:	f7fd fb93 	bl	8021910 <HAL_GetTick>
 80241ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80241ec:	e00a      	b.n	8024204 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80241ee:	f7fd fb8f 	bl	8021910 <HAL_GetTick>
 80241f2:	4602      	mov	r2, r0
 80241f4:	693b      	ldr	r3, [r7, #16]
 80241f6:	1ad3      	subs	r3, r2, r3
 80241f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80241fc:	4293      	cmp	r3, r2
 80241fe:	d901      	bls.n	8024204 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8024200:	2303      	movs	r3, #3
 8024202:	e151      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8024204:	4b80      	ldr	r3, [pc, #512]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802420a:	f003 0302 	and.w	r3, r3, #2
 802420e:	2b00      	cmp	r3, #0
 8024210:	d1ed      	bne.n	80241ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024212:	7ffb      	ldrb	r3, [r7, #31]
 8024214:	2b01      	cmp	r3, #1
 8024216:	d105      	bne.n	8024224 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024218:	4b7b      	ldr	r3, [pc, #492]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 802421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802421c:	4a7a      	ldr	r2, [pc, #488]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 802421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024222:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	f003 0320 	and.w	r3, r3, #32
 802422c:	2b00      	cmp	r3, #0
 802422e:	d03c      	beq.n	80242aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024234:	2b00      	cmp	r3, #0
 8024236:	d01c      	beq.n	8024272 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8024238:	4b73      	ldr	r3, [pc, #460]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 802423a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802423e:	4a72      	ldr	r2, [pc, #456]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024240:	f043 0301 	orr.w	r3, r3, #1
 8024244:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024248:	f7fd fb62 	bl	8021910 <HAL_GetTick>
 802424c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 802424e:	e008      	b.n	8024262 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8024250:	f7fd fb5e 	bl	8021910 <HAL_GetTick>
 8024254:	4602      	mov	r2, r0
 8024256:	693b      	ldr	r3, [r7, #16]
 8024258:	1ad3      	subs	r3, r2, r3
 802425a:	2b02      	cmp	r3, #2
 802425c:	d901      	bls.n	8024262 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 802425e:	2303      	movs	r3, #3
 8024260:	e122      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8024262:	4b69      	ldr	r3, [pc, #420]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8024268:	f003 0302 	and.w	r3, r3, #2
 802426c:	2b00      	cmp	r3, #0
 802426e:	d0ef      	beq.n	8024250 <HAL_RCC_OscConfig+0x5cc>
 8024270:	e01b      	b.n	80242aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8024272:	4b65      	ldr	r3, [pc, #404]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8024278:	4a63      	ldr	r2, [pc, #396]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 802427a:	f023 0301 	bic.w	r3, r3, #1
 802427e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024282:	f7fd fb45 	bl	8021910 <HAL_GetTick>
 8024286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8024288:	e008      	b.n	802429c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802428a:	f7fd fb41 	bl	8021910 <HAL_GetTick>
 802428e:	4602      	mov	r2, r0
 8024290:	693b      	ldr	r3, [r7, #16]
 8024292:	1ad3      	subs	r3, r2, r3
 8024294:	2b02      	cmp	r3, #2
 8024296:	d901      	bls.n	802429c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8024298:	2303      	movs	r3, #3
 802429a:	e105      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802429c:	4b5a      	ldr	r3, [pc, #360]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 802429e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80242a2:	f003 0302 	and.w	r3, r3, #2
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	d1ef      	bne.n	802428a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80242aa:	687b      	ldr	r3, [r7, #4]
 80242ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	f000 80f9 	beq.w	80244a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242b8:	2b02      	cmp	r3, #2
 80242ba:	f040 80cf 	bne.w	802445c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80242be:	4b52      	ldr	r3, [pc, #328]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80242c0:	68db      	ldr	r3, [r3, #12]
 80242c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80242c4:	697b      	ldr	r3, [r7, #20]
 80242c6:	f003 0203 	and.w	r2, r3, #3
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80242ce:	429a      	cmp	r2, r3
 80242d0:	d12c      	bne.n	802432c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80242d2:	697b      	ldr	r3, [r7, #20]
 80242d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80242dc:	3b01      	subs	r3, #1
 80242de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80242e0:	429a      	cmp	r2, r3
 80242e2:	d123      	bne.n	802432c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80242e4:	697b      	ldr	r3, [r7, #20]
 80242e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80242ea:	687b      	ldr	r3, [r7, #4]
 80242ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80242ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80242f0:	429a      	cmp	r2, r3
 80242f2:	d11b      	bne.n	802432c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80242f4:	697b      	ldr	r3, [r7, #20]
 80242f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80242fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8024300:	429a      	cmp	r2, r3
 8024302:	d113      	bne.n	802432c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8024304:	697b      	ldr	r3, [r7, #20]
 8024306:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 802430a:	687b      	ldr	r3, [r7, #4]
 802430c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802430e:	085b      	lsrs	r3, r3, #1
 8024310:	3b01      	subs	r3, #1
 8024312:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8024314:	429a      	cmp	r2, r3
 8024316:	d109      	bne.n	802432c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8024318:	697b      	ldr	r3, [r7, #20]
 802431a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 802431e:	687b      	ldr	r3, [r7, #4]
 8024320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024322:	085b      	lsrs	r3, r3, #1
 8024324:	3b01      	subs	r3, #1
 8024326:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8024328:	429a      	cmp	r2, r3
 802432a:	d071      	beq.n	8024410 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 802432c:	69bb      	ldr	r3, [r7, #24]
 802432e:	2b0c      	cmp	r3, #12
 8024330:	d068      	beq.n	8024404 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8024332:	4b35      	ldr	r3, [pc, #212]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024334:	681b      	ldr	r3, [r3, #0]
 8024336:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802433a:	2b00      	cmp	r3, #0
 802433c:	d105      	bne.n	802434a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 802433e:	4b32      	ldr	r3, [pc, #200]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024340:	681b      	ldr	r3, [r3, #0]
 8024342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024346:	2b00      	cmp	r3, #0
 8024348:	d001      	beq.n	802434e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 802434a:	2301      	movs	r3, #1
 802434c:	e0ac      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 802434e:	4b2e      	ldr	r3, [pc, #184]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024350:	681b      	ldr	r3, [r3, #0]
 8024352:	4a2d      	ldr	r2, [pc, #180]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8024358:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 802435a:	f7fd fad9 	bl	8021910 <HAL_GetTick>
 802435e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8024360:	e008      	b.n	8024374 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024362:	f7fd fad5 	bl	8021910 <HAL_GetTick>
 8024366:	4602      	mov	r2, r0
 8024368:	693b      	ldr	r3, [r7, #16]
 802436a:	1ad3      	subs	r3, r2, r3
 802436c:	2b02      	cmp	r3, #2
 802436e:	d901      	bls.n	8024374 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8024370:	2303      	movs	r3, #3
 8024372:	e099      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8024374:	4b24      	ldr	r3, [pc, #144]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802437c:	2b00      	cmp	r3, #0
 802437e:	d1f0      	bne.n	8024362 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8024380:	4b21      	ldr	r3, [pc, #132]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 8024382:	68da      	ldr	r2, [r3, #12]
 8024384:	4b21      	ldr	r3, [pc, #132]	@ (802440c <HAL_RCC_OscConfig+0x788>)
 8024386:	4013      	ands	r3, r2
 8024388:	687a      	ldr	r2, [r7, #4]
 802438a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 802438c:	687a      	ldr	r2, [r7, #4]
 802438e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8024390:	3a01      	subs	r2, #1
 8024392:	0112      	lsls	r2, r2, #4
 8024394:	4311      	orrs	r1, r2
 8024396:	687a      	ldr	r2, [r7, #4]
 8024398:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802439a:	0212      	lsls	r2, r2, #8
 802439c:	4311      	orrs	r1, r2
 802439e:	687a      	ldr	r2, [r7, #4]
 80243a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80243a2:	0852      	lsrs	r2, r2, #1
 80243a4:	3a01      	subs	r2, #1
 80243a6:	0552      	lsls	r2, r2, #21
 80243a8:	4311      	orrs	r1, r2
 80243aa:	687a      	ldr	r2, [r7, #4]
 80243ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80243ae:	0852      	lsrs	r2, r2, #1
 80243b0:	3a01      	subs	r2, #1
 80243b2:	0652      	lsls	r2, r2, #25
 80243b4:	4311      	orrs	r1, r2
 80243b6:	687a      	ldr	r2, [r7, #4]
 80243b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80243ba:	06d2      	lsls	r2, r2, #27
 80243bc:	430a      	orrs	r2, r1
 80243be:	4912      	ldr	r1, [pc, #72]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243c0:	4313      	orrs	r3, r2
 80243c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80243c4:	4b10      	ldr	r3, [pc, #64]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243c6:	681b      	ldr	r3, [r3, #0]
 80243c8:	4a0f      	ldr	r2, [pc, #60]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80243ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80243d0:	4b0d      	ldr	r3, [pc, #52]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243d2:	68db      	ldr	r3, [r3, #12]
 80243d4:	4a0c      	ldr	r2, [pc, #48]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80243da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80243dc:	f7fd fa98 	bl	8021910 <HAL_GetTick>
 80243e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80243e2:	e008      	b.n	80243f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80243e4:	f7fd fa94 	bl	8021910 <HAL_GetTick>
 80243e8:	4602      	mov	r2, r0
 80243ea:	693b      	ldr	r3, [r7, #16]
 80243ec:	1ad3      	subs	r3, r2, r3
 80243ee:	2b02      	cmp	r3, #2
 80243f0:	d901      	bls.n	80243f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80243f2:	2303      	movs	r3, #3
 80243f4:	e058      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80243f6:	4b04      	ldr	r3, [pc, #16]	@ (8024408 <HAL_RCC_OscConfig+0x784>)
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d0f0      	beq.n	80243e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8024402:	e050      	b.n	80244a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8024404:	2301      	movs	r3, #1
 8024406:	e04f      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
 8024408:	40021000 	.word	0x40021000
 802440c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8024410:	4b27      	ldr	r3, [pc, #156]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024412:	681b      	ldr	r3, [r3, #0]
 8024414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024418:	2b00      	cmp	r3, #0
 802441a:	d144      	bne.n	80244a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 802441c:	4b24      	ldr	r3, [pc, #144]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	4a23      	ldr	r2, [pc, #140]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8024426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8024428:	4b21      	ldr	r3, [pc, #132]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 802442a:	68db      	ldr	r3, [r3, #12]
 802442c:	4a20      	ldr	r2, [pc, #128]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 802442e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8024432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8024434:	f7fd fa6c 	bl	8021910 <HAL_GetTick>
 8024438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802443a:	e008      	b.n	802444e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802443c:	f7fd fa68 	bl	8021910 <HAL_GetTick>
 8024440:	4602      	mov	r2, r0
 8024442:	693b      	ldr	r3, [r7, #16]
 8024444:	1ad3      	subs	r3, r2, r3
 8024446:	2b02      	cmp	r3, #2
 8024448:	d901      	bls.n	802444e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 802444a:	2303      	movs	r3, #3
 802444c:	e02c      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802444e:	4b18      	ldr	r3, [pc, #96]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024450:	681b      	ldr	r3, [r3, #0]
 8024452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024456:	2b00      	cmp	r3, #0
 8024458:	d0f0      	beq.n	802443c <HAL_RCC_OscConfig+0x7b8>
 802445a:	e024      	b.n	80244a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 802445c:	69bb      	ldr	r3, [r7, #24]
 802445e:	2b0c      	cmp	r3, #12
 8024460:	d01f      	beq.n	80244a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024462:	4b13      	ldr	r3, [pc, #76]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024464:	681b      	ldr	r3, [r3, #0]
 8024466:	4a12      	ldr	r2, [pc, #72]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024468:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 802446c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802446e:	f7fd fa4f 	bl	8021910 <HAL_GetTick>
 8024472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8024474:	e008      	b.n	8024488 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024476:	f7fd fa4b 	bl	8021910 <HAL_GetTick>
 802447a:	4602      	mov	r2, r0
 802447c:	693b      	ldr	r3, [r7, #16]
 802447e:	1ad3      	subs	r3, r2, r3
 8024480:	2b02      	cmp	r3, #2
 8024482:	d901      	bls.n	8024488 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8024484:	2303      	movs	r3, #3
 8024486:	e00f      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8024488:	4b09      	ldr	r3, [pc, #36]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8024490:	2b00      	cmp	r3, #0
 8024492:	d1f0      	bne.n	8024476 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8024494:	4b06      	ldr	r3, [pc, #24]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 8024496:	68da      	ldr	r2, [r3, #12]
 8024498:	4905      	ldr	r1, [pc, #20]	@ (80244b0 <HAL_RCC_OscConfig+0x82c>)
 802449a:	4b06      	ldr	r3, [pc, #24]	@ (80244b4 <HAL_RCC_OscConfig+0x830>)
 802449c:	4013      	ands	r3, r2
 802449e:	60cb      	str	r3, [r1, #12]
 80244a0:	e001      	b.n	80244a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80244a2:	2301      	movs	r3, #1
 80244a4:	e000      	b.n	80244a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80244a6:	2300      	movs	r3, #0
}
 80244a8:	4618      	mov	r0, r3
 80244aa:	3720      	adds	r7, #32
 80244ac:	46bd      	mov	sp, r7
 80244ae:	bd80      	pop	{r7, pc}
 80244b0:	40021000 	.word	0x40021000
 80244b4:	feeefffc 	.word	0xfeeefffc

080244b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80244b8:	b580      	push	{r7, lr}
 80244ba:	b086      	sub	sp, #24
 80244bc:	af00      	add	r7, sp, #0
 80244be:	6078      	str	r0, [r7, #4]
 80244c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80244c2:	2300      	movs	r3, #0
 80244c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	2b00      	cmp	r3, #0
 80244ca:	d101      	bne.n	80244d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80244cc:	2301      	movs	r3, #1
 80244ce:	e11d      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80244d0:	4b90      	ldr	r3, [pc, #576]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 80244d2:	681b      	ldr	r3, [r3, #0]
 80244d4:	f003 030f 	and.w	r3, r3, #15
 80244d8:	683a      	ldr	r2, [r7, #0]
 80244da:	429a      	cmp	r2, r3
 80244dc:	d910      	bls.n	8024500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80244de:	4b8d      	ldr	r3, [pc, #564]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	f023 020f 	bic.w	r2, r3, #15
 80244e6:	498b      	ldr	r1, [pc, #556]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 80244e8:	683b      	ldr	r3, [r7, #0]
 80244ea:	4313      	orrs	r3, r2
 80244ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80244ee:	4b89      	ldr	r3, [pc, #548]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	f003 030f 	and.w	r3, r3, #15
 80244f6:	683a      	ldr	r2, [r7, #0]
 80244f8:	429a      	cmp	r2, r3
 80244fa:	d001      	beq.n	8024500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80244fc:	2301      	movs	r3, #1
 80244fe:	e105      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	681b      	ldr	r3, [r3, #0]
 8024504:	f003 0302 	and.w	r3, r3, #2
 8024508:	2b00      	cmp	r3, #0
 802450a:	d010      	beq.n	802452e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 802450c:	687b      	ldr	r3, [r7, #4]
 802450e:	689a      	ldr	r2, [r3, #8]
 8024510:	4b81      	ldr	r3, [pc, #516]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024512:	689b      	ldr	r3, [r3, #8]
 8024514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024518:	429a      	cmp	r2, r3
 802451a:	d908      	bls.n	802452e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802451c:	4b7e      	ldr	r3, [pc, #504]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802451e:	689b      	ldr	r3, [r3, #8]
 8024520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	689b      	ldr	r3, [r3, #8]
 8024528:	497b      	ldr	r1, [pc, #492]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802452a:	4313      	orrs	r3, r2
 802452c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	681b      	ldr	r3, [r3, #0]
 8024532:	f003 0301 	and.w	r3, r3, #1
 8024536:	2b00      	cmp	r3, #0
 8024538:	d079      	beq.n	802462e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802453a:	687b      	ldr	r3, [r7, #4]
 802453c:	685b      	ldr	r3, [r3, #4]
 802453e:	2b03      	cmp	r3, #3
 8024540:	d11e      	bne.n	8024580 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8024542:	4b75      	ldr	r3, [pc, #468]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024544:	681b      	ldr	r3, [r3, #0]
 8024546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802454a:	2b00      	cmp	r3, #0
 802454c:	d101      	bne.n	8024552 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 802454e:	2301      	movs	r3, #1
 8024550:	e0dc      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8024552:	f000 fa09 	bl	8024968 <RCC_GetSysClockFreqFromPLLSource>
 8024556:	4603      	mov	r3, r0
 8024558:	4a70      	ldr	r2, [pc, #448]	@ (802471c <HAL_RCC_ClockConfig+0x264>)
 802455a:	4293      	cmp	r3, r2
 802455c:	d946      	bls.n	80245ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 802455e:	4b6e      	ldr	r3, [pc, #440]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024560:	689b      	ldr	r3, [r3, #8]
 8024562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024566:	2b00      	cmp	r3, #0
 8024568:	d140      	bne.n	80245ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 802456a:	4b6b      	ldr	r3, [pc, #428]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802456c:	689b      	ldr	r3, [r3, #8]
 802456e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8024572:	4a69      	ldr	r2, [pc, #420]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024578:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 802457a:	2380      	movs	r3, #128	@ 0x80
 802457c:	617b      	str	r3, [r7, #20]
 802457e:	e035      	b.n	80245ec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024580:	687b      	ldr	r3, [r7, #4]
 8024582:	685b      	ldr	r3, [r3, #4]
 8024584:	2b02      	cmp	r3, #2
 8024586:	d107      	bne.n	8024598 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8024588:	4b63      	ldr	r3, [pc, #396]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024590:	2b00      	cmp	r3, #0
 8024592:	d115      	bne.n	80245c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8024594:	2301      	movs	r3, #1
 8024596:	e0b9      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	685b      	ldr	r3, [r3, #4]
 802459c:	2b00      	cmp	r3, #0
 802459e:	d107      	bne.n	80245b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80245a0:	4b5d      	ldr	r3, [pc, #372]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245a2:	681b      	ldr	r3, [r3, #0]
 80245a4:	f003 0302 	and.w	r3, r3, #2
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d109      	bne.n	80245c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80245ac:	2301      	movs	r3, #1
 80245ae:	e0ad      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80245b0:	4b59      	ldr	r3, [pc, #356]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245b2:	681b      	ldr	r3, [r3, #0]
 80245b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d101      	bne.n	80245c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80245bc:	2301      	movs	r3, #1
 80245be:	e0a5      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80245c0:	f000 f8b4 	bl	802472c <HAL_RCC_GetSysClockFreq>
 80245c4:	4603      	mov	r3, r0
 80245c6:	4a55      	ldr	r2, [pc, #340]	@ (802471c <HAL_RCC_ClockConfig+0x264>)
 80245c8:	4293      	cmp	r3, r2
 80245ca:	d90f      	bls.n	80245ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80245cc:	4b52      	ldr	r3, [pc, #328]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245ce:	689b      	ldr	r3, [r3, #8]
 80245d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80245d4:	2b00      	cmp	r3, #0
 80245d6:	d109      	bne.n	80245ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80245d8:	4b4f      	ldr	r3, [pc, #316]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245da:	689b      	ldr	r3, [r3, #8]
 80245dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80245e0:	4a4d      	ldr	r2, [pc, #308]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80245e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80245e8:	2380      	movs	r3, #128	@ 0x80
 80245ea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80245ec:	4b4a      	ldr	r3, [pc, #296]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245ee:	689b      	ldr	r3, [r3, #8]
 80245f0:	f023 0203 	bic.w	r2, r3, #3
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	685b      	ldr	r3, [r3, #4]
 80245f8:	4947      	ldr	r1, [pc, #284]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80245fa:	4313      	orrs	r3, r2
 80245fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80245fe:	f7fd f987 	bl	8021910 <HAL_GetTick>
 8024602:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024604:	e00a      	b.n	802461c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024606:	f7fd f983 	bl	8021910 <HAL_GetTick>
 802460a:	4602      	mov	r2, r0
 802460c:	693b      	ldr	r3, [r7, #16]
 802460e:	1ad3      	subs	r3, r2, r3
 8024610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8024614:	4293      	cmp	r3, r2
 8024616:	d901      	bls.n	802461c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8024618:	2303      	movs	r3, #3
 802461a:	e077      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802461c:	4b3e      	ldr	r3, [pc, #248]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802461e:	689b      	ldr	r3, [r3, #8]
 8024620:	f003 020c 	and.w	r2, r3, #12
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	685b      	ldr	r3, [r3, #4]
 8024628:	009b      	lsls	r3, r3, #2
 802462a:	429a      	cmp	r2, r3
 802462c:	d1eb      	bne.n	8024606 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 802462e:	697b      	ldr	r3, [r7, #20]
 8024630:	2b80      	cmp	r3, #128	@ 0x80
 8024632:	d105      	bne.n	8024640 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8024634:	4b38      	ldr	r3, [pc, #224]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024636:	689b      	ldr	r3, [r3, #8]
 8024638:	4a37      	ldr	r2, [pc, #220]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802463a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802463e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	f003 0302 	and.w	r3, r3, #2
 8024648:	2b00      	cmp	r3, #0
 802464a:	d010      	beq.n	802466e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	689a      	ldr	r2, [r3, #8]
 8024650:	4b31      	ldr	r3, [pc, #196]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 8024652:	689b      	ldr	r3, [r3, #8]
 8024654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024658:	429a      	cmp	r2, r3
 802465a:	d208      	bcs.n	802466e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802465c:	4b2e      	ldr	r3, [pc, #184]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802465e:	689b      	ldr	r3, [r3, #8]
 8024660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	689b      	ldr	r3, [r3, #8]
 8024668:	492b      	ldr	r1, [pc, #172]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 802466a:	4313      	orrs	r3, r2
 802466c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802466e:	4b29      	ldr	r3, [pc, #164]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 8024670:	681b      	ldr	r3, [r3, #0]
 8024672:	f003 030f 	and.w	r3, r3, #15
 8024676:	683a      	ldr	r2, [r7, #0]
 8024678:	429a      	cmp	r2, r3
 802467a:	d210      	bcs.n	802469e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802467c:	4b25      	ldr	r3, [pc, #148]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 802467e:	681b      	ldr	r3, [r3, #0]
 8024680:	f023 020f 	bic.w	r2, r3, #15
 8024684:	4923      	ldr	r1, [pc, #140]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 8024686:	683b      	ldr	r3, [r7, #0]
 8024688:	4313      	orrs	r3, r2
 802468a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802468c:	4b21      	ldr	r3, [pc, #132]	@ (8024714 <HAL_RCC_ClockConfig+0x25c>)
 802468e:	681b      	ldr	r3, [r3, #0]
 8024690:	f003 030f 	and.w	r3, r3, #15
 8024694:	683a      	ldr	r2, [r7, #0]
 8024696:	429a      	cmp	r2, r3
 8024698:	d001      	beq.n	802469e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802469a:	2301      	movs	r3, #1
 802469c:	e036      	b.n	802470c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	f003 0304 	and.w	r3, r3, #4
 80246a6:	2b00      	cmp	r3, #0
 80246a8:	d008      	beq.n	80246bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80246aa:	4b1b      	ldr	r3, [pc, #108]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80246ac:	689b      	ldr	r3, [r3, #8]
 80246ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80246b2:	687b      	ldr	r3, [r7, #4]
 80246b4:	68db      	ldr	r3, [r3, #12]
 80246b6:	4918      	ldr	r1, [pc, #96]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80246b8:	4313      	orrs	r3, r2
 80246ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80246bc:	687b      	ldr	r3, [r7, #4]
 80246be:	681b      	ldr	r3, [r3, #0]
 80246c0:	f003 0308 	and.w	r3, r3, #8
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d009      	beq.n	80246dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80246c8:	4b13      	ldr	r3, [pc, #76]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80246ca:	689b      	ldr	r3, [r3, #8]
 80246cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	691b      	ldr	r3, [r3, #16]
 80246d4:	00db      	lsls	r3, r3, #3
 80246d6:	4910      	ldr	r1, [pc, #64]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80246d8:	4313      	orrs	r3, r2
 80246da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80246dc:	f000 f826 	bl	802472c <HAL_RCC_GetSysClockFreq>
 80246e0:	4602      	mov	r2, r0
 80246e2:	4b0d      	ldr	r3, [pc, #52]	@ (8024718 <HAL_RCC_ClockConfig+0x260>)
 80246e4:	689b      	ldr	r3, [r3, #8]
 80246e6:	091b      	lsrs	r3, r3, #4
 80246e8:	f003 030f 	and.w	r3, r3, #15
 80246ec:	490c      	ldr	r1, [pc, #48]	@ (8024720 <HAL_RCC_ClockConfig+0x268>)
 80246ee:	5ccb      	ldrb	r3, [r1, r3]
 80246f0:	f003 031f 	and.w	r3, r3, #31
 80246f4:	fa22 f303 	lsr.w	r3, r2, r3
 80246f8:	4a0a      	ldr	r2, [pc, #40]	@ (8024724 <HAL_RCC_ClockConfig+0x26c>)
 80246fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80246fc:	4b0a      	ldr	r3, [pc, #40]	@ (8024728 <HAL_RCC_ClockConfig+0x270>)
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	4618      	mov	r0, r3
 8024702:	f7fd f8b5 	bl	8021870 <HAL_InitTick>
 8024706:	4603      	mov	r3, r0
 8024708:	73fb      	strb	r3, [r7, #15]

  return status;
 802470a:	7bfb      	ldrb	r3, [r7, #15]
}
 802470c:	4618      	mov	r0, r3
 802470e:	3718      	adds	r7, #24
 8024710:	46bd      	mov	sp, r7
 8024712:	bd80      	pop	{r7, pc}
 8024714:	40022000 	.word	0x40022000
 8024718:	40021000 	.word	0x40021000
 802471c:	04c4b400 	.word	0x04c4b400
 8024720:	08027168 	.word	0x08027168
 8024724:	20000000 	.word	0x20000000
 8024728:	20000004 	.word	0x20000004

0802472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802472c:	b480      	push	{r7}
 802472e:	b089      	sub	sp, #36	@ 0x24
 8024730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8024732:	2300      	movs	r3, #0
 8024734:	61fb      	str	r3, [r7, #28]
 8024736:	2300      	movs	r3, #0
 8024738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 802473a:	4b3e      	ldr	r3, [pc, #248]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 802473c:	689b      	ldr	r3, [r3, #8]
 802473e:	f003 030c 	and.w	r3, r3, #12
 8024742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8024744:	4b3b      	ldr	r3, [pc, #236]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 8024746:	68db      	ldr	r3, [r3, #12]
 8024748:	f003 0303 	and.w	r3, r3, #3
 802474c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 802474e:	693b      	ldr	r3, [r7, #16]
 8024750:	2b00      	cmp	r3, #0
 8024752:	d005      	beq.n	8024760 <HAL_RCC_GetSysClockFreq+0x34>
 8024754:	693b      	ldr	r3, [r7, #16]
 8024756:	2b0c      	cmp	r3, #12
 8024758:	d121      	bne.n	802479e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 802475a:	68fb      	ldr	r3, [r7, #12]
 802475c:	2b01      	cmp	r3, #1
 802475e:	d11e      	bne.n	802479e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8024760:	4b34      	ldr	r3, [pc, #208]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 8024762:	681b      	ldr	r3, [r3, #0]
 8024764:	f003 0308 	and.w	r3, r3, #8
 8024768:	2b00      	cmp	r3, #0
 802476a:	d107      	bne.n	802477c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 802476c:	4b31      	ldr	r3, [pc, #196]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 802476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8024772:	0a1b      	lsrs	r3, r3, #8
 8024774:	f003 030f 	and.w	r3, r3, #15
 8024778:	61fb      	str	r3, [r7, #28]
 802477a:	e005      	b.n	8024788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802477c:	4b2d      	ldr	r3, [pc, #180]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 802477e:	681b      	ldr	r3, [r3, #0]
 8024780:	091b      	lsrs	r3, r3, #4
 8024782:	f003 030f 	and.w	r3, r3, #15
 8024786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8024788:	4a2b      	ldr	r2, [pc, #172]	@ (8024838 <HAL_RCC_GetSysClockFreq+0x10c>)
 802478a:	69fb      	ldr	r3, [r7, #28]
 802478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024790:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8024792:	693b      	ldr	r3, [r7, #16]
 8024794:	2b00      	cmp	r3, #0
 8024796:	d10d      	bne.n	80247b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8024798:	69fb      	ldr	r3, [r7, #28]
 802479a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802479c:	e00a      	b.n	80247b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 802479e:	693b      	ldr	r3, [r7, #16]
 80247a0:	2b04      	cmp	r3, #4
 80247a2:	d102      	bne.n	80247aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80247a4:	4b25      	ldr	r3, [pc, #148]	@ (802483c <HAL_RCC_GetSysClockFreq+0x110>)
 80247a6:	61bb      	str	r3, [r7, #24]
 80247a8:	e004      	b.n	80247b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80247aa:	693b      	ldr	r3, [r7, #16]
 80247ac:	2b08      	cmp	r3, #8
 80247ae:	d101      	bne.n	80247b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80247b0:	4b23      	ldr	r3, [pc, #140]	@ (8024840 <HAL_RCC_GetSysClockFreq+0x114>)
 80247b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80247b4:	693b      	ldr	r3, [r7, #16]
 80247b6:	2b0c      	cmp	r3, #12
 80247b8:	d134      	bne.n	8024824 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80247ba:	4b1e      	ldr	r3, [pc, #120]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 80247bc:	68db      	ldr	r3, [r3, #12]
 80247be:	f003 0303 	and.w	r3, r3, #3
 80247c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80247c4:	68bb      	ldr	r3, [r7, #8]
 80247c6:	2b02      	cmp	r3, #2
 80247c8:	d003      	beq.n	80247d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80247ca:	68bb      	ldr	r3, [r7, #8]
 80247cc:	2b03      	cmp	r3, #3
 80247ce:	d003      	beq.n	80247d8 <HAL_RCC_GetSysClockFreq+0xac>
 80247d0:	e005      	b.n	80247de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80247d2:	4b1a      	ldr	r3, [pc, #104]	@ (802483c <HAL_RCC_GetSysClockFreq+0x110>)
 80247d4:	617b      	str	r3, [r7, #20]
      break;
 80247d6:	e005      	b.n	80247e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80247d8:	4b19      	ldr	r3, [pc, #100]	@ (8024840 <HAL_RCC_GetSysClockFreq+0x114>)
 80247da:	617b      	str	r3, [r7, #20]
      break;
 80247dc:	e002      	b.n	80247e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80247de:	69fb      	ldr	r3, [r7, #28]
 80247e0:	617b      	str	r3, [r7, #20]
      break;
 80247e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80247e4:	4b13      	ldr	r3, [pc, #76]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 80247e6:	68db      	ldr	r3, [r3, #12]
 80247e8:	091b      	lsrs	r3, r3, #4
 80247ea:	f003 030f 	and.w	r3, r3, #15
 80247ee:	3301      	adds	r3, #1
 80247f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80247f2:	4b10      	ldr	r3, [pc, #64]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 80247f4:	68db      	ldr	r3, [r3, #12]
 80247f6:	0a1b      	lsrs	r3, r3, #8
 80247f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80247fc:	697a      	ldr	r2, [r7, #20]
 80247fe:	fb03 f202 	mul.w	r2, r3, r2
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	fbb2 f3f3 	udiv	r3, r2, r3
 8024808:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 802480a:	4b0a      	ldr	r3, [pc, #40]	@ (8024834 <HAL_RCC_GetSysClockFreq+0x108>)
 802480c:	68db      	ldr	r3, [r3, #12]
 802480e:	0e5b      	lsrs	r3, r3, #25
 8024810:	f003 0303 	and.w	r3, r3, #3
 8024814:	3301      	adds	r3, #1
 8024816:	005b      	lsls	r3, r3, #1
 8024818:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 802481a:	697a      	ldr	r2, [r7, #20]
 802481c:	683b      	ldr	r3, [r7, #0]
 802481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024822:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8024824:	69bb      	ldr	r3, [r7, #24]
}
 8024826:	4618      	mov	r0, r3
 8024828:	3724      	adds	r7, #36	@ 0x24
 802482a:	46bd      	mov	sp, r7
 802482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024830:	4770      	bx	lr
 8024832:	bf00      	nop
 8024834:	40021000 	.word	0x40021000
 8024838:	08027180 	.word	0x08027180
 802483c:	00f42400 	.word	0x00f42400
 8024840:	007a1200 	.word	0x007a1200

08024844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024844:	b480      	push	{r7}
 8024846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8024848:	4b03      	ldr	r3, [pc, #12]	@ (8024858 <HAL_RCC_GetHCLKFreq+0x14>)
 802484a:	681b      	ldr	r3, [r3, #0]
}
 802484c:	4618      	mov	r0, r3
 802484e:	46bd      	mov	sp, r7
 8024850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024854:	4770      	bx	lr
 8024856:	bf00      	nop
 8024858:	20000000 	.word	0x20000000

0802485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802485c:	b580      	push	{r7, lr}
 802485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8024860:	f7ff fff0 	bl	8024844 <HAL_RCC_GetHCLKFreq>
 8024864:	4602      	mov	r2, r0
 8024866:	4b06      	ldr	r3, [pc, #24]	@ (8024880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8024868:	689b      	ldr	r3, [r3, #8]
 802486a:	0a1b      	lsrs	r3, r3, #8
 802486c:	f003 0307 	and.w	r3, r3, #7
 8024870:	4904      	ldr	r1, [pc, #16]	@ (8024884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8024872:	5ccb      	ldrb	r3, [r1, r3]
 8024874:	f003 031f 	and.w	r3, r3, #31
 8024878:	fa22 f303 	lsr.w	r3, r2, r3
}
 802487c:	4618      	mov	r0, r3
 802487e:	bd80      	pop	{r7, pc}
 8024880:	40021000 	.word	0x40021000
 8024884:	08027178 	.word	0x08027178

08024888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8024888:	b580      	push	{r7, lr}
 802488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 802488c:	f7ff ffda 	bl	8024844 <HAL_RCC_GetHCLKFreq>
 8024890:	4602      	mov	r2, r0
 8024892:	4b06      	ldr	r3, [pc, #24]	@ (80248ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8024894:	689b      	ldr	r3, [r3, #8]
 8024896:	0adb      	lsrs	r3, r3, #11
 8024898:	f003 0307 	and.w	r3, r3, #7
 802489c:	4904      	ldr	r1, [pc, #16]	@ (80248b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 802489e:	5ccb      	ldrb	r3, [r1, r3]
 80248a0:	f003 031f 	and.w	r3, r3, #31
 80248a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80248a8:	4618      	mov	r0, r3
 80248aa:	bd80      	pop	{r7, pc}
 80248ac:	40021000 	.word	0x40021000
 80248b0:	08027178 	.word	0x08027178

080248b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80248b4:	b580      	push	{r7, lr}
 80248b6:	b086      	sub	sp, #24
 80248b8:	af00      	add	r7, sp, #0
 80248ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80248bc:	2300      	movs	r3, #0
 80248be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80248c0:	4b27      	ldr	r3, [pc, #156]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80248c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d003      	beq.n	80248d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80248cc:	f7ff f916 	bl	8023afc <HAL_PWREx_GetVoltageRange>
 80248d0:	6178      	str	r0, [r7, #20]
 80248d2:	e014      	b.n	80248fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80248d4:	4b22      	ldr	r3, [pc, #136]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80248d8:	4a21      	ldr	r2, [pc, #132]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80248de:	6593      	str	r3, [r2, #88]	@ 0x58
 80248e0:	4b1f      	ldr	r3, [pc, #124]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80248e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80248e8:	60fb      	str	r3, [r7, #12]
 80248ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80248ec:	f7ff f906 	bl	8023afc <HAL_PWREx_GetVoltageRange>
 80248f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80248f2:	4b1b      	ldr	r3, [pc, #108]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80248f6:	4a1a      	ldr	r2, [pc, #104]	@ (8024960 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80248f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80248fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80248fe:	697b      	ldr	r3, [r7, #20]
 8024900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024904:	d10b      	bne.n	802491e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8024906:	687b      	ldr	r3, [r7, #4]
 8024908:	2b80      	cmp	r3, #128	@ 0x80
 802490a:	d913      	bls.n	8024934 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	2ba0      	cmp	r3, #160	@ 0xa0
 8024910:	d902      	bls.n	8024918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8024912:	2302      	movs	r3, #2
 8024914:	613b      	str	r3, [r7, #16]
 8024916:	e00d      	b.n	8024934 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8024918:	2301      	movs	r3, #1
 802491a:	613b      	str	r3, [r7, #16]
 802491c:	e00a      	b.n	8024934 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	2b7f      	cmp	r3, #127	@ 0x7f
 8024922:	d902      	bls.n	802492a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8024924:	2302      	movs	r3, #2
 8024926:	613b      	str	r3, [r7, #16]
 8024928:	e004      	b.n	8024934 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	2b70      	cmp	r3, #112	@ 0x70
 802492e:	d101      	bne.n	8024934 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8024930:	2301      	movs	r3, #1
 8024932:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8024934:	4b0b      	ldr	r3, [pc, #44]	@ (8024964 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8024936:	681b      	ldr	r3, [r3, #0]
 8024938:	f023 020f 	bic.w	r2, r3, #15
 802493c:	4909      	ldr	r1, [pc, #36]	@ (8024964 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802493e:	693b      	ldr	r3, [r7, #16]
 8024940:	4313      	orrs	r3, r2
 8024942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8024944:	4b07      	ldr	r3, [pc, #28]	@ (8024964 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	f003 030f 	and.w	r3, r3, #15
 802494c:	693a      	ldr	r2, [r7, #16]
 802494e:	429a      	cmp	r2, r3
 8024950:	d001      	beq.n	8024956 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8024952:	2301      	movs	r3, #1
 8024954:	e000      	b.n	8024958 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8024956:	2300      	movs	r3, #0
}
 8024958:	4618      	mov	r0, r3
 802495a:	3718      	adds	r7, #24
 802495c:	46bd      	mov	sp, r7
 802495e:	bd80      	pop	{r7, pc}
 8024960:	40021000 	.word	0x40021000
 8024964:	40022000 	.word	0x40022000

08024968 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8024968:	b480      	push	{r7}
 802496a:	b087      	sub	sp, #28
 802496c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802496e:	4b2d      	ldr	r3, [pc, #180]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8024970:	68db      	ldr	r3, [r3, #12]
 8024972:	f003 0303 	and.w	r3, r3, #3
 8024976:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8024978:	68fb      	ldr	r3, [r7, #12]
 802497a:	2b03      	cmp	r3, #3
 802497c:	d00b      	beq.n	8024996 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 802497e:	68fb      	ldr	r3, [r7, #12]
 8024980:	2b03      	cmp	r3, #3
 8024982:	d825      	bhi.n	80249d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8024984:	68fb      	ldr	r3, [r7, #12]
 8024986:	2b01      	cmp	r3, #1
 8024988:	d008      	beq.n	802499c <RCC_GetSysClockFreqFromPLLSource+0x34>
 802498a:	68fb      	ldr	r3, [r7, #12]
 802498c:	2b02      	cmp	r3, #2
 802498e:	d11f      	bne.n	80249d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8024990:	4b25      	ldr	r3, [pc, #148]	@ (8024a28 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8024992:	613b      	str	r3, [r7, #16]
    break;
 8024994:	e01f      	b.n	80249d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8024996:	4b25      	ldr	r3, [pc, #148]	@ (8024a2c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8024998:	613b      	str	r3, [r7, #16]
    break;
 802499a:	e01c      	b.n	80249d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 802499c:	4b21      	ldr	r3, [pc, #132]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802499e:	681b      	ldr	r3, [r3, #0]
 80249a0:	f003 0308 	and.w	r3, r3, #8
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	d107      	bne.n	80249b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80249a8:	4b1e      	ldr	r3, [pc, #120]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80249aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80249ae:	0a1b      	lsrs	r3, r3, #8
 80249b0:	f003 030f 	and.w	r3, r3, #15
 80249b4:	617b      	str	r3, [r7, #20]
 80249b6:	e005      	b.n	80249c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80249b8:	4b1a      	ldr	r3, [pc, #104]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	091b      	lsrs	r3, r3, #4
 80249be:	f003 030f 	and.w	r3, r3, #15
 80249c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80249c4:	4a1a      	ldr	r2, [pc, #104]	@ (8024a30 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80249c6:	697b      	ldr	r3, [r7, #20]
 80249c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80249cc:	613b      	str	r3, [r7, #16]
    break;
 80249ce:	e002      	b.n	80249d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80249d0:	2300      	movs	r3, #0
 80249d2:	613b      	str	r3, [r7, #16]
    break;
 80249d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80249d6:	4b13      	ldr	r3, [pc, #76]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80249d8:	68db      	ldr	r3, [r3, #12]
 80249da:	091b      	lsrs	r3, r3, #4
 80249dc:	f003 030f 	and.w	r3, r3, #15
 80249e0:	3301      	adds	r3, #1
 80249e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80249e4:	4b0f      	ldr	r3, [pc, #60]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80249e6:	68db      	ldr	r3, [r3, #12]
 80249e8:	0a1b      	lsrs	r3, r3, #8
 80249ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80249ee:	693a      	ldr	r2, [r7, #16]
 80249f0:	fb03 f202 	mul.w	r2, r3, r2
 80249f4:	68bb      	ldr	r3, [r7, #8]
 80249f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80249fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80249fc:	4b09      	ldr	r3, [pc, #36]	@ (8024a24 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80249fe:	68db      	ldr	r3, [r3, #12]
 8024a00:	0e5b      	lsrs	r3, r3, #25
 8024a02:	f003 0303 	and.w	r3, r3, #3
 8024a06:	3301      	adds	r3, #1
 8024a08:	005b      	lsls	r3, r3, #1
 8024a0a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8024a0c:	693a      	ldr	r2, [r7, #16]
 8024a0e:	687b      	ldr	r3, [r7, #4]
 8024a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8024a14:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8024a16:	683b      	ldr	r3, [r7, #0]
}
 8024a18:	4618      	mov	r0, r3
 8024a1a:	371c      	adds	r7, #28
 8024a1c:	46bd      	mov	sp, r7
 8024a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a22:	4770      	bx	lr
 8024a24:	40021000 	.word	0x40021000
 8024a28:	00f42400 	.word	0x00f42400
 8024a2c:	007a1200 	.word	0x007a1200
 8024a30:	08027180 	.word	0x08027180

08024a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8024a34:	b580      	push	{r7, lr}
 8024a36:	b086      	sub	sp, #24
 8024a38:	af00      	add	r7, sp, #0
 8024a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8024a3c:	2300      	movs	r3, #0
 8024a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8024a40:	2300      	movs	r3, #0
 8024a42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8024a44:	687b      	ldr	r3, [r7, #4]
 8024a46:	681b      	ldr	r3, [r3, #0]
 8024a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d040      	beq.n	8024ad2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8024a50:	687b      	ldr	r3, [r7, #4]
 8024a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024a54:	2b80      	cmp	r3, #128	@ 0x80
 8024a56:	d02a      	beq.n	8024aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8024a58:	2b80      	cmp	r3, #128	@ 0x80
 8024a5a:	d825      	bhi.n	8024aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8024a5c:	2b60      	cmp	r3, #96	@ 0x60
 8024a5e:	d026      	beq.n	8024aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8024a60:	2b60      	cmp	r3, #96	@ 0x60
 8024a62:	d821      	bhi.n	8024aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8024a64:	2b40      	cmp	r3, #64	@ 0x40
 8024a66:	d006      	beq.n	8024a76 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8024a68:	2b40      	cmp	r3, #64	@ 0x40
 8024a6a:	d81d      	bhi.n	8024aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	d009      	beq.n	8024a84 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8024a70:	2b20      	cmp	r3, #32
 8024a72:	d010      	beq.n	8024a96 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8024a74:	e018      	b.n	8024aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8024a76:	4b89      	ldr	r3, [pc, #548]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024a78:	68db      	ldr	r3, [r3, #12]
 8024a7a:	4a88      	ldr	r2, [pc, #544]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024a80:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8024a82:	e015      	b.n	8024ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	3304      	adds	r3, #4
 8024a88:	2100      	movs	r1, #0
 8024a8a:	4618      	mov	r0, r3
 8024a8c:	f000 fb12 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024a90:	4603      	mov	r3, r0
 8024a92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8024a94:	e00c      	b.n	8024ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8024a96:	687b      	ldr	r3, [r7, #4]
 8024a98:	3320      	adds	r3, #32
 8024a9a:	2100      	movs	r1, #0
 8024a9c:	4618      	mov	r0, r3
 8024a9e:	f000 fbfd 	bl	802529c <RCCEx_PLLSAI2_Config>
 8024aa2:	4603      	mov	r3, r0
 8024aa4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8024aa6:	e003      	b.n	8024ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8024aa8:	2301      	movs	r3, #1
 8024aaa:	74fb      	strb	r3, [r7, #19]
      break;
 8024aac:	e000      	b.n	8024ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8024aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8024ab0:	7cfb      	ldrb	r3, [r7, #19]
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d10b      	bne.n	8024ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8024ab6:	4b79      	ldr	r3, [pc, #484]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024abc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024ac4:	4975      	ldr	r1, [pc, #468]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024ac6:	4313      	orrs	r3, r2
 8024ac8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8024acc:	e001      	b.n	8024ad2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8024ace:	7cfb      	ldrb	r3, [r7, #19]
 8024ad0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8024ad2:	687b      	ldr	r3, [r7, #4]
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8024ada:	2b00      	cmp	r3, #0
 8024adc:	d047      	beq.n	8024b6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024ae6:	d030      	beq.n	8024b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8024ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024aec:	d82a      	bhi.n	8024b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8024aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8024af2:	d02a      	beq.n	8024b4a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8024af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8024af8:	d824      	bhi.n	8024b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8024afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024afe:	d008      	beq.n	8024b12 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8024b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024b04:	d81e      	bhi.n	8024b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8024b06:	2b00      	cmp	r3, #0
 8024b08:	d00a      	beq.n	8024b20 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8024b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8024b0e:	d010      	beq.n	8024b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8024b10:	e018      	b.n	8024b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8024b12:	4b62      	ldr	r3, [pc, #392]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b14:	68db      	ldr	r3, [r3, #12]
 8024b16:	4a61      	ldr	r2, [pc, #388]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024b1c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8024b1e:	e015      	b.n	8024b4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	3304      	adds	r3, #4
 8024b24:	2100      	movs	r1, #0
 8024b26:	4618      	mov	r0, r3
 8024b28:	f000 fac4 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024b2c:	4603      	mov	r3, r0
 8024b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8024b30:	e00c      	b.n	8024b4c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	3320      	adds	r3, #32
 8024b36:	2100      	movs	r1, #0
 8024b38:	4618      	mov	r0, r3
 8024b3a:	f000 fbaf 	bl	802529c <RCCEx_PLLSAI2_Config>
 8024b3e:	4603      	mov	r3, r0
 8024b40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8024b42:	e003      	b.n	8024b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8024b44:	2301      	movs	r3, #1
 8024b46:	74fb      	strb	r3, [r7, #19]
      break;
 8024b48:	e000      	b.n	8024b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8024b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8024b4c:	7cfb      	ldrb	r3, [r7, #19]
 8024b4e:	2b00      	cmp	r3, #0
 8024b50:	d10b      	bne.n	8024b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8024b52:	4b52      	ldr	r3, [pc, #328]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8024b60:	494e      	ldr	r1, [pc, #312]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b62:	4313      	orrs	r3, r2
 8024b64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8024b68:	e001      	b.n	8024b6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8024b6a:	7cfb      	ldrb	r3, [r7, #19]
 8024b6c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	f000 809f 	beq.w	8024cba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8024b7c:	2300      	movs	r3, #0
 8024b7e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8024b80:	4b46      	ldr	r3, [pc, #280]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024b88:	2b00      	cmp	r3, #0
 8024b8a:	d101      	bne.n	8024b90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8024b8c:	2301      	movs	r3, #1
 8024b8e:	e000      	b.n	8024b92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8024b90:	2300      	movs	r3, #0
 8024b92:	2b00      	cmp	r3, #0
 8024b94:	d00d      	beq.n	8024bb2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8024b96:	4b41      	ldr	r3, [pc, #260]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024b9a:	4a40      	ldr	r2, [pc, #256]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8024ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8024ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024baa:	60bb      	str	r3, [r7, #8]
 8024bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024bae:	2301      	movs	r3, #1
 8024bb0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8024bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8024ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8024ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8024bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8024bbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8024bbe:	f7fc fea7 	bl	8021910 <HAL_GetTick>
 8024bc2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8024bc4:	e009      	b.n	8024bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024bc6:	f7fc fea3 	bl	8021910 <HAL_GetTick>
 8024bca:	4602      	mov	r2, r0
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	1ad3      	subs	r3, r2, r3
 8024bd0:	2b02      	cmp	r3, #2
 8024bd2:	d902      	bls.n	8024bda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8024bd4:	2303      	movs	r3, #3
 8024bd6:	74fb      	strb	r3, [r7, #19]
        break;
 8024bd8:	e005      	b.n	8024be6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8024bda:	4b31      	ldr	r3, [pc, #196]	@ (8024ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	d0ef      	beq.n	8024bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8024be6:	7cfb      	ldrb	r3, [r7, #19]
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d15b      	bne.n	8024ca4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8024bec:	4b2b      	ldr	r3, [pc, #172]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8024bf6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8024bf8:	697b      	ldr	r3, [r7, #20]
 8024bfa:	2b00      	cmp	r3, #0
 8024bfc:	d01f      	beq.n	8024c3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8024bfe:	687b      	ldr	r3, [r7, #4]
 8024c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c04:	697a      	ldr	r2, [r7, #20]
 8024c06:	429a      	cmp	r2, r3
 8024c08:	d019      	beq.n	8024c3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8024c0a:	4b24      	ldr	r3, [pc, #144]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8024c14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8024c16:	4b21      	ldr	r3, [pc, #132]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8024c26:	4b1d      	ldr	r3, [pc, #116]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8024c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8024c36:	4a19      	ldr	r2, [pc, #100]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c38:	697b      	ldr	r3, [r7, #20]
 8024c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8024c3e:	697b      	ldr	r3, [r7, #20]
 8024c40:	f003 0301 	and.w	r3, r3, #1
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d016      	beq.n	8024c76 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024c48:	f7fc fe62 	bl	8021910 <HAL_GetTick>
 8024c4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8024c4e:	e00b      	b.n	8024c68 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024c50:	f7fc fe5e 	bl	8021910 <HAL_GetTick>
 8024c54:	4602      	mov	r2, r0
 8024c56:	68fb      	ldr	r3, [r7, #12]
 8024c58:	1ad3      	subs	r3, r2, r3
 8024c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8024c5e:	4293      	cmp	r3, r2
 8024c60:	d902      	bls.n	8024c68 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8024c62:	2303      	movs	r3, #3
 8024c64:	74fb      	strb	r3, [r7, #19]
            break;
 8024c66:	e006      	b.n	8024c76 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8024c68:	4b0c      	ldr	r3, [pc, #48]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c6e:	f003 0302 	and.w	r3, r3, #2
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d0ec      	beq.n	8024c50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8024c76:	7cfb      	ldrb	r3, [r7, #19]
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	d10c      	bne.n	8024c96 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8024c7c:	4b07      	ldr	r3, [pc, #28]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c8c:	4903      	ldr	r1, [pc, #12]	@ (8024c9c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8024c8e:	4313      	orrs	r3, r2
 8024c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8024c94:	e008      	b.n	8024ca8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8024c96:	7cfb      	ldrb	r3, [r7, #19]
 8024c98:	74bb      	strb	r3, [r7, #18]
 8024c9a:	e005      	b.n	8024ca8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8024c9c:	40021000 	.word	0x40021000
 8024ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8024ca4:	7cfb      	ldrb	r3, [r7, #19]
 8024ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024ca8:	7c7b      	ldrb	r3, [r7, #17]
 8024caa:	2b01      	cmp	r3, #1
 8024cac:	d105      	bne.n	8024cba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024cae:	4ba0      	ldr	r3, [pc, #640]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024cb2:	4a9f      	ldr	r2, [pc, #636]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024cb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8024cba:	687b      	ldr	r3, [r7, #4]
 8024cbc:	681b      	ldr	r3, [r3, #0]
 8024cbe:	f003 0301 	and.w	r3, r3, #1
 8024cc2:	2b00      	cmp	r3, #0
 8024cc4:	d00a      	beq.n	8024cdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8024cc6:	4b9a      	ldr	r3, [pc, #616]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024ccc:	f023 0203 	bic.w	r2, r3, #3
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024cd4:	4996      	ldr	r1, [pc, #600]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cd6:	4313      	orrs	r3, r2
 8024cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	f003 0302 	and.w	r3, r3, #2
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d00a      	beq.n	8024cfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8024ce8:	4b91      	ldr	r3, [pc, #580]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024cee:	f023 020c 	bic.w	r2, r3, #12
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024cf6:	498e      	ldr	r1, [pc, #568]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024cf8:	4313      	orrs	r3, r2
 8024cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8024cfe:	687b      	ldr	r3, [r7, #4]
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	f003 0304 	and.w	r3, r3, #4
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	d00a      	beq.n	8024d20 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8024d0a:	4b89      	ldr	r3, [pc, #548]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024d10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024d18:	4985      	ldr	r1, [pc, #532]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d1a:	4313      	orrs	r3, r2
 8024d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	f003 0308 	and.w	r3, r3, #8
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	d00a      	beq.n	8024d42 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8024d2c:	4b80      	ldr	r3, [pc, #512]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024d32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8024d3a:	497d      	ldr	r1, [pc, #500]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d3c:	4313      	orrs	r3, r2
 8024d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	681b      	ldr	r3, [r3, #0]
 8024d46:	f003 0310 	and.w	r3, r3, #16
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	d00a      	beq.n	8024d64 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8024d4e:	4b78      	ldr	r3, [pc, #480]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8024d5c:	4974      	ldr	r1, [pc, #464]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d5e:	4313      	orrs	r3, r2
 8024d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	681b      	ldr	r3, [r3, #0]
 8024d68:	f003 0320 	and.w	r3, r3, #32
 8024d6c:	2b00      	cmp	r3, #0
 8024d6e:	d00a      	beq.n	8024d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8024d70:	4b6f      	ldr	r3, [pc, #444]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024d76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024d7e:	496c      	ldr	r1, [pc, #432]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d80:	4313      	orrs	r3, r2
 8024d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	681b      	ldr	r3, [r3, #0]
 8024d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	d00a      	beq.n	8024da8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8024d92:	4b67      	ldr	r3, [pc, #412]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024d98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024da0:	4963      	ldr	r1, [pc, #396]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024da2:	4313      	orrs	r3, r2
 8024da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024db0:	2b00      	cmp	r3, #0
 8024db2:	d00a      	beq.n	8024dca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8024db4:	4b5e      	ldr	r3, [pc, #376]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024dba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024dc2:	495b      	ldr	r1, [pc, #364]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024dc4:	4313      	orrs	r3, r2
 8024dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	d00a      	beq.n	8024dec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8024dd6:	4b56      	ldr	r3, [pc, #344]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024ddc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024de4:	4952      	ldr	r1, [pc, #328]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024de6:	4313      	orrs	r3, r2
 8024de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	681b      	ldr	r3, [r3, #0]
 8024df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d00a      	beq.n	8024e0e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8024df8:	4b4d      	ldr	r3, [pc, #308]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024dfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8024e02:	687b      	ldr	r3, [r7, #4]
 8024e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024e06:	494a      	ldr	r1, [pc, #296]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e08:	4313      	orrs	r3, r2
 8024e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	d00a      	beq.n	8024e30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8024e1a:	4b45      	ldr	r3, [pc, #276]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024e20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024e28:	4941      	ldr	r1, [pc, #260]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e2a:	4313      	orrs	r3, r2
 8024e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8024e30:	687b      	ldr	r3, [r7, #4]
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8024e38:	2b00      	cmp	r3, #0
 8024e3a:	d00a      	beq.n	8024e52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8024e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024e42:	f023 0203 	bic.w	r2, r3, #3
 8024e46:	687b      	ldr	r3, [r7, #4]
 8024e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024e4a:	4939      	ldr	r1, [pc, #228]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e4c:	4313      	orrs	r3, r2
 8024e4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8024e52:	687b      	ldr	r3, [r7, #4]
 8024e54:	681b      	ldr	r3, [r3, #0]
 8024e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d028      	beq.n	8024eb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8024e5e:	4b34      	ldr	r3, [pc, #208]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024e64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024e6c:	4930      	ldr	r1, [pc, #192]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e6e:	4313      	orrs	r3, r2
 8024e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8024e7c:	d106      	bne.n	8024e8c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8024e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e80:	68db      	ldr	r3, [r3, #12]
 8024e82:	4a2b      	ldr	r2, [pc, #172]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024e84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024e88:	60d3      	str	r3, [r2, #12]
 8024e8a:	e011      	b.n	8024eb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8024e8c:	687b      	ldr	r3, [r7, #4]
 8024e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8024e94:	d10c      	bne.n	8024eb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	3304      	adds	r3, #4
 8024e9a:	2101      	movs	r1, #1
 8024e9c:	4618      	mov	r0, r3
 8024e9e:	f000 f909 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8024ea6:	7cfb      	ldrb	r3, [r7, #19]
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d001      	beq.n	8024eb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8024eac:	7cfb      	ldrb	r3, [r7, #19]
 8024eae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	d04d      	beq.n	8024f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8024ebc:	687b      	ldr	r3, [r7, #4]
 8024ebe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8024ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8024ec4:	d108      	bne.n	8024ed8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8024ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024ecc:	4a18      	ldr	r2, [pc, #96]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8024ed2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8024ed6:	e012      	b.n	8024efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8024ed8:	4b15      	ldr	r3, [pc, #84]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024ede:	4a14      	ldr	r2, [pc, #80]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024ee0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8024ee4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8024ee8:	4b11      	ldr	r3, [pc, #68]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8024ef2:	687b      	ldr	r3, [r7, #4]
 8024ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8024ef6:	490e      	ldr	r1, [pc, #56]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024ef8:	4313      	orrs	r3, r2
 8024efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8024f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8024f06:	d106      	bne.n	8024f16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8024f08:	4b09      	ldr	r3, [pc, #36]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024f0a:	68db      	ldr	r3, [r3, #12]
 8024f0c:	4a08      	ldr	r2, [pc, #32]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024f12:	60d3      	str	r3, [r2, #12]
 8024f14:	e020      	b.n	8024f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8024f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8024f1e:	d109      	bne.n	8024f34 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8024f20:	4b03      	ldr	r3, [pc, #12]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024f22:	68db      	ldr	r3, [r3, #12]
 8024f24:	4a02      	ldr	r2, [pc, #8]	@ (8024f30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8024f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8024f2a:	60d3      	str	r3, [r2, #12]
 8024f2c:	e014      	b.n	8024f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8024f2e:	bf00      	nop
 8024f30:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8024f38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8024f3c:	d10c      	bne.n	8024f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	3304      	adds	r3, #4
 8024f42:	2101      	movs	r1, #1
 8024f44:	4618      	mov	r0, r3
 8024f46:	f000 f8b5 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8024f4e:	7cfb      	ldrb	r3, [r7, #19]
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	d001      	beq.n	8024f58 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8024f54:	7cfb      	ldrb	r3, [r7, #19]
 8024f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	681b      	ldr	r3, [r3, #0]
 8024f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	d028      	beq.n	8024fb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8024f64:	4b4a      	ldr	r3, [pc, #296]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024f6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8024f72:	4947      	ldr	r1, [pc, #284]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024f74:	4313      	orrs	r3, r2
 8024f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8024f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8024f82:	d106      	bne.n	8024f92 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8024f84:	4b42      	ldr	r3, [pc, #264]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024f86:	68db      	ldr	r3, [r3, #12]
 8024f88:	4a41      	ldr	r2, [pc, #260]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024f8e:	60d3      	str	r3, [r2, #12]
 8024f90:	e011      	b.n	8024fb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8024f96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8024f9a:	d10c      	bne.n	8024fb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	3304      	adds	r3, #4
 8024fa0:	2101      	movs	r1, #1
 8024fa2:	4618      	mov	r0, r3
 8024fa4:	f000 f886 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024fa8:	4603      	mov	r3, r0
 8024faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8024fac:	7cfb      	ldrb	r3, [r7, #19]
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d001      	beq.n	8024fb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8024fb2:	7cfb      	ldrb	r3, [r7, #19]
 8024fb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8024fb6:	687b      	ldr	r3, [r7, #4]
 8024fb8:	681b      	ldr	r3, [r3, #0]
 8024fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	d01e      	beq.n	8025000 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8024fc2:	4b33      	ldr	r3, [pc, #204]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024fc8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024fd2:	492f      	ldr	r1, [pc, #188]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8024fd4:	4313      	orrs	r3, r2
 8024fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8024fe4:	d10c      	bne.n	8025000 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	3304      	adds	r3, #4
 8024fea:	2102      	movs	r1, #2
 8024fec:	4618      	mov	r0, r3
 8024fee:	f000 f861 	bl	80250b4 <RCCEx_PLLSAI1_Config>
 8024ff2:	4603      	mov	r3, r0
 8024ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8024ff6:	7cfb      	ldrb	r3, [r7, #19]
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d001      	beq.n	8025000 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8024ffc:	7cfb      	ldrb	r3, [r7, #19]
 8024ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8025008:	2b00      	cmp	r3, #0
 802500a:	d00b      	beq.n	8025024 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802500c:	4b20      	ldr	r3, [pc, #128]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802500e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8025012:	f023 0204 	bic.w	r2, r3, #4
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802501c:	491c      	ldr	r1, [pc, #112]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802501e:	4313      	orrs	r3, r2
 8025020:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8025024:	687b      	ldr	r3, [r7, #4]
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802502c:	2b00      	cmp	r3, #0
 802502e:	d00b      	beq.n	8025048 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8025030:	4b17      	ldr	r3, [pc, #92]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8025032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8025036:	f023 0218 	bic.w	r2, r3, #24
 802503a:	687b      	ldr	r3, [r7, #4]
 802503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8025040:	4913      	ldr	r1, [pc, #76]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8025042:	4313      	orrs	r3, r2
 8025044:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8025050:	2b00      	cmp	r3, #0
 8025052:	d017      	beq.n	8025084 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8025054:	4b0e      	ldr	r3, [pc, #56]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8025056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802505a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8025064:	490a      	ldr	r1, [pc, #40]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8025066:	4313      	orrs	r3, r2
 8025068:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8025072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8025076:	d105      	bne.n	8025084 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8025078:	4b05      	ldr	r3, [pc, #20]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802507a:	68db      	ldr	r3, [r3, #12]
 802507c:	4a04      	ldr	r2, [pc, #16]	@ (8025090 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 802507e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8025082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8025084:	7cbb      	ldrb	r3, [r7, #18]
}
 8025086:	4618      	mov	r0, r3
 8025088:	3718      	adds	r7, #24
 802508a:	46bd      	mov	sp, r7
 802508c:	bd80      	pop	{r7, pc}
 802508e:	bf00      	nop
 8025090:	40021000 	.word	0x40021000

08025094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8025094:	b480      	push	{r7}
 8025096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8025098:	4b05      	ldr	r3, [pc, #20]	@ (80250b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 802509a:	681b      	ldr	r3, [r3, #0]
 802509c:	4a04      	ldr	r2, [pc, #16]	@ (80250b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 802509e:	f043 0304 	orr.w	r3, r3, #4
 80250a2:	6013      	str	r3, [r2, #0]
}
 80250a4:	bf00      	nop
 80250a6:	46bd      	mov	sp, r7
 80250a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ac:	4770      	bx	lr
 80250ae:	bf00      	nop
 80250b0:	40021000 	.word	0x40021000

080250b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80250b4:	b580      	push	{r7, lr}
 80250b6:	b084      	sub	sp, #16
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	6078      	str	r0, [r7, #4]
 80250bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80250be:	2300      	movs	r3, #0
 80250c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80250c2:	4b72      	ldr	r3, [pc, #456]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80250c4:	68db      	ldr	r3, [r3, #12]
 80250c6:	f003 0303 	and.w	r3, r3, #3
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d00e      	beq.n	80250ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80250ce:	4b6f      	ldr	r3, [pc, #444]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80250d0:	68db      	ldr	r3, [r3, #12]
 80250d2:	f003 0203 	and.w	r2, r3, #3
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	681b      	ldr	r3, [r3, #0]
 80250da:	429a      	cmp	r2, r3
 80250dc:	d103      	bne.n	80250e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80250de:	687b      	ldr	r3, [r7, #4]
 80250e0:	681b      	ldr	r3, [r3, #0]
       ||
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	d142      	bne.n	802516c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80250e6:	2301      	movs	r3, #1
 80250e8:	73fb      	strb	r3, [r7, #15]
 80250ea:	e03f      	b.n	802516c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	681b      	ldr	r3, [r3, #0]
 80250f0:	2b03      	cmp	r3, #3
 80250f2:	d018      	beq.n	8025126 <RCCEx_PLLSAI1_Config+0x72>
 80250f4:	2b03      	cmp	r3, #3
 80250f6:	d825      	bhi.n	8025144 <RCCEx_PLLSAI1_Config+0x90>
 80250f8:	2b01      	cmp	r3, #1
 80250fa:	d002      	beq.n	8025102 <RCCEx_PLLSAI1_Config+0x4e>
 80250fc:	2b02      	cmp	r3, #2
 80250fe:	d009      	beq.n	8025114 <RCCEx_PLLSAI1_Config+0x60>
 8025100:	e020      	b.n	8025144 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8025102:	4b62      	ldr	r3, [pc, #392]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025104:	681b      	ldr	r3, [r3, #0]
 8025106:	f003 0302 	and.w	r3, r3, #2
 802510a:	2b00      	cmp	r3, #0
 802510c:	d11d      	bne.n	802514a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 802510e:	2301      	movs	r3, #1
 8025110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025112:	e01a      	b.n	802514a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8025114:	4b5d      	ldr	r3, [pc, #372]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802511c:	2b00      	cmp	r3, #0
 802511e:	d116      	bne.n	802514e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8025120:	2301      	movs	r3, #1
 8025122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025124:	e013      	b.n	802514e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8025126:	4b59      	ldr	r3, [pc, #356]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802512e:	2b00      	cmp	r3, #0
 8025130:	d10f      	bne.n	8025152 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8025132:	4b56      	ldr	r3, [pc, #344]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802513a:	2b00      	cmp	r3, #0
 802513c:	d109      	bne.n	8025152 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 802513e:	2301      	movs	r3, #1
 8025140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8025142:	e006      	b.n	8025152 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8025144:	2301      	movs	r3, #1
 8025146:	73fb      	strb	r3, [r7, #15]
      break;
 8025148:	e004      	b.n	8025154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 802514a:	bf00      	nop
 802514c:	e002      	b.n	8025154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 802514e:	bf00      	nop
 8025150:	e000      	b.n	8025154 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8025152:	bf00      	nop
    }

    if(status == HAL_OK)
 8025154:	7bfb      	ldrb	r3, [r7, #15]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d108      	bne.n	802516c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 802515a:	4b4c      	ldr	r3, [pc, #304]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802515c:	68db      	ldr	r3, [r3, #12]
 802515e:	f023 0203 	bic.w	r2, r3, #3
 8025162:	687b      	ldr	r3, [r7, #4]
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	4949      	ldr	r1, [pc, #292]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025168:	4313      	orrs	r3, r2
 802516a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 802516c:	7bfb      	ldrb	r3, [r7, #15]
 802516e:	2b00      	cmp	r3, #0
 8025170:	f040 8086 	bne.w	8025280 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8025174:	4b45      	ldr	r3, [pc, #276]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	4a44      	ldr	r2, [pc, #272]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802517a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 802517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8025180:	f7fc fbc6 	bl	8021910 <HAL_GetTick>
 8025184:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8025186:	e009      	b.n	802519c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8025188:	f7fc fbc2 	bl	8021910 <HAL_GetTick>
 802518c:	4602      	mov	r2, r0
 802518e:	68bb      	ldr	r3, [r7, #8]
 8025190:	1ad3      	subs	r3, r2, r3
 8025192:	2b02      	cmp	r3, #2
 8025194:	d902      	bls.n	802519c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8025196:	2303      	movs	r3, #3
 8025198:	73fb      	strb	r3, [r7, #15]
        break;
 802519a:	e005      	b.n	80251a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 802519c:	4b3b      	ldr	r3, [pc, #236]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802519e:	681b      	ldr	r3, [r3, #0]
 80251a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80251a4:	2b00      	cmp	r3, #0
 80251a6:	d1ef      	bne.n	8025188 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80251a8:	7bfb      	ldrb	r3, [r7, #15]
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d168      	bne.n	8025280 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80251ae:	683b      	ldr	r3, [r7, #0]
 80251b0:	2b00      	cmp	r3, #0
 80251b2:	d113      	bne.n	80251dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80251b4:	4b35      	ldr	r3, [pc, #212]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80251b6:	691a      	ldr	r2, [r3, #16]
 80251b8:	4b35      	ldr	r3, [pc, #212]	@ (8025290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80251ba:	4013      	ands	r3, r2
 80251bc:	687a      	ldr	r2, [r7, #4]
 80251be:	6892      	ldr	r2, [r2, #8]
 80251c0:	0211      	lsls	r1, r2, #8
 80251c2:	687a      	ldr	r2, [r7, #4]
 80251c4:	68d2      	ldr	r2, [r2, #12]
 80251c6:	06d2      	lsls	r2, r2, #27
 80251c8:	4311      	orrs	r1, r2
 80251ca:	687a      	ldr	r2, [r7, #4]
 80251cc:	6852      	ldr	r2, [r2, #4]
 80251ce:	3a01      	subs	r2, #1
 80251d0:	0112      	lsls	r2, r2, #4
 80251d2:	430a      	orrs	r2, r1
 80251d4:	492d      	ldr	r1, [pc, #180]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80251d6:	4313      	orrs	r3, r2
 80251d8:	610b      	str	r3, [r1, #16]
 80251da:	e02d      	b.n	8025238 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80251dc:	683b      	ldr	r3, [r7, #0]
 80251de:	2b01      	cmp	r3, #1
 80251e0:	d115      	bne.n	802520e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80251e2:	4b2a      	ldr	r3, [pc, #168]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 80251e4:	691a      	ldr	r2, [r3, #16]
 80251e6:	4b2b      	ldr	r3, [pc, #172]	@ (8025294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80251e8:	4013      	ands	r3, r2
 80251ea:	687a      	ldr	r2, [r7, #4]
 80251ec:	6892      	ldr	r2, [r2, #8]
 80251ee:	0211      	lsls	r1, r2, #8
 80251f0:	687a      	ldr	r2, [r7, #4]
 80251f2:	6912      	ldr	r2, [r2, #16]
 80251f4:	0852      	lsrs	r2, r2, #1
 80251f6:	3a01      	subs	r2, #1
 80251f8:	0552      	lsls	r2, r2, #21
 80251fa:	4311      	orrs	r1, r2
 80251fc:	687a      	ldr	r2, [r7, #4]
 80251fe:	6852      	ldr	r2, [r2, #4]
 8025200:	3a01      	subs	r2, #1
 8025202:	0112      	lsls	r2, r2, #4
 8025204:	430a      	orrs	r2, r1
 8025206:	4921      	ldr	r1, [pc, #132]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025208:	4313      	orrs	r3, r2
 802520a:	610b      	str	r3, [r1, #16]
 802520c:	e014      	b.n	8025238 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 802520e:	4b1f      	ldr	r3, [pc, #124]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025210:	691a      	ldr	r2, [r3, #16]
 8025212:	4b21      	ldr	r3, [pc, #132]	@ (8025298 <RCCEx_PLLSAI1_Config+0x1e4>)
 8025214:	4013      	ands	r3, r2
 8025216:	687a      	ldr	r2, [r7, #4]
 8025218:	6892      	ldr	r2, [r2, #8]
 802521a:	0211      	lsls	r1, r2, #8
 802521c:	687a      	ldr	r2, [r7, #4]
 802521e:	6952      	ldr	r2, [r2, #20]
 8025220:	0852      	lsrs	r2, r2, #1
 8025222:	3a01      	subs	r2, #1
 8025224:	0652      	lsls	r2, r2, #25
 8025226:	4311      	orrs	r1, r2
 8025228:	687a      	ldr	r2, [r7, #4]
 802522a:	6852      	ldr	r2, [r2, #4]
 802522c:	3a01      	subs	r2, #1
 802522e:	0112      	lsls	r2, r2, #4
 8025230:	430a      	orrs	r2, r1
 8025232:	4916      	ldr	r1, [pc, #88]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025234:	4313      	orrs	r3, r2
 8025236:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8025238:	4b14      	ldr	r3, [pc, #80]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	4a13      	ldr	r2, [pc, #76]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802523e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8025242:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025244:	f7fc fb64 	bl	8021910 <HAL_GetTick>
 8025248:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 802524a:	e009      	b.n	8025260 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 802524c:	f7fc fb60 	bl	8021910 <HAL_GetTick>
 8025250:	4602      	mov	r2, r0
 8025252:	68bb      	ldr	r3, [r7, #8]
 8025254:	1ad3      	subs	r3, r2, r3
 8025256:	2b02      	cmp	r3, #2
 8025258:	d902      	bls.n	8025260 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 802525a:	2303      	movs	r3, #3
 802525c:	73fb      	strb	r3, [r7, #15]
          break;
 802525e:	e005      	b.n	802526c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8025260:	4b0a      	ldr	r3, [pc, #40]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025262:	681b      	ldr	r3, [r3, #0]
 8025264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8025268:	2b00      	cmp	r3, #0
 802526a:	d0ef      	beq.n	802524c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 802526c:	7bfb      	ldrb	r3, [r7, #15]
 802526e:	2b00      	cmp	r3, #0
 8025270:	d106      	bne.n	8025280 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8025272:	4b06      	ldr	r3, [pc, #24]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 8025274:	691a      	ldr	r2, [r3, #16]
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	699b      	ldr	r3, [r3, #24]
 802527a:	4904      	ldr	r1, [pc, #16]	@ (802528c <RCCEx_PLLSAI1_Config+0x1d8>)
 802527c:	4313      	orrs	r3, r2
 802527e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8025280:	7bfb      	ldrb	r3, [r7, #15]
}
 8025282:	4618      	mov	r0, r3
 8025284:	3710      	adds	r7, #16
 8025286:	46bd      	mov	sp, r7
 8025288:	bd80      	pop	{r7, pc}
 802528a:	bf00      	nop
 802528c:	40021000 	.word	0x40021000
 8025290:	07ff800f 	.word	0x07ff800f
 8025294:	ff9f800f 	.word	0xff9f800f
 8025298:	f9ff800f 	.word	0xf9ff800f

0802529c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 802529c:	b580      	push	{r7, lr}
 802529e:	b084      	sub	sp, #16
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]
 80252a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80252a6:	2300      	movs	r3, #0
 80252a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80252aa:	4b72      	ldr	r3, [pc, #456]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80252ac:	68db      	ldr	r3, [r3, #12]
 80252ae:	f003 0303 	and.w	r3, r3, #3
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d00e      	beq.n	80252d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80252b6:	4b6f      	ldr	r3, [pc, #444]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80252b8:	68db      	ldr	r3, [r3, #12]
 80252ba:	f003 0203 	and.w	r2, r3, #3
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	681b      	ldr	r3, [r3, #0]
 80252c2:	429a      	cmp	r2, r3
 80252c4:	d103      	bne.n	80252ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	681b      	ldr	r3, [r3, #0]
       ||
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	d142      	bne.n	8025354 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80252ce:	2301      	movs	r3, #1
 80252d0:	73fb      	strb	r3, [r7, #15]
 80252d2:	e03f      	b.n	8025354 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80252d4:	687b      	ldr	r3, [r7, #4]
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	2b03      	cmp	r3, #3
 80252da:	d018      	beq.n	802530e <RCCEx_PLLSAI2_Config+0x72>
 80252dc:	2b03      	cmp	r3, #3
 80252de:	d825      	bhi.n	802532c <RCCEx_PLLSAI2_Config+0x90>
 80252e0:	2b01      	cmp	r3, #1
 80252e2:	d002      	beq.n	80252ea <RCCEx_PLLSAI2_Config+0x4e>
 80252e4:	2b02      	cmp	r3, #2
 80252e6:	d009      	beq.n	80252fc <RCCEx_PLLSAI2_Config+0x60>
 80252e8:	e020      	b.n	802532c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80252ea:	4b62      	ldr	r3, [pc, #392]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80252ec:	681b      	ldr	r3, [r3, #0]
 80252ee:	f003 0302 	and.w	r3, r3, #2
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d11d      	bne.n	8025332 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80252f6:	2301      	movs	r3, #1
 80252f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80252fa:	e01a      	b.n	8025332 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80252fc:	4b5d      	ldr	r3, [pc, #372]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8025304:	2b00      	cmp	r3, #0
 8025306:	d116      	bne.n	8025336 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8025308:	2301      	movs	r3, #1
 802530a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802530c:	e013      	b.n	8025336 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 802530e:	4b59      	ldr	r3, [pc, #356]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025310:	681b      	ldr	r3, [r3, #0]
 8025312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025316:	2b00      	cmp	r3, #0
 8025318:	d10f      	bne.n	802533a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 802531a:	4b56      	ldr	r3, [pc, #344]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8025322:	2b00      	cmp	r3, #0
 8025324:	d109      	bne.n	802533a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8025326:	2301      	movs	r3, #1
 8025328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802532a:	e006      	b.n	802533a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 802532c:	2301      	movs	r3, #1
 802532e:	73fb      	strb	r3, [r7, #15]
      break;
 8025330:	e004      	b.n	802533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8025332:	bf00      	nop
 8025334:	e002      	b.n	802533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8025336:	bf00      	nop
 8025338:	e000      	b.n	802533c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 802533a:	bf00      	nop
    }

    if(status == HAL_OK)
 802533c:	7bfb      	ldrb	r3, [r7, #15]
 802533e:	2b00      	cmp	r3, #0
 8025340:	d108      	bne.n	8025354 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8025342:	4b4c      	ldr	r3, [pc, #304]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025344:	68db      	ldr	r3, [r3, #12]
 8025346:	f023 0203 	bic.w	r2, r3, #3
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	681b      	ldr	r3, [r3, #0]
 802534e:	4949      	ldr	r1, [pc, #292]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025350:	4313      	orrs	r3, r2
 8025352:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8025354:	7bfb      	ldrb	r3, [r7, #15]
 8025356:	2b00      	cmp	r3, #0
 8025358:	f040 8086 	bne.w	8025468 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 802535c:	4b45      	ldr	r3, [pc, #276]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802535e:	681b      	ldr	r3, [r3, #0]
 8025360:	4a44      	ldr	r2, [pc, #272]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8025366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8025368:	f7fc fad2 	bl	8021910 <HAL_GetTick>
 802536c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 802536e:	e009      	b.n	8025384 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8025370:	f7fc face 	bl	8021910 <HAL_GetTick>
 8025374:	4602      	mov	r2, r0
 8025376:	68bb      	ldr	r3, [r7, #8]
 8025378:	1ad3      	subs	r3, r2, r3
 802537a:	2b02      	cmp	r3, #2
 802537c:	d902      	bls.n	8025384 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 802537e:	2303      	movs	r3, #3
 8025380:	73fb      	strb	r3, [r7, #15]
        break;
 8025382:	e005      	b.n	8025390 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8025384:	4b3b      	ldr	r3, [pc, #236]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025386:	681b      	ldr	r3, [r3, #0]
 8025388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802538c:	2b00      	cmp	r3, #0
 802538e:	d1ef      	bne.n	8025370 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8025390:	7bfb      	ldrb	r3, [r7, #15]
 8025392:	2b00      	cmp	r3, #0
 8025394:	d168      	bne.n	8025468 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8025396:	683b      	ldr	r3, [r7, #0]
 8025398:	2b00      	cmp	r3, #0
 802539a:	d113      	bne.n	80253c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 802539c:	4b35      	ldr	r3, [pc, #212]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802539e:	695a      	ldr	r2, [r3, #20]
 80253a0:	4b35      	ldr	r3, [pc, #212]	@ (8025478 <RCCEx_PLLSAI2_Config+0x1dc>)
 80253a2:	4013      	ands	r3, r2
 80253a4:	687a      	ldr	r2, [r7, #4]
 80253a6:	6892      	ldr	r2, [r2, #8]
 80253a8:	0211      	lsls	r1, r2, #8
 80253aa:	687a      	ldr	r2, [r7, #4]
 80253ac:	68d2      	ldr	r2, [r2, #12]
 80253ae:	06d2      	lsls	r2, r2, #27
 80253b0:	4311      	orrs	r1, r2
 80253b2:	687a      	ldr	r2, [r7, #4]
 80253b4:	6852      	ldr	r2, [r2, #4]
 80253b6:	3a01      	subs	r2, #1
 80253b8:	0112      	lsls	r2, r2, #4
 80253ba:	430a      	orrs	r2, r1
 80253bc:	492d      	ldr	r1, [pc, #180]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80253be:	4313      	orrs	r3, r2
 80253c0:	614b      	str	r3, [r1, #20]
 80253c2:	e02d      	b.n	8025420 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80253c4:	683b      	ldr	r3, [r7, #0]
 80253c6:	2b01      	cmp	r3, #1
 80253c8:	d115      	bne.n	80253f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80253ca:	4b2a      	ldr	r3, [pc, #168]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80253cc:	695a      	ldr	r2, [r3, #20]
 80253ce:	4b2b      	ldr	r3, [pc, #172]	@ (802547c <RCCEx_PLLSAI2_Config+0x1e0>)
 80253d0:	4013      	ands	r3, r2
 80253d2:	687a      	ldr	r2, [r7, #4]
 80253d4:	6892      	ldr	r2, [r2, #8]
 80253d6:	0211      	lsls	r1, r2, #8
 80253d8:	687a      	ldr	r2, [r7, #4]
 80253da:	6912      	ldr	r2, [r2, #16]
 80253dc:	0852      	lsrs	r2, r2, #1
 80253de:	3a01      	subs	r2, #1
 80253e0:	0552      	lsls	r2, r2, #21
 80253e2:	4311      	orrs	r1, r2
 80253e4:	687a      	ldr	r2, [r7, #4]
 80253e6:	6852      	ldr	r2, [r2, #4]
 80253e8:	3a01      	subs	r2, #1
 80253ea:	0112      	lsls	r2, r2, #4
 80253ec:	430a      	orrs	r2, r1
 80253ee:	4921      	ldr	r1, [pc, #132]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80253f0:	4313      	orrs	r3, r2
 80253f2:	614b      	str	r3, [r1, #20]
 80253f4:	e014      	b.n	8025420 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80253f6:	4b1f      	ldr	r3, [pc, #124]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 80253f8:	695a      	ldr	r2, [r3, #20]
 80253fa:	4b21      	ldr	r3, [pc, #132]	@ (8025480 <RCCEx_PLLSAI2_Config+0x1e4>)
 80253fc:	4013      	ands	r3, r2
 80253fe:	687a      	ldr	r2, [r7, #4]
 8025400:	6892      	ldr	r2, [r2, #8]
 8025402:	0211      	lsls	r1, r2, #8
 8025404:	687a      	ldr	r2, [r7, #4]
 8025406:	6952      	ldr	r2, [r2, #20]
 8025408:	0852      	lsrs	r2, r2, #1
 802540a:	3a01      	subs	r2, #1
 802540c:	0652      	lsls	r2, r2, #25
 802540e:	4311      	orrs	r1, r2
 8025410:	687a      	ldr	r2, [r7, #4]
 8025412:	6852      	ldr	r2, [r2, #4]
 8025414:	3a01      	subs	r2, #1
 8025416:	0112      	lsls	r2, r2, #4
 8025418:	430a      	orrs	r2, r1
 802541a:	4916      	ldr	r1, [pc, #88]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802541c:	4313      	orrs	r3, r2
 802541e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8025420:	4b14      	ldr	r3, [pc, #80]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	4a13      	ldr	r2, [pc, #76]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802542a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802542c:	f7fc fa70 	bl	8021910 <HAL_GetTick>
 8025430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8025432:	e009      	b.n	8025448 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8025434:	f7fc fa6c 	bl	8021910 <HAL_GetTick>
 8025438:	4602      	mov	r2, r0
 802543a:	68bb      	ldr	r3, [r7, #8]
 802543c:	1ad3      	subs	r3, r2, r3
 802543e:	2b02      	cmp	r3, #2
 8025440:	d902      	bls.n	8025448 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8025442:	2303      	movs	r3, #3
 8025444:	73fb      	strb	r3, [r7, #15]
          break;
 8025446:	e005      	b.n	8025454 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8025448:	4b0a      	ldr	r3, [pc, #40]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8025450:	2b00      	cmp	r3, #0
 8025452:	d0ef      	beq.n	8025434 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8025454:	7bfb      	ldrb	r3, [r7, #15]
 8025456:	2b00      	cmp	r3, #0
 8025458:	d106      	bne.n	8025468 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 802545a:	4b06      	ldr	r3, [pc, #24]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 802545c:	695a      	ldr	r2, [r3, #20]
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	699b      	ldr	r3, [r3, #24]
 8025462:	4904      	ldr	r1, [pc, #16]	@ (8025474 <RCCEx_PLLSAI2_Config+0x1d8>)
 8025464:	4313      	orrs	r3, r2
 8025466:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8025468:	7bfb      	ldrb	r3, [r7, #15]
}
 802546a:	4618      	mov	r0, r3
 802546c:	3710      	adds	r7, #16
 802546e:	46bd      	mov	sp, r7
 8025470:	bd80      	pop	{r7, pc}
 8025472:	bf00      	nop
 8025474:	40021000 	.word	0x40021000
 8025478:	07ff800f 	.word	0x07ff800f
 802547c:	ff9f800f 	.word	0xff9f800f
 8025480:	f9ff800f 	.word	0xf9ff800f

08025484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8025484:	b580      	push	{r7, lr}
 8025486:	b084      	sub	sp, #16
 8025488:	af00      	add	r7, sp, #0
 802548a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	2b00      	cmp	r3, #0
 8025490:	d101      	bne.n	8025496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8025492:	2301      	movs	r3, #1
 8025494:	e095      	b.n	80255c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802549a:	2b00      	cmp	r3, #0
 802549c:	d108      	bne.n	80254b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802549e:	687b      	ldr	r3, [r7, #4]
 80254a0:	685b      	ldr	r3, [r3, #4]
 80254a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80254a6:	d009      	beq.n	80254bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	2200      	movs	r2, #0
 80254ac:	61da      	str	r2, [r3, #28]
 80254ae:	e005      	b.n	80254bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	2200      	movs	r2, #0
 80254b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80254b6:	687b      	ldr	r3, [r7, #4]
 80254b8:	2200      	movs	r2, #0
 80254ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	2200      	movs	r2, #0
 80254c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80254c8:	b2db      	uxtb	r3, r3
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	d106      	bne.n	80254dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80254ce:	687b      	ldr	r3, [r7, #4]
 80254d0:	2200      	movs	r2, #0
 80254d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80254d6:	6878      	ldr	r0, [r7, #4]
 80254d8:	f7fb fed6 	bl	8021288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	2202      	movs	r2, #2
 80254e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	681a      	ldr	r2, [r3, #0]
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80254f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	68db      	ldr	r3, [r3, #12]
 80254f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80254fc:	d902      	bls.n	8025504 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80254fe:	2300      	movs	r3, #0
 8025500:	60fb      	str	r3, [r7, #12]
 8025502:	e002      	b.n	802550a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8025504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025508:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	68db      	ldr	r3, [r3, #12]
 802550e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8025512:	d007      	beq.n	8025524 <HAL_SPI_Init+0xa0>
 8025514:	687b      	ldr	r3, [r7, #4]
 8025516:	68db      	ldr	r3, [r3, #12]
 8025518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 802551c:	d002      	beq.n	8025524 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	2200      	movs	r2, #0
 8025522:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8025524:	687b      	ldr	r3, [r7, #4]
 8025526:	685b      	ldr	r3, [r3, #4]
 8025528:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 802552c:	687b      	ldr	r3, [r7, #4]
 802552e:	689b      	ldr	r3, [r3, #8]
 8025530:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8025534:	431a      	orrs	r2, r3
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	691b      	ldr	r3, [r3, #16]
 802553a:	f003 0302 	and.w	r3, r3, #2
 802553e:	431a      	orrs	r2, r3
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	695b      	ldr	r3, [r3, #20]
 8025544:	f003 0301 	and.w	r3, r3, #1
 8025548:	431a      	orrs	r2, r3
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	699b      	ldr	r3, [r3, #24]
 802554e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8025552:	431a      	orrs	r2, r3
 8025554:	687b      	ldr	r3, [r7, #4]
 8025556:	69db      	ldr	r3, [r3, #28]
 8025558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802555c:	431a      	orrs	r2, r3
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	6a1b      	ldr	r3, [r3, #32]
 8025562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025566:	ea42 0103 	orr.w	r1, r2, r3
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802556e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	430a      	orrs	r2, r1
 8025578:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	699b      	ldr	r3, [r3, #24]
 802557e:	0c1b      	lsrs	r3, r3, #16
 8025580:	f003 0204 	and.w	r2, r3, #4
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025588:	f003 0310 	and.w	r3, r3, #16
 802558c:	431a      	orrs	r2, r3
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025592:	f003 0308 	and.w	r3, r3, #8
 8025596:	431a      	orrs	r2, r3
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	68db      	ldr	r3, [r3, #12]
 802559c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80255a0:	ea42 0103 	orr.w	r1, r2, r3
 80255a4:	68fb      	ldr	r3, [r7, #12]
 80255a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	681b      	ldr	r3, [r3, #0]
 80255ae:	430a      	orrs	r2, r1
 80255b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80255b2:	687b      	ldr	r3, [r7, #4]
 80255b4:	2200      	movs	r2, #0
 80255b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80255b8:	687b      	ldr	r3, [r7, #4]
 80255ba:	2201      	movs	r2, #1
 80255bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80255c0:	2300      	movs	r3, #0
}
 80255c2:	4618      	mov	r0, r3
 80255c4:	3710      	adds	r7, #16
 80255c6:	46bd      	mov	sp, r7
 80255c8:	bd80      	pop	{r7, pc}

080255ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80255ca:	b580      	push	{r7, lr}
 80255cc:	b082      	sub	sp, #8
 80255ce:	af00      	add	r7, sp, #0
 80255d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80255d2:	687b      	ldr	r3, [r7, #4]
 80255d4:	2b00      	cmp	r3, #0
 80255d6:	d101      	bne.n	80255dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80255d8:	2301      	movs	r3, #1
 80255da:	e042      	b.n	8025662 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d106      	bne.n	80255f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80255e6:	687b      	ldr	r3, [r7, #4]
 80255e8:	2200      	movs	r2, #0
 80255ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80255ee:	6878      	ldr	r0, [r7, #4]
 80255f0:	f7fb fec0 	bl	8021374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80255f4:	687b      	ldr	r3, [r7, #4]
 80255f6:	2224      	movs	r2, #36	@ 0x24
 80255f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80255fc:	687b      	ldr	r3, [r7, #4]
 80255fe:	681b      	ldr	r3, [r3, #0]
 8025600:	681a      	ldr	r2, [r3, #0]
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	681b      	ldr	r3, [r3, #0]
 8025606:	f022 0201 	bic.w	r2, r2, #1
 802560a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802560c:	687b      	ldr	r3, [r7, #4]
 802560e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025610:	2b00      	cmp	r3, #0
 8025612:	d002      	beq.n	802561a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8025614:	6878      	ldr	r0, [r7, #4]
 8025616:	f000 fb25 	bl	8025c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802561a:	6878      	ldr	r0, [r7, #4]
 802561c:	f000 f826 	bl	802566c <UART_SetConfig>
 8025620:	4603      	mov	r3, r0
 8025622:	2b01      	cmp	r3, #1
 8025624:	d101      	bne.n	802562a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8025626:	2301      	movs	r3, #1
 8025628:	e01b      	b.n	8025662 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	681b      	ldr	r3, [r3, #0]
 802562e:	685a      	ldr	r2, [r3, #4]
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	681b      	ldr	r3, [r3, #0]
 8025634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8025638:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802563a:	687b      	ldr	r3, [r7, #4]
 802563c:	681b      	ldr	r3, [r3, #0]
 802563e:	689a      	ldr	r2, [r3, #8]
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	681b      	ldr	r3, [r3, #0]
 8025644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8025648:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	681a      	ldr	r2, [r3, #0]
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	681b      	ldr	r3, [r3, #0]
 8025654:	f042 0201 	orr.w	r2, r2, #1
 8025658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802565a:	6878      	ldr	r0, [r7, #4]
 802565c:	f000 fba4 	bl	8025da8 <UART_CheckIdleState>
 8025660:	4603      	mov	r3, r0
}
 8025662:	4618      	mov	r0, r3
 8025664:	3708      	adds	r7, #8
 8025666:	46bd      	mov	sp, r7
 8025668:	bd80      	pop	{r7, pc}
	...

0802566c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802566c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025670:	b08c      	sub	sp, #48	@ 0x30
 8025672:	af00      	add	r7, sp, #0
 8025674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8025676:	2300      	movs	r3, #0
 8025678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802567c:	697b      	ldr	r3, [r7, #20]
 802567e:	689a      	ldr	r2, [r3, #8]
 8025680:	697b      	ldr	r3, [r7, #20]
 8025682:	691b      	ldr	r3, [r3, #16]
 8025684:	431a      	orrs	r2, r3
 8025686:	697b      	ldr	r3, [r7, #20]
 8025688:	695b      	ldr	r3, [r3, #20]
 802568a:	431a      	orrs	r2, r3
 802568c:	697b      	ldr	r3, [r7, #20]
 802568e:	69db      	ldr	r3, [r3, #28]
 8025690:	4313      	orrs	r3, r2
 8025692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8025694:	697b      	ldr	r3, [r7, #20]
 8025696:	681b      	ldr	r3, [r3, #0]
 8025698:	681a      	ldr	r2, [r3, #0]
 802569a:	4baa      	ldr	r3, [pc, #680]	@ (8025944 <UART_SetConfig+0x2d8>)
 802569c:	4013      	ands	r3, r2
 802569e:	697a      	ldr	r2, [r7, #20]
 80256a0:	6812      	ldr	r2, [r2, #0]
 80256a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80256a4:	430b      	orrs	r3, r1
 80256a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80256a8:	697b      	ldr	r3, [r7, #20]
 80256aa:	681b      	ldr	r3, [r3, #0]
 80256ac:	685b      	ldr	r3, [r3, #4]
 80256ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80256b2:	697b      	ldr	r3, [r7, #20]
 80256b4:	68da      	ldr	r2, [r3, #12]
 80256b6:	697b      	ldr	r3, [r7, #20]
 80256b8:	681b      	ldr	r3, [r3, #0]
 80256ba:	430a      	orrs	r2, r1
 80256bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80256be:	697b      	ldr	r3, [r7, #20]
 80256c0:	699b      	ldr	r3, [r3, #24]
 80256c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80256c4:	697b      	ldr	r3, [r7, #20]
 80256c6:	681b      	ldr	r3, [r3, #0]
 80256c8:	4a9f      	ldr	r2, [pc, #636]	@ (8025948 <UART_SetConfig+0x2dc>)
 80256ca:	4293      	cmp	r3, r2
 80256cc:	d004      	beq.n	80256d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80256ce:	697b      	ldr	r3, [r7, #20]
 80256d0:	6a1b      	ldr	r3, [r3, #32]
 80256d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80256d4:	4313      	orrs	r3, r2
 80256d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80256d8:	697b      	ldr	r3, [r7, #20]
 80256da:	681b      	ldr	r3, [r3, #0]
 80256dc:	689b      	ldr	r3, [r3, #8]
 80256de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80256e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80256e6:	697a      	ldr	r2, [r7, #20]
 80256e8:	6812      	ldr	r2, [r2, #0]
 80256ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80256ec:	430b      	orrs	r3, r1
 80256ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80256f0:	697b      	ldr	r3, [r7, #20]
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80256f6:	f023 010f 	bic.w	r1, r3, #15
 80256fa:	697b      	ldr	r3, [r7, #20]
 80256fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80256fe:	697b      	ldr	r3, [r7, #20]
 8025700:	681b      	ldr	r3, [r3, #0]
 8025702:	430a      	orrs	r2, r1
 8025704:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8025706:	697b      	ldr	r3, [r7, #20]
 8025708:	681b      	ldr	r3, [r3, #0]
 802570a:	4a90      	ldr	r2, [pc, #576]	@ (802594c <UART_SetConfig+0x2e0>)
 802570c:	4293      	cmp	r3, r2
 802570e:	d125      	bne.n	802575c <UART_SetConfig+0xf0>
 8025710:	4b8f      	ldr	r3, [pc, #572]	@ (8025950 <UART_SetConfig+0x2e4>)
 8025712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8025716:	f003 0303 	and.w	r3, r3, #3
 802571a:	2b03      	cmp	r3, #3
 802571c:	d81a      	bhi.n	8025754 <UART_SetConfig+0xe8>
 802571e:	a201      	add	r2, pc, #4	@ (adr r2, 8025724 <UART_SetConfig+0xb8>)
 8025720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025724:	08025735 	.word	0x08025735
 8025728:	08025745 	.word	0x08025745
 802572c:	0802573d 	.word	0x0802573d
 8025730:	0802574d 	.word	0x0802574d
 8025734:	2301      	movs	r3, #1
 8025736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802573a:	e116      	b.n	802596a <UART_SetConfig+0x2fe>
 802573c:	2302      	movs	r3, #2
 802573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025742:	e112      	b.n	802596a <UART_SetConfig+0x2fe>
 8025744:	2304      	movs	r3, #4
 8025746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802574a:	e10e      	b.n	802596a <UART_SetConfig+0x2fe>
 802574c:	2308      	movs	r3, #8
 802574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025752:	e10a      	b.n	802596a <UART_SetConfig+0x2fe>
 8025754:	2310      	movs	r3, #16
 8025756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802575a:	e106      	b.n	802596a <UART_SetConfig+0x2fe>
 802575c:	697b      	ldr	r3, [r7, #20]
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	4a7c      	ldr	r2, [pc, #496]	@ (8025954 <UART_SetConfig+0x2e8>)
 8025762:	4293      	cmp	r3, r2
 8025764:	d138      	bne.n	80257d8 <UART_SetConfig+0x16c>
 8025766:	4b7a      	ldr	r3, [pc, #488]	@ (8025950 <UART_SetConfig+0x2e4>)
 8025768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802576c:	f003 030c 	and.w	r3, r3, #12
 8025770:	2b0c      	cmp	r3, #12
 8025772:	d82d      	bhi.n	80257d0 <UART_SetConfig+0x164>
 8025774:	a201      	add	r2, pc, #4	@ (adr r2, 802577c <UART_SetConfig+0x110>)
 8025776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802577a:	bf00      	nop
 802577c:	080257b1 	.word	0x080257b1
 8025780:	080257d1 	.word	0x080257d1
 8025784:	080257d1 	.word	0x080257d1
 8025788:	080257d1 	.word	0x080257d1
 802578c:	080257c1 	.word	0x080257c1
 8025790:	080257d1 	.word	0x080257d1
 8025794:	080257d1 	.word	0x080257d1
 8025798:	080257d1 	.word	0x080257d1
 802579c:	080257b9 	.word	0x080257b9
 80257a0:	080257d1 	.word	0x080257d1
 80257a4:	080257d1 	.word	0x080257d1
 80257a8:	080257d1 	.word	0x080257d1
 80257ac:	080257c9 	.word	0x080257c9
 80257b0:	2300      	movs	r3, #0
 80257b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80257b6:	e0d8      	b.n	802596a <UART_SetConfig+0x2fe>
 80257b8:	2302      	movs	r3, #2
 80257ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80257be:	e0d4      	b.n	802596a <UART_SetConfig+0x2fe>
 80257c0:	2304      	movs	r3, #4
 80257c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80257c6:	e0d0      	b.n	802596a <UART_SetConfig+0x2fe>
 80257c8:	2308      	movs	r3, #8
 80257ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80257ce:	e0cc      	b.n	802596a <UART_SetConfig+0x2fe>
 80257d0:	2310      	movs	r3, #16
 80257d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80257d6:	e0c8      	b.n	802596a <UART_SetConfig+0x2fe>
 80257d8:	697b      	ldr	r3, [r7, #20]
 80257da:	681b      	ldr	r3, [r3, #0]
 80257dc:	4a5e      	ldr	r2, [pc, #376]	@ (8025958 <UART_SetConfig+0x2ec>)
 80257de:	4293      	cmp	r3, r2
 80257e0:	d125      	bne.n	802582e <UART_SetConfig+0x1c2>
 80257e2:	4b5b      	ldr	r3, [pc, #364]	@ (8025950 <UART_SetConfig+0x2e4>)
 80257e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80257e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80257ec:	2b30      	cmp	r3, #48	@ 0x30
 80257ee:	d016      	beq.n	802581e <UART_SetConfig+0x1b2>
 80257f0:	2b30      	cmp	r3, #48	@ 0x30
 80257f2:	d818      	bhi.n	8025826 <UART_SetConfig+0x1ba>
 80257f4:	2b20      	cmp	r3, #32
 80257f6:	d00a      	beq.n	802580e <UART_SetConfig+0x1a2>
 80257f8:	2b20      	cmp	r3, #32
 80257fa:	d814      	bhi.n	8025826 <UART_SetConfig+0x1ba>
 80257fc:	2b00      	cmp	r3, #0
 80257fe:	d002      	beq.n	8025806 <UART_SetConfig+0x19a>
 8025800:	2b10      	cmp	r3, #16
 8025802:	d008      	beq.n	8025816 <UART_SetConfig+0x1aa>
 8025804:	e00f      	b.n	8025826 <UART_SetConfig+0x1ba>
 8025806:	2300      	movs	r3, #0
 8025808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802580c:	e0ad      	b.n	802596a <UART_SetConfig+0x2fe>
 802580e:	2302      	movs	r3, #2
 8025810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025814:	e0a9      	b.n	802596a <UART_SetConfig+0x2fe>
 8025816:	2304      	movs	r3, #4
 8025818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802581c:	e0a5      	b.n	802596a <UART_SetConfig+0x2fe>
 802581e:	2308      	movs	r3, #8
 8025820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025824:	e0a1      	b.n	802596a <UART_SetConfig+0x2fe>
 8025826:	2310      	movs	r3, #16
 8025828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802582c:	e09d      	b.n	802596a <UART_SetConfig+0x2fe>
 802582e:	697b      	ldr	r3, [r7, #20]
 8025830:	681b      	ldr	r3, [r3, #0]
 8025832:	4a4a      	ldr	r2, [pc, #296]	@ (802595c <UART_SetConfig+0x2f0>)
 8025834:	4293      	cmp	r3, r2
 8025836:	d125      	bne.n	8025884 <UART_SetConfig+0x218>
 8025838:	4b45      	ldr	r3, [pc, #276]	@ (8025950 <UART_SetConfig+0x2e4>)
 802583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802583e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8025842:	2bc0      	cmp	r3, #192	@ 0xc0
 8025844:	d016      	beq.n	8025874 <UART_SetConfig+0x208>
 8025846:	2bc0      	cmp	r3, #192	@ 0xc0
 8025848:	d818      	bhi.n	802587c <UART_SetConfig+0x210>
 802584a:	2b80      	cmp	r3, #128	@ 0x80
 802584c:	d00a      	beq.n	8025864 <UART_SetConfig+0x1f8>
 802584e:	2b80      	cmp	r3, #128	@ 0x80
 8025850:	d814      	bhi.n	802587c <UART_SetConfig+0x210>
 8025852:	2b00      	cmp	r3, #0
 8025854:	d002      	beq.n	802585c <UART_SetConfig+0x1f0>
 8025856:	2b40      	cmp	r3, #64	@ 0x40
 8025858:	d008      	beq.n	802586c <UART_SetConfig+0x200>
 802585a:	e00f      	b.n	802587c <UART_SetConfig+0x210>
 802585c:	2300      	movs	r3, #0
 802585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025862:	e082      	b.n	802596a <UART_SetConfig+0x2fe>
 8025864:	2302      	movs	r3, #2
 8025866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802586a:	e07e      	b.n	802596a <UART_SetConfig+0x2fe>
 802586c:	2304      	movs	r3, #4
 802586e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025872:	e07a      	b.n	802596a <UART_SetConfig+0x2fe>
 8025874:	2308      	movs	r3, #8
 8025876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802587a:	e076      	b.n	802596a <UART_SetConfig+0x2fe>
 802587c:	2310      	movs	r3, #16
 802587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025882:	e072      	b.n	802596a <UART_SetConfig+0x2fe>
 8025884:	697b      	ldr	r3, [r7, #20]
 8025886:	681b      	ldr	r3, [r3, #0]
 8025888:	4a35      	ldr	r2, [pc, #212]	@ (8025960 <UART_SetConfig+0x2f4>)
 802588a:	4293      	cmp	r3, r2
 802588c:	d12a      	bne.n	80258e4 <UART_SetConfig+0x278>
 802588e:	4b30      	ldr	r3, [pc, #192]	@ (8025950 <UART_SetConfig+0x2e4>)
 8025890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8025894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8025898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802589c:	d01a      	beq.n	80258d4 <UART_SetConfig+0x268>
 802589e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80258a2:	d81b      	bhi.n	80258dc <UART_SetConfig+0x270>
 80258a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80258a8:	d00c      	beq.n	80258c4 <UART_SetConfig+0x258>
 80258aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80258ae:	d815      	bhi.n	80258dc <UART_SetConfig+0x270>
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	d003      	beq.n	80258bc <UART_SetConfig+0x250>
 80258b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80258b8:	d008      	beq.n	80258cc <UART_SetConfig+0x260>
 80258ba:	e00f      	b.n	80258dc <UART_SetConfig+0x270>
 80258bc:	2300      	movs	r3, #0
 80258be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80258c2:	e052      	b.n	802596a <UART_SetConfig+0x2fe>
 80258c4:	2302      	movs	r3, #2
 80258c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80258ca:	e04e      	b.n	802596a <UART_SetConfig+0x2fe>
 80258cc:	2304      	movs	r3, #4
 80258ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80258d2:	e04a      	b.n	802596a <UART_SetConfig+0x2fe>
 80258d4:	2308      	movs	r3, #8
 80258d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80258da:	e046      	b.n	802596a <UART_SetConfig+0x2fe>
 80258dc:	2310      	movs	r3, #16
 80258de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80258e2:	e042      	b.n	802596a <UART_SetConfig+0x2fe>
 80258e4:	697b      	ldr	r3, [r7, #20]
 80258e6:	681b      	ldr	r3, [r3, #0]
 80258e8:	4a17      	ldr	r2, [pc, #92]	@ (8025948 <UART_SetConfig+0x2dc>)
 80258ea:	4293      	cmp	r3, r2
 80258ec:	d13a      	bne.n	8025964 <UART_SetConfig+0x2f8>
 80258ee:	4b18      	ldr	r3, [pc, #96]	@ (8025950 <UART_SetConfig+0x2e4>)
 80258f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80258f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80258f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80258fc:	d01a      	beq.n	8025934 <UART_SetConfig+0x2c8>
 80258fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8025902:	d81b      	bhi.n	802593c <UART_SetConfig+0x2d0>
 8025904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8025908:	d00c      	beq.n	8025924 <UART_SetConfig+0x2b8>
 802590a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802590e:	d815      	bhi.n	802593c <UART_SetConfig+0x2d0>
 8025910:	2b00      	cmp	r3, #0
 8025912:	d003      	beq.n	802591c <UART_SetConfig+0x2b0>
 8025914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025918:	d008      	beq.n	802592c <UART_SetConfig+0x2c0>
 802591a:	e00f      	b.n	802593c <UART_SetConfig+0x2d0>
 802591c:	2300      	movs	r3, #0
 802591e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025922:	e022      	b.n	802596a <UART_SetConfig+0x2fe>
 8025924:	2302      	movs	r3, #2
 8025926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802592a:	e01e      	b.n	802596a <UART_SetConfig+0x2fe>
 802592c:	2304      	movs	r3, #4
 802592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025932:	e01a      	b.n	802596a <UART_SetConfig+0x2fe>
 8025934:	2308      	movs	r3, #8
 8025936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802593a:	e016      	b.n	802596a <UART_SetConfig+0x2fe>
 802593c:	2310      	movs	r3, #16
 802593e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8025942:	e012      	b.n	802596a <UART_SetConfig+0x2fe>
 8025944:	cfff69f3 	.word	0xcfff69f3
 8025948:	40008000 	.word	0x40008000
 802594c:	40013800 	.word	0x40013800
 8025950:	40021000 	.word	0x40021000
 8025954:	40004400 	.word	0x40004400
 8025958:	40004800 	.word	0x40004800
 802595c:	40004c00 	.word	0x40004c00
 8025960:	40005000 	.word	0x40005000
 8025964:	2310      	movs	r3, #16
 8025966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802596a:	697b      	ldr	r3, [r7, #20]
 802596c:	681b      	ldr	r3, [r3, #0]
 802596e:	4aae      	ldr	r2, [pc, #696]	@ (8025c28 <UART_SetConfig+0x5bc>)
 8025970:	4293      	cmp	r3, r2
 8025972:	f040 8097 	bne.w	8025aa4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8025976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 802597a:	2b08      	cmp	r3, #8
 802597c:	d823      	bhi.n	80259c6 <UART_SetConfig+0x35a>
 802597e:	a201      	add	r2, pc, #4	@ (adr r2, 8025984 <UART_SetConfig+0x318>)
 8025980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025984:	080259a9 	.word	0x080259a9
 8025988:	080259c7 	.word	0x080259c7
 802598c:	080259b1 	.word	0x080259b1
 8025990:	080259c7 	.word	0x080259c7
 8025994:	080259b7 	.word	0x080259b7
 8025998:	080259c7 	.word	0x080259c7
 802599c:	080259c7 	.word	0x080259c7
 80259a0:	080259c7 	.word	0x080259c7
 80259a4:	080259bf 	.word	0x080259bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80259a8:	f7fe ff58 	bl	802485c <HAL_RCC_GetPCLK1Freq>
 80259ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80259ae:	e010      	b.n	80259d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80259b0:	4b9e      	ldr	r3, [pc, #632]	@ (8025c2c <UART_SetConfig+0x5c0>)
 80259b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80259b4:	e00d      	b.n	80259d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80259b6:	f7fe feb9 	bl	802472c <HAL_RCC_GetSysClockFreq>
 80259ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80259bc:	e009      	b.n	80259d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80259be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80259c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80259c4:	e005      	b.n	80259d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80259c6:	2300      	movs	r3, #0
 80259c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80259ca:	2301      	movs	r3, #1
 80259cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80259d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80259d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	f000 8130 	beq.w	8025c3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80259da:	697b      	ldr	r3, [r7, #20]
 80259dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80259de:	4a94      	ldr	r2, [pc, #592]	@ (8025c30 <UART_SetConfig+0x5c4>)
 80259e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80259e4:	461a      	mov	r2, r3
 80259e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80259e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80259ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80259ee:	697b      	ldr	r3, [r7, #20]
 80259f0:	685a      	ldr	r2, [r3, #4]
 80259f2:	4613      	mov	r3, r2
 80259f4:	005b      	lsls	r3, r3, #1
 80259f6:	4413      	add	r3, r2
 80259f8:	69ba      	ldr	r2, [r7, #24]
 80259fa:	429a      	cmp	r2, r3
 80259fc:	d305      	bcc.n	8025a0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80259fe:	697b      	ldr	r3, [r7, #20]
 8025a00:	685b      	ldr	r3, [r3, #4]
 8025a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025a04:	69ba      	ldr	r2, [r7, #24]
 8025a06:	429a      	cmp	r2, r3
 8025a08:	d903      	bls.n	8025a12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8025a0a:	2301      	movs	r3, #1
 8025a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8025a10:	e113      	b.n	8025c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025a14:	2200      	movs	r2, #0
 8025a16:	60bb      	str	r3, [r7, #8]
 8025a18:	60fa      	str	r2, [r7, #12]
 8025a1a:	697b      	ldr	r3, [r7, #20]
 8025a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025a1e:	4a84      	ldr	r2, [pc, #528]	@ (8025c30 <UART_SetConfig+0x5c4>)
 8025a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025a24:	b29b      	uxth	r3, r3
 8025a26:	2200      	movs	r2, #0
 8025a28:	603b      	str	r3, [r7, #0]
 8025a2a:	607a      	str	r2, [r7, #4]
 8025a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025a30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025a34:	f7fa fb5c 	bl	80200f0 <__aeabi_uldivmod>
 8025a38:	4602      	mov	r2, r0
 8025a3a:	460b      	mov	r3, r1
 8025a3c:	4610      	mov	r0, r2
 8025a3e:	4619      	mov	r1, r3
 8025a40:	f04f 0200 	mov.w	r2, #0
 8025a44:	f04f 0300 	mov.w	r3, #0
 8025a48:	020b      	lsls	r3, r1, #8
 8025a4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8025a4e:	0202      	lsls	r2, r0, #8
 8025a50:	6979      	ldr	r1, [r7, #20]
 8025a52:	6849      	ldr	r1, [r1, #4]
 8025a54:	0849      	lsrs	r1, r1, #1
 8025a56:	2000      	movs	r0, #0
 8025a58:	460c      	mov	r4, r1
 8025a5a:	4605      	mov	r5, r0
 8025a5c:	eb12 0804 	adds.w	r8, r2, r4
 8025a60:	eb43 0905 	adc.w	r9, r3, r5
 8025a64:	697b      	ldr	r3, [r7, #20]
 8025a66:	685b      	ldr	r3, [r3, #4]
 8025a68:	2200      	movs	r2, #0
 8025a6a:	469a      	mov	sl, r3
 8025a6c:	4693      	mov	fp, r2
 8025a6e:	4652      	mov	r2, sl
 8025a70:	465b      	mov	r3, fp
 8025a72:	4640      	mov	r0, r8
 8025a74:	4649      	mov	r1, r9
 8025a76:	f7fa fb3b 	bl	80200f0 <__aeabi_uldivmod>
 8025a7a:	4602      	mov	r2, r0
 8025a7c:	460b      	mov	r3, r1
 8025a7e:	4613      	mov	r3, r2
 8025a80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8025a82:	6a3b      	ldr	r3, [r7, #32]
 8025a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8025a88:	d308      	bcc.n	8025a9c <UART_SetConfig+0x430>
 8025a8a:	6a3b      	ldr	r3, [r7, #32]
 8025a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8025a90:	d204      	bcs.n	8025a9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8025a92:	697b      	ldr	r3, [r7, #20]
 8025a94:	681b      	ldr	r3, [r3, #0]
 8025a96:	6a3a      	ldr	r2, [r7, #32]
 8025a98:	60da      	str	r2, [r3, #12]
 8025a9a:	e0ce      	b.n	8025c3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8025a9c:	2301      	movs	r3, #1
 8025a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8025aa2:	e0ca      	b.n	8025c3a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8025aa4:	697b      	ldr	r3, [r7, #20]
 8025aa6:	69db      	ldr	r3, [r3, #28]
 8025aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8025aac:	d166      	bne.n	8025b7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8025aae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8025ab2:	2b08      	cmp	r3, #8
 8025ab4:	d827      	bhi.n	8025b06 <UART_SetConfig+0x49a>
 8025ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8025abc <UART_SetConfig+0x450>)
 8025ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025abc:	08025ae1 	.word	0x08025ae1
 8025ac0:	08025ae9 	.word	0x08025ae9
 8025ac4:	08025af1 	.word	0x08025af1
 8025ac8:	08025b07 	.word	0x08025b07
 8025acc:	08025af7 	.word	0x08025af7
 8025ad0:	08025b07 	.word	0x08025b07
 8025ad4:	08025b07 	.word	0x08025b07
 8025ad8:	08025b07 	.word	0x08025b07
 8025adc:	08025aff 	.word	0x08025aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025ae0:	f7fe febc 	bl	802485c <HAL_RCC_GetPCLK1Freq>
 8025ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025ae6:	e014      	b.n	8025b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025ae8:	f7fe fece 	bl	8024888 <HAL_RCC_GetPCLK2Freq>
 8025aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025aee:	e010      	b.n	8025b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8025af0:	4b4e      	ldr	r3, [pc, #312]	@ (8025c2c <UART_SetConfig+0x5c0>)
 8025af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8025af4:	e00d      	b.n	8025b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8025af6:	f7fe fe19 	bl	802472c <HAL_RCC_GetSysClockFreq>
 8025afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025afc:	e009      	b.n	8025b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8025b04:	e005      	b.n	8025b12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8025b06:	2300      	movs	r3, #0
 8025b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8025b0a:	2301      	movs	r3, #1
 8025b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8025b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8025b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025b14:	2b00      	cmp	r3, #0
 8025b16:	f000 8090 	beq.w	8025c3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025b1a:	697b      	ldr	r3, [r7, #20]
 8025b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025b1e:	4a44      	ldr	r2, [pc, #272]	@ (8025c30 <UART_SetConfig+0x5c4>)
 8025b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025b24:	461a      	mov	r2, r3
 8025b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8025b2c:	005a      	lsls	r2, r3, #1
 8025b2e:	697b      	ldr	r3, [r7, #20]
 8025b30:	685b      	ldr	r3, [r3, #4]
 8025b32:	085b      	lsrs	r3, r3, #1
 8025b34:	441a      	add	r2, r3
 8025b36:	697b      	ldr	r3, [r7, #20]
 8025b38:	685b      	ldr	r3, [r3, #4]
 8025b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8025b3e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025b40:	6a3b      	ldr	r3, [r7, #32]
 8025b42:	2b0f      	cmp	r3, #15
 8025b44:	d916      	bls.n	8025b74 <UART_SetConfig+0x508>
 8025b46:	6a3b      	ldr	r3, [r7, #32]
 8025b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025b4c:	d212      	bcs.n	8025b74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8025b4e:	6a3b      	ldr	r3, [r7, #32]
 8025b50:	b29b      	uxth	r3, r3
 8025b52:	f023 030f 	bic.w	r3, r3, #15
 8025b56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8025b58:	6a3b      	ldr	r3, [r7, #32]
 8025b5a:	085b      	lsrs	r3, r3, #1
 8025b5c:	b29b      	uxth	r3, r3
 8025b5e:	f003 0307 	and.w	r3, r3, #7
 8025b62:	b29a      	uxth	r2, r3
 8025b64:	8bfb      	ldrh	r3, [r7, #30]
 8025b66:	4313      	orrs	r3, r2
 8025b68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8025b6a:	697b      	ldr	r3, [r7, #20]
 8025b6c:	681b      	ldr	r3, [r3, #0]
 8025b6e:	8bfa      	ldrh	r2, [r7, #30]
 8025b70:	60da      	str	r2, [r3, #12]
 8025b72:	e062      	b.n	8025c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8025b74:	2301      	movs	r3, #1
 8025b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8025b7a:	e05e      	b.n	8025c3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8025b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8025b80:	2b08      	cmp	r3, #8
 8025b82:	d828      	bhi.n	8025bd6 <UART_SetConfig+0x56a>
 8025b84:	a201      	add	r2, pc, #4	@ (adr r2, 8025b8c <UART_SetConfig+0x520>)
 8025b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025b8a:	bf00      	nop
 8025b8c:	08025bb1 	.word	0x08025bb1
 8025b90:	08025bb9 	.word	0x08025bb9
 8025b94:	08025bc1 	.word	0x08025bc1
 8025b98:	08025bd7 	.word	0x08025bd7
 8025b9c:	08025bc7 	.word	0x08025bc7
 8025ba0:	08025bd7 	.word	0x08025bd7
 8025ba4:	08025bd7 	.word	0x08025bd7
 8025ba8:	08025bd7 	.word	0x08025bd7
 8025bac:	08025bcf 	.word	0x08025bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025bb0:	f7fe fe54 	bl	802485c <HAL_RCC_GetPCLK1Freq>
 8025bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025bb6:	e014      	b.n	8025be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025bb8:	f7fe fe66 	bl	8024888 <HAL_RCC_GetPCLK2Freq>
 8025bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025bbe:	e010      	b.n	8025be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8025bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8025c2c <UART_SetConfig+0x5c0>)
 8025bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8025bc4:	e00d      	b.n	8025be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8025bc6:	f7fe fdb1 	bl	802472c <HAL_RCC_GetSysClockFreq>
 8025bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8025bcc:	e009      	b.n	8025be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8025bd4:	e005      	b.n	8025be2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8025bd6:	2300      	movs	r3, #0
 8025bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8025bda:	2301      	movs	r3, #1
 8025bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8025be0:	bf00      	nop
    }

    if (pclk != 0U)
 8025be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025be4:	2b00      	cmp	r3, #0
 8025be6:	d028      	beq.n	8025c3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025be8:	697b      	ldr	r3, [r7, #20]
 8025bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025bec:	4a10      	ldr	r2, [pc, #64]	@ (8025c30 <UART_SetConfig+0x5c4>)
 8025bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025bf2:	461a      	mov	r2, r3
 8025bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8025bfa:	697b      	ldr	r3, [r7, #20]
 8025bfc:	685b      	ldr	r3, [r3, #4]
 8025bfe:	085b      	lsrs	r3, r3, #1
 8025c00:	441a      	add	r2, r3
 8025c02:	697b      	ldr	r3, [r7, #20]
 8025c04:	685b      	ldr	r3, [r3, #4]
 8025c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8025c0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025c0c:	6a3b      	ldr	r3, [r7, #32]
 8025c0e:	2b0f      	cmp	r3, #15
 8025c10:	d910      	bls.n	8025c34 <UART_SetConfig+0x5c8>
 8025c12:	6a3b      	ldr	r3, [r7, #32]
 8025c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025c18:	d20c      	bcs.n	8025c34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8025c1a:	6a3b      	ldr	r3, [r7, #32]
 8025c1c:	b29a      	uxth	r2, r3
 8025c1e:	697b      	ldr	r3, [r7, #20]
 8025c20:	681b      	ldr	r3, [r3, #0]
 8025c22:	60da      	str	r2, [r3, #12]
 8025c24:	e009      	b.n	8025c3a <UART_SetConfig+0x5ce>
 8025c26:	bf00      	nop
 8025c28:	40008000 	.word	0x40008000
 8025c2c:	00f42400 	.word	0x00f42400
 8025c30:	080271b0 	.word	0x080271b0
      }
      else
      {
        ret = HAL_ERROR;
 8025c34:	2301      	movs	r3, #1
 8025c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8025c3a:	697b      	ldr	r3, [r7, #20]
 8025c3c:	2201      	movs	r2, #1
 8025c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8025c42:	697b      	ldr	r3, [r7, #20]
 8025c44:	2201      	movs	r2, #1
 8025c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8025c4a:	697b      	ldr	r3, [r7, #20]
 8025c4c:	2200      	movs	r2, #0
 8025c4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8025c50:	697b      	ldr	r3, [r7, #20]
 8025c52:	2200      	movs	r2, #0
 8025c54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8025c56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8025c5a:	4618      	mov	r0, r3
 8025c5c:	3730      	adds	r7, #48	@ 0x30
 8025c5e:	46bd      	mov	sp, r7
 8025c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08025c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8025c64:	b480      	push	{r7}
 8025c66:	b083      	sub	sp, #12
 8025c68:	af00      	add	r7, sp, #0
 8025c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8025c6c:	687b      	ldr	r3, [r7, #4]
 8025c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025c70:	f003 0308 	and.w	r3, r3, #8
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d00a      	beq.n	8025c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8025c78:	687b      	ldr	r3, [r7, #4]
 8025c7a:	681b      	ldr	r3, [r3, #0]
 8025c7c:	685b      	ldr	r3, [r3, #4]
 8025c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8025c82:	687b      	ldr	r3, [r7, #4]
 8025c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	681b      	ldr	r3, [r3, #0]
 8025c8a:	430a      	orrs	r2, r1
 8025c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025c92:	f003 0301 	and.w	r3, r3, #1
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	d00a      	beq.n	8025cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8025c9a:	687b      	ldr	r3, [r7, #4]
 8025c9c:	681b      	ldr	r3, [r3, #0]
 8025c9e:	685b      	ldr	r3, [r3, #4]
 8025ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	681b      	ldr	r3, [r3, #0]
 8025cac:	430a      	orrs	r2, r1
 8025cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025cb4:	f003 0302 	and.w	r3, r3, #2
 8025cb8:	2b00      	cmp	r3, #0
 8025cba:	d00a      	beq.n	8025cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	681b      	ldr	r3, [r3, #0]
 8025cc0:	685b      	ldr	r3, [r3, #4]
 8025cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8025cc6:	687b      	ldr	r3, [r7, #4]
 8025cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	681b      	ldr	r3, [r3, #0]
 8025cce:	430a      	orrs	r2, r1
 8025cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025cd6:	f003 0304 	and.w	r3, r3, #4
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d00a      	beq.n	8025cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	681b      	ldr	r3, [r3, #0]
 8025ce2:	685b      	ldr	r3, [r3, #4]
 8025ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	681b      	ldr	r3, [r3, #0]
 8025cf0:	430a      	orrs	r2, r1
 8025cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025cf8:	f003 0310 	and.w	r3, r3, #16
 8025cfc:	2b00      	cmp	r3, #0
 8025cfe:	d00a      	beq.n	8025d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8025d00:	687b      	ldr	r3, [r7, #4]
 8025d02:	681b      	ldr	r3, [r3, #0]
 8025d04:	689b      	ldr	r3, [r3, #8]
 8025d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8025d0a:	687b      	ldr	r3, [r7, #4]
 8025d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	430a      	orrs	r2, r1
 8025d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025d1a:	f003 0320 	and.w	r3, r3, #32
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	d00a      	beq.n	8025d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	681b      	ldr	r3, [r3, #0]
 8025d26:	689b      	ldr	r3, [r3, #8]
 8025d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8025d2c:	687b      	ldr	r3, [r7, #4]
 8025d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8025d30:	687b      	ldr	r3, [r7, #4]
 8025d32:	681b      	ldr	r3, [r3, #0]
 8025d34:	430a      	orrs	r2, r1
 8025d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8025d38:	687b      	ldr	r3, [r7, #4]
 8025d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025d40:	2b00      	cmp	r3, #0
 8025d42:	d01a      	beq.n	8025d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8025d44:	687b      	ldr	r3, [r7, #4]
 8025d46:	681b      	ldr	r3, [r3, #0]
 8025d48:	685b      	ldr	r3, [r3, #4]
 8025d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8025d4e:	687b      	ldr	r3, [r7, #4]
 8025d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8025d52:	687b      	ldr	r3, [r7, #4]
 8025d54:	681b      	ldr	r3, [r3, #0]
 8025d56:	430a      	orrs	r2, r1
 8025d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8025d5a:	687b      	ldr	r3, [r7, #4]
 8025d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8025d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8025d62:	d10a      	bne.n	8025d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	685b      	ldr	r3, [r3, #4]
 8025d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8025d6e:	687b      	ldr	r3, [r7, #4]
 8025d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	681b      	ldr	r3, [r3, #0]
 8025d76:	430a      	orrs	r2, r1
 8025d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025d82:	2b00      	cmp	r3, #0
 8025d84:	d00a      	beq.n	8025d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8025d86:	687b      	ldr	r3, [r7, #4]
 8025d88:	681b      	ldr	r3, [r3, #0]
 8025d8a:	685b      	ldr	r3, [r3, #4]
 8025d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8025d90:	687b      	ldr	r3, [r7, #4]
 8025d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	681b      	ldr	r3, [r3, #0]
 8025d98:	430a      	orrs	r2, r1
 8025d9a:	605a      	str	r2, [r3, #4]
  }
}
 8025d9c:	bf00      	nop
 8025d9e:	370c      	adds	r7, #12
 8025da0:	46bd      	mov	sp, r7
 8025da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025da6:	4770      	bx	lr

08025da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8025da8:	b580      	push	{r7, lr}
 8025daa:	b098      	sub	sp, #96	@ 0x60
 8025dac:	af02      	add	r7, sp, #8
 8025dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	2200      	movs	r2, #0
 8025db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8025db8:	f7fb fdaa 	bl	8021910 <HAL_GetTick>
 8025dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8025dbe:	687b      	ldr	r3, [r7, #4]
 8025dc0:	681b      	ldr	r3, [r3, #0]
 8025dc2:	681b      	ldr	r3, [r3, #0]
 8025dc4:	f003 0308 	and.w	r3, r3, #8
 8025dc8:	2b08      	cmp	r3, #8
 8025dca:	d12f      	bne.n	8025e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8025dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8025dd0:	9300      	str	r3, [sp, #0]
 8025dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025dd4:	2200      	movs	r2, #0
 8025dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8025dda:	6878      	ldr	r0, [r7, #4]
 8025ddc:	f000 f88e 	bl	8025efc <UART_WaitOnFlagUntilTimeout>
 8025de0:	4603      	mov	r3, r0
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	d022      	beq.n	8025e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8025de6:	687b      	ldr	r3, [r7, #4]
 8025de8:	681b      	ldr	r3, [r3, #0]
 8025dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025dee:	e853 3f00 	ldrex	r3, [r3]
 8025df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8025df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8025dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8025dfc:	687b      	ldr	r3, [r7, #4]
 8025dfe:	681b      	ldr	r3, [r3, #0]
 8025e00:	461a      	mov	r2, r3
 8025e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8025e06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8025e0c:	e841 2300 	strex	r3, r2, [r1]
 8025e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8025e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	d1e6      	bne.n	8025de6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	2220      	movs	r2, #32
 8025e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	2200      	movs	r2, #0
 8025e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8025e28:	2303      	movs	r3, #3
 8025e2a:	e063      	b.n	8025ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8025e2c:	687b      	ldr	r3, [r7, #4]
 8025e2e:	681b      	ldr	r3, [r3, #0]
 8025e30:	681b      	ldr	r3, [r3, #0]
 8025e32:	f003 0304 	and.w	r3, r3, #4
 8025e36:	2b04      	cmp	r3, #4
 8025e38:	d149      	bne.n	8025ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8025e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8025e3e:	9300      	str	r3, [sp, #0]
 8025e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025e42:	2200      	movs	r2, #0
 8025e44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8025e48:	6878      	ldr	r0, [r7, #4]
 8025e4a:	f000 f857 	bl	8025efc <UART_WaitOnFlagUntilTimeout>
 8025e4e:	4603      	mov	r3, r0
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	d03c      	beq.n	8025ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8025e54:	687b      	ldr	r3, [r7, #4]
 8025e56:	681b      	ldr	r3, [r3, #0]
 8025e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e5c:	e853 3f00 	ldrex	r3, [r3]
 8025e60:	623b      	str	r3, [r7, #32]
   return(result);
 8025e62:	6a3b      	ldr	r3, [r7, #32]
 8025e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8025e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8025e6a:	687b      	ldr	r3, [r7, #4]
 8025e6c:	681b      	ldr	r3, [r3, #0]
 8025e6e:	461a      	mov	r2, r3
 8025e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8025e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025e7a:	e841 2300 	strex	r3, r2, [r1]
 8025e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8025e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025e82:	2b00      	cmp	r3, #0
 8025e84:	d1e6      	bne.n	8025e54 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	681b      	ldr	r3, [r3, #0]
 8025e8a:	3308      	adds	r3, #8
 8025e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025e8e:	693b      	ldr	r3, [r7, #16]
 8025e90:	e853 3f00 	ldrex	r3, [r3]
 8025e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8025e96:	68fb      	ldr	r3, [r7, #12]
 8025e98:	f023 0301 	bic.w	r3, r3, #1
 8025e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	3308      	adds	r3, #8
 8025ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8025ea6:	61fa      	str	r2, [r7, #28]
 8025ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025eaa:	69b9      	ldr	r1, [r7, #24]
 8025eac:	69fa      	ldr	r2, [r7, #28]
 8025eae:	e841 2300 	strex	r3, r2, [r1]
 8025eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8025eb4:	697b      	ldr	r3, [r7, #20]
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d1e5      	bne.n	8025e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	2220      	movs	r2, #32
 8025ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	2200      	movs	r2, #0
 8025ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8025eca:	2303      	movs	r3, #3
 8025ecc:	e012      	b.n	8025ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8025ece:	687b      	ldr	r3, [r7, #4]
 8025ed0:	2220      	movs	r2, #32
 8025ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8025ed6:	687b      	ldr	r3, [r7, #4]
 8025ed8:	2220      	movs	r2, #32
 8025eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025ede:	687b      	ldr	r3, [r7, #4]
 8025ee0:	2200      	movs	r2, #0
 8025ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8025ee4:	687b      	ldr	r3, [r7, #4]
 8025ee6:	2200      	movs	r2, #0
 8025ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8025eea:	687b      	ldr	r3, [r7, #4]
 8025eec:	2200      	movs	r2, #0
 8025eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8025ef2:	2300      	movs	r3, #0
}
 8025ef4:	4618      	mov	r0, r3
 8025ef6:	3758      	adds	r7, #88	@ 0x58
 8025ef8:	46bd      	mov	sp, r7
 8025efa:	bd80      	pop	{r7, pc}

08025efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8025efc:	b580      	push	{r7, lr}
 8025efe:	b084      	sub	sp, #16
 8025f00:	af00      	add	r7, sp, #0
 8025f02:	60f8      	str	r0, [r7, #12]
 8025f04:	60b9      	str	r1, [r7, #8]
 8025f06:	603b      	str	r3, [r7, #0]
 8025f08:	4613      	mov	r3, r2
 8025f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025f0c:	e04f      	b.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8025f0e:	69bb      	ldr	r3, [r7, #24]
 8025f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8025f14:	d04b      	beq.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8025f16:	f7fb fcfb 	bl	8021910 <HAL_GetTick>
 8025f1a:	4602      	mov	r2, r0
 8025f1c:	683b      	ldr	r3, [r7, #0]
 8025f1e:	1ad3      	subs	r3, r2, r3
 8025f20:	69ba      	ldr	r2, [r7, #24]
 8025f22:	429a      	cmp	r2, r3
 8025f24:	d302      	bcc.n	8025f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8025f26:	69bb      	ldr	r3, [r7, #24]
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d101      	bne.n	8025f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8025f2c:	2303      	movs	r3, #3
 8025f2e:	e04e      	b.n	8025fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8025f30:	68fb      	ldr	r3, [r7, #12]
 8025f32:	681b      	ldr	r3, [r3, #0]
 8025f34:	681b      	ldr	r3, [r3, #0]
 8025f36:	f003 0304 	and.w	r3, r3, #4
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d037      	beq.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8025f3e:	68bb      	ldr	r3, [r7, #8]
 8025f40:	2b80      	cmp	r3, #128	@ 0x80
 8025f42:	d034      	beq.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8025f44:	68bb      	ldr	r3, [r7, #8]
 8025f46:	2b40      	cmp	r3, #64	@ 0x40
 8025f48:	d031      	beq.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8025f4a:	68fb      	ldr	r3, [r7, #12]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	69db      	ldr	r3, [r3, #28]
 8025f50:	f003 0308 	and.w	r3, r3, #8
 8025f54:	2b08      	cmp	r3, #8
 8025f56:	d110      	bne.n	8025f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8025f58:	68fb      	ldr	r3, [r7, #12]
 8025f5a:	681b      	ldr	r3, [r3, #0]
 8025f5c:	2208      	movs	r2, #8
 8025f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8025f60:	68f8      	ldr	r0, [r7, #12]
 8025f62:	f000 f838 	bl	8025fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8025f66:	68fb      	ldr	r3, [r7, #12]
 8025f68:	2208      	movs	r2, #8
 8025f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8025f6e:	68fb      	ldr	r3, [r7, #12]
 8025f70:	2200      	movs	r2, #0
 8025f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8025f76:	2301      	movs	r3, #1
 8025f78:	e029      	b.n	8025fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8025f7a:	68fb      	ldr	r3, [r7, #12]
 8025f7c:	681b      	ldr	r3, [r3, #0]
 8025f7e:	69db      	ldr	r3, [r3, #28]
 8025f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8025f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8025f88:	d111      	bne.n	8025fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8025f8a:	68fb      	ldr	r3, [r7, #12]
 8025f8c:	681b      	ldr	r3, [r3, #0]
 8025f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8025f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8025f94:	68f8      	ldr	r0, [r7, #12]
 8025f96:	f000 f81e 	bl	8025fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8025f9a:	68fb      	ldr	r3, [r7, #12]
 8025f9c:	2220      	movs	r2, #32
 8025f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8025fa2:	68fb      	ldr	r3, [r7, #12]
 8025fa4:	2200      	movs	r2, #0
 8025fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8025faa:	2303      	movs	r3, #3
 8025fac:	e00f      	b.n	8025fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8025fae:	68fb      	ldr	r3, [r7, #12]
 8025fb0:	681b      	ldr	r3, [r3, #0]
 8025fb2:	69da      	ldr	r2, [r3, #28]
 8025fb4:	68bb      	ldr	r3, [r7, #8]
 8025fb6:	4013      	ands	r3, r2
 8025fb8:	68ba      	ldr	r2, [r7, #8]
 8025fba:	429a      	cmp	r2, r3
 8025fbc:	bf0c      	ite	eq
 8025fbe:	2301      	moveq	r3, #1
 8025fc0:	2300      	movne	r3, #0
 8025fc2:	b2db      	uxtb	r3, r3
 8025fc4:	461a      	mov	r2, r3
 8025fc6:	79fb      	ldrb	r3, [r7, #7]
 8025fc8:	429a      	cmp	r2, r3
 8025fca:	d0a0      	beq.n	8025f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8025fcc:	2300      	movs	r3, #0
}
 8025fce:	4618      	mov	r0, r3
 8025fd0:	3710      	adds	r7, #16
 8025fd2:	46bd      	mov	sp, r7
 8025fd4:	bd80      	pop	{r7, pc}

08025fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8025fd6:	b480      	push	{r7}
 8025fd8:	b095      	sub	sp, #84	@ 0x54
 8025fda:	af00      	add	r7, sp, #0
 8025fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8025fde:	687b      	ldr	r3, [r7, #4]
 8025fe0:	681b      	ldr	r3, [r3, #0]
 8025fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025fe6:	e853 3f00 	ldrex	r3, [r3]
 8025fea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8025fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8025ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	681b      	ldr	r3, [r3, #0]
 8025ff8:	461a      	mov	r2, r3
 8025ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8025ffe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026000:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8026002:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026004:	e841 2300 	strex	r3, r2, [r1]
 8026008:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802600c:	2b00      	cmp	r3, #0
 802600e:	d1e6      	bne.n	8025fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8026010:	687b      	ldr	r3, [r7, #4]
 8026012:	681b      	ldr	r3, [r3, #0]
 8026014:	3308      	adds	r3, #8
 8026016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026018:	6a3b      	ldr	r3, [r7, #32]
 802601a:	e853 3f00 	ldrex	r3, [r3]
 802601e:	61fb      	str	r3, [r7, #28]
   return(result);
 8026020:	69fb      	ldr	r3, [r7, #28]
 8026022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8026026:	f023 0301 	bic.w	r3, r3, #1
 802602a:	64bb      	str	r3, [r7, #72]	@ 0x48
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	681b      	ldr	r3, [r3, #0]
 8026030:	3308      	adds	r3, #8
 8026032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8026034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8026036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802603c:	e841 2300 	strex	r3, r2, [r1]
 8026040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8026042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026044:	2b00      	cmp	r3, #0
 8026046:	d1e3      	bne.n	8026010 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8026048:	687b      	ldr	r3, [r7, #4]
 802604a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802604c:	2b01      	cmp	r3, #1
 802604e:	d118      	bne.n	8026082 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026056:	68fb      	ldr	r3, [r7, #12]
 8026058:	e853 3f00 	ldrex	r3, [r3]
 802605c:	60bb      	str	r3, [r7, #8]
   return(result);
 802605e:	68bb      	ldr	r3, [r7, #8]
 8026060:	f023 0310 	bic.w	r3, r3, #16
 8026064:	647b      	str	r3, [r7, #68]	@ 0x44
 8026066:	687b      	ldr	r3, [r7, #4]
 8026068:	681b      	ldr	r3, [r3, #0]
 802606a:	461a      	mov	r2, r3
 802606c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802606e:	61bb      	str	r3, [r7, #24]
 8026070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026072:	6979      	ldr	r1, [r7, #20]
 8026074:	69ba      	ldr	r2, [r7, #24]
 8026076:	e841 2300 	strex	r3, r2, [r1]
 802607a:	613b      	str	r3, [r7, #16]
   return(result);
 802607c:	693b      	ldr	r3, [r7, #16]
 802607e:	2b00      	cmp	r3, #0
 8026080:	d1e6      	bne.n	8026050 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	2220      	movs	r2, #32
 8026086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802608a:	687b      	ldr	r3, [r7, #4]
 802608c:	2200      	movs	r2, #0
 802608e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8026090:	687b      	ldr	r3, [r7, #4]
 8026092:	2200      	movs	r2, #0
 8026094:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8026096:	bf00      	nop
 8026098:	3754      	adds	r7, #84	@ 0x54
 802609a:	46bd      	mov	sp, r7
 802609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260a0:	4770      	bx	lr

080260a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80260a2:	b480      	push	{r7}
 80260a4:	b085      	sub	sp, #20
 80260a6:	af00      	add	r7, sp, #0
 80260a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80260aa:	687b      	ldr	r3, [r7, #4]
 80260ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80260b0:	2b01      	cmp	r3, #1
 80260b2:	d101      	bne.n	80260b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80260b4:	2302      	movs	r3, #2
 80260b6:	e027      	b.n	8026108 <HAL_UARTEx_DisableFifoMode+0x66>
 80260b8:	687b      	ldr	r3, [r7, #4]
 80260ba:	2201      	movs	r2, #1
 80260bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80260c0:	687b      	ldr	r3, [r7, #4]
 80260c2:	2224      	movs	r2, #36	@ 0x24
 80260c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	681b      	ldr	r3, [r3, #0]
 80260ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	681b      	ldr	r3, [r3, #0]
 80260d4:	681a      	ldr	r2, [r3, #0]
 80260d6:	687b      	ldr	r3, [r7, #4]
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	f022 0201 	bic.w	r2, r2, #1
 80260de:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80260e0:	68fb      	ldr	r3, [r7, #12]
 80260e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80260e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80260e8:	687b      	ldr	r3, [r7, #4]
 80260ea:	2200      	movs	r2, #0
 80260ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	68fa      	ldr	r2, [r7, #12]
 80260f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80260f6:	687b      	ldr	r3, [r7, #4]
 80260f8:	2220      	movs	r2, #32
 80260fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80260fe:	687b      	ldr	r3, [r7, #4]
 8026100:	2200      	movs	r2, #0
 8026102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8026106:	2300      	movs	r3, #0
}
 8026108:	4618      	mov	r0, r3
 802610a:	3714      	adds	r7, #20
 802610c:	46bd      	mov	sp, r7
 802610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026112:	4770      	bx	lr

08026114 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8026114:	b580      	push	{r7, lr}
 8026116:	b084      	sub	sp, #16
 8026118:	af00      	add	r7, sp, #0
 802611a:	6078      	str	r0, [r7, #4]
 802611c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802611e:	687b      	ldr	r3, [r7, #4]
 8026120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8026124:	2b01      	cmp	r3, #1
 8026126:	d101      	bne.n	802612c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8026128:	2302      	movs	r3, #2
 802612a:	e02d      	b.n	8026188 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802612c:	687b      	ldr	r3, [r7, #4]
 802612e:	2201      	movs	r2, #1
 8026130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	2224      	movs	r2, #36	@ 0x24
 8026138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802613c:	687b      	ldr	r3, [r7, #4]
 802613e:	681b      	ldr	r3, [r3, #0]
 8026140:	681b      	ldr	r3, [r3, #0]
 8026142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8026144:	687b      	ldr	r3, [r7, #4]
 8026146:	681b      	ldr	r3, [r3, #0]
 8026148:	681a      	ldr	r2, [r3, #0]
 802614a:	687b      	ldr	r3, [r7, #4]
 802614c:	681b      	ldr	r3, [r3, #0]
 802614e:	f022 0201 	bic.w	r2, r2, #1
 8026152:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8026154:	687b      	ldr	r3, [r7, #4]
 8026156:	681b      	ldr	r3, [r3, #0]
 8026158:	689b      	ldr	r3, [r3, #8]
 802615a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 802615e:	687b      	ldr	r3, [r7, #4]
 8026160:	681b      	ldr	r3, [r3, #0]
 8026162:	683a      	ldr	r2, [r7, #0]
 8026164:	430a      	orrs	r2, r1
 8026166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8026168:	6878      	ldr	r0, [r7, #4]
 802616a:	f000 f84f 	bl	802620c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802616e:	687b      	ldr	r3, [r7, #4]
 8026170:	681b      	ldr	r3, [r3, #0]
 8026172:	68fa      	ldr	r2, [r7, #12]
 8026174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8026176:	687b      	ldr	r3, [r7, #4]
 8026178:	2220      	movs	r2, #32
 802617a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802617e:	687b      	ldr	r3, [r7, #4]
 8026180:	2200      	movs	r2, #0
 8026182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8026186:	2300      	movs	r3, #0
}
 8026188:	4618      	mov	r0, r3
 802618a:	3710      	adds	r7, #16
 802618c:	46bd      	mov	sp, r7
 802618e:	bd80      	pop	{r7, pc}

08026190 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8026190:	b580      	push	{r7, lr}
 8026192:	b084      	sub	sp, #16
 8026194:	af00      	add	r7, sp, #0
 8026196:	6078      	str	r0, [r7, #4]
 8026198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80261a0:	2b01      	cmp	r3, #1
 80261a2:	d101      	bne.n	80261a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80261a4:	2302      	movs	r3, #2
 80261a6:	e02d      	b.n	8026204 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	2201      	movs	r2, #1
 80261ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	2224      	movs	r2, #36	@ 0x24
 80261b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80261b8:	687b      	ldr	r3, [r7, #4]
 80261ba:	681b      	ldr	r3, [r3, #0]
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	681b      	ldr	r3, [r3, #0]
 80261c4:	681a      	ldr	r2, [r3, #0]
 80261c6:	687b      	ldr	r3, [r7, #4]
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	f022 0201 	bic.w	r2, r2, #1
 80261ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80261d0:	687b      	ldr	r3, [r7, #4]
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	689b      	ldr	r3, [r3, #8]
 80261d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80261da:	687b      	ldr	r3, [r7, #4]
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	683a      	ldr	r2, [r7, #0]
 80261e0:	430a      	orrs	r2, r1
 80261e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80261e4:	6878      	ldr	r0, [r7, #4]
 80261e6:	f000 f811 	bl	802620c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	68fa      	ldr	r2, [r7, #12]
 80261f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80261f2:	687b      	ldr	r3, [r7, #4]
 80261f4:	2220      	movs	r2, #32
 80261f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	2200      	movs	r2, #0
 80261fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8026202:	2300      	movs	r3, #0
}
 8026204:	4618      	mov	r0, r3
 8026206:	3710      	adds	r7, #16
 8026208:	46bd      	mov	sp, r7
 802620a:	bd80      	pop	{r7, pc}

0802620c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802620c:	b480      	push	{r7}
 802620e:	b085      	sub	sp, #20
 8026210:	af00      	add	r7, sp, #0
 8026212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8026218:	2b00      	cmp	r3, #0
 802621a:	d108      	bne.n	802622e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802621c:	687b      	ldr	r3, [r7, #4]
 802621e:	2201      	movs	r2, #1
 8026220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8026224:	687b      	ldr	r3, [r7, #4]
 8026226:	2201      	movs	r2, #1
 8026228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802622c:	e031      	b.n	8026292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802622e:	2308      	movs	r3, #8
 8026230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8026232:	2308      	movs	r3, #8
 8026234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8026236:	687b      	ldr	r3, [r7, #4]
 8026238:	681b      	ldr	r3, [r3, #0]
 802623a:	689b      	ldr	r3, [r3, #8]
 802623c:	0e5b      	lsrs	r3, r3, #25
 802623e:	b2db      	uxtb	r3, r3
 8026240:	f003 0307 	and.w	r3, r3, #7
 8026244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	689b      	ldr	r3, [r3, #8]
 802624c:	0f5b      	lsrs	r3, r3, #29
 802624e:	b2db      	uxtb	r3, r3
 8026250:	f003 0307 	and.w	r3, r3, #7
 8026254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8026256:	7bbb      	ldrb	r3, [r7, #14]
 8026258:	7b3a      	ldrb	r2, [r7, #12]
 802625a:	4911      	ldr	r1, [pc, #68]	@ (80262a0 <UARTEx_SetNbDataToProcess+0x94>)
 802625c:	5c8a      	ldrb	r2, [r1, r2]
 802625e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8026262:	7b3a      	ldrb	r2, [r7, #12]
 8026264:	490f      	ldr	r1, [pc, #60]	@ (80262a4 <UARTEx_SetNbDataToProcess+0x98>)
 8026266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8026268:	fb93 f3f2 	sdiv	r3, r3, r2
 802626c:	b29a      	uxth	r2, r3
 802626e:	687b      	ldr	r3, [r7, #4]
 8026270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8026274:	7bfb      	ldrb	r3, [r7, #15]
 8026276:	7b7a      	ldrb	r2, [r7, #13]
 8026278:	4909      	ldr	r1, [pc, #36]	@ (80262a0 <UARTEx_SetNbDataToProcess+0x94>)
 802627a:	5c8a      	ldrb	r2, [r1, r2]
 802627c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8026280:	7b7a      	ldrb	r2, [r7, #13]
 8026282:	4908      	ldr	r1, [pc, #32]	@ (80262a4 <UARTEx_SetNbDataToProcess+0x98>)
 8026284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8026286:	fb93 f3f2 	sdiv	r3, r3, r2
 802628a:	b29a      	uxth	r2, r3
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8026292:	bf00      	nop
 8026294:	3714      	adds	r7, #20
 8026296:	46bd      	mov	sp, r7
 8026298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802629c:	4770      	bx	lr
 802629e:	bf00      	nop
 80262a0:	080271c8 	.word	0x080271c8
 80262a4:	080271d0 	.word	0x080271d0

080262a8 <std>:
 80262a8:	2300      	movs	r3, #0
 80262aa:	b510      	push	{r4, lr}
 80262ac:	4604      	mov	r4, r0
 80262ae:	e9c0 3300 	strd	r3, r3, [r0]
 80262b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80262b6:	6083      	str	r3, [r0, #8]
 80262b8:	8181      	strh	r1, [r0, #12]
 80262ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80262bc:	81c2      	strh	r2, [r0, #14]
 80262be:	6183      	str	r3, [r0, #24]
 80262c0:	4619      	mov	r1, r3
 80262c2:	2208      	movs	r2, #8
 80262c4:	305c      	adds	r0, #92	@ 0x5c
 80262c6:	f000 f8c3 	bl	8026450 <memset>
 80262ca:	4b0d      	ldr	r3, [pc, #52]	@ (8026300 <std+0x58>)
 80262cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80262ce:	4b0d      	ldr	r3, [pc, #52]	@ (8026304 <std+0x5c>)
 80262d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80262d2:	4b0d      	ldr	r3, [pc, #52]	@ (8026308 <std+0x60>)
 80262d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80262d6:	4b0d      	ldr	r3, [pc, #52]	@ (802630c <std+0x64>)
 80262d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80262da:	4b0d      	ldr	r3, [pc, #52]	@ (8026310 <std+0x68>)
 80262dc:	6224      	str	r4, [r4, #32]
 80262de:	429c      	cmp	r4, r3
 80262e0:	d006      	beq.n	80262f0 <std+0x48>
 80262e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80262e6:	4294      	cmp	r4, r2
 80262e8:	d002      	beq.n	80262f0 <std+0x48>
 80262ea:	33d0      	adds	r3, #208	@ 0xd0
 80262ec:	429c      	cmp	r4, r3
 80262ee:	d105      	bne.n	80262fc <std+0x54>
 80262f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80262f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80262f8:	f000 b8dc 	b.w	80264b4 <__retarget_lock_init_recursive>
 80262fc:	bd10      	pop	{r4, pc}
 80262fe:	bf00      	nop
 8026300:	08026d0d 	.word	0x08026d0d
 8026304:	08026d2f 	.word	0x08026d2f
 8026308:	08026d67 	.word	0x08026d67
 802630c:	08026d8b 	.word	0x08026d8b
 8026310:	20000564 	.word	0x20000564

08026314 <stdio_exit_handler>:
 8026314:	4a02      	ldr	r2, [pc, #8]	@ (8026320 <stdio_exit_handler+0xc>)
 8026316:	4903      	ldr	r1, [pc, #12]	@ (8026324 <stdio_exit_handler+0x10>)
 8026318:	4803      	ldr	r0, [pc, #12]	@ (8026328 <stdio_exit_handler+0x14>)
 802631a:	f000 b869 	b.w	80263f0 <_fwalk_sglue>
 802631e:	bf00      	nop
 8026320:	2000000c 	.word	0x2000000c
 8026324:	08026ca5 	.word	0x08026ca5
 8026328:	2000001c 	.word	0x2000001c

0802632c <cleanup_stdio>:
 802632c:	6841      	ldr	r1, [r0, #4]
 802632e:	4b0c      	ldr	r3, [pc, #48]	@ (8026360 <cleanup_stdio+0x34>)
 8026330:	4299      	cmp	r1, r3
 8026332:	b510      	push	{r4, lr}
 8026334:	4604      	mov	r4, r0
 8026336:	d001      	beq.n	802633c <cleanup_stdio+0x10>
 8026338:	f000 fcb4 	bl	8026ca4 <_fflush_r>
 802633c:	68a1      	ldr	r1, [r4, #8]
 802633e:	4b09      	ldr	r3, [pc, #36]	@ (8026364 <cleanup_stdio+0x38>)
 8026340:	4299      	cmp	r1, r3
 8026342:	d002      	beq.n	802634a <cleanup_stdio+0x1e>
 8026344:	4620      	mov	r0, r4
 8026346:	f000 fcad 	bl	8026ca4 <_fflush_r>
 802634a:	68e1      	ldr	r1, [r4, #12]
 802634c:	4b06      	ldr	r3, [pc, #24]	@ (8026368 <cleanup_stdio+0x3c>)
 802634e:	4299      	cmp	r1, r3
 8026350:	d004      	beq.n	802635c <cleanup_stdio+0x30>
 8026352:	4620      	mov	r0, r4
 8026354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026358:	f000 bca4 	b.w	8026ca4 <_fflush_r>
 802635c:	bd10      	pop	{r4, pc}
 802635e:	bf00      	nop
 8026360:	20000564 	.word	0x20000564
 8026364:	200005cc 	.word	0x200005cc
 8026368:	20000634 	.word	0x20000634

0802636c <global_stdio_init.part.0>:
 802636c:	b510      	push	{r4, lr}
 802636e:	4b0b      	ldr	r3, [pc, #44]	@ (802639c <global_stdio_init.part.0+0x30>)
 8026370:	4c0b      	ldr	r4, [pc, #44]	@ (80263a0 <global_stdio_init.part.0+0x34>)
 8026372:	4a0c      	ldr	r2, [pc, #48]	@ (80263a4 <global_stdio_init.part.0+0x38>)
 8026374:	601a      	str	r2, [r3, #0]
 8026376:	4620      	mov	r0, r4
 8026378:	2200      	movs	r2, #0
 802637a:	2104      	movs	r1, #4
 802637c:	f7ff ff94 	bl	80262a8 <std>
 8026380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8026384:	2201      	movs	r2, #1
 8026386:	2109      	movs	r1, #9
 8026388:	f7ff ff8e 	bl	80262a8 <std>
 802638c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8026390:	2202      	movs	r2, #2
 8026392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026396:	2112      	movs	r1, #18
 8026398:	f7ff bf86 	b.w	80262a8 <std>
 802639c:	2000069c 	.word	0x2000069c
 80263a0:	20000564 	.word	0x20000564
 80263a4:	08026315 	.word	0x08026315

080263a8 <__sfp_lock_acquire>:
 80263a8:	4801      	ldr	r0, [pc, #4]	@ (80263b0 <__sfp_lock_acquire+0x8>)
 80263aa:	f000 b884 	b.w	80264b6 <__retarget_lock_acquire_recursive>
 80263ae:	bf00      	nop
 80263b0:	200006a1 	.word	0x200006a1

080263b4 <__sfp_lock_release>:
 80263b4:	4801      	ldr	r0, [pc, #4]	@ (80263bc <__sfp_lock_release+0x8>)
 80263b6:	f000 b87f 	b.w	80264b8 <__retarget_lock_release_recursive>
 80263ba:	bf00      	nop
 80263bc:	200006a1 	.word	0x200006a1

080263c0 <__sinit>:
 80263c0:	b510      	push	{r4, lr}
 80263c2:	4604      	mov	r4, r0
 80263c4:	f7ff fff0 	bl	80263a8 <__sfp_lock_acquire>
 80263c8:	6a23      	ldr	r3, [r4, #32]
 80263ca:	b11b      	cbz	r3, 80263d4 <__sinit+0x14>
 80263cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80263d0:	f7ff bff0 	b.w	80263b4 <__sfp_lock_release>
 80263d4:	4b04      	ldr	r3, [pc, #16]	@ (80263e8 <__sinit+0x28>)
 80263d6:	6223      	str	r3, [r4, #32]
 80263d8:	4b04      	ldr	r3, [pc, #16]	@ (80263ec <__sinit+0x2c>)
 80263da:	681b      	ldr	r3, [r3, #0]
 80263dc:	2b00      	cmp	r3, #0
 80263de:	d1f5      	bne.n	80263cc <__sinit+0xc>
 80263e0:	f7ff ffc4 	bl	802636c <global_stdio_init.part.0>
 80263e4:	e7f2      	b.n	80263cc <__sinit+0xc>
 80263e6:	bf00      	nop
 80263e8:	0802632d 	.word	0x0802632d
 80263ec:	2000069c 	.word	0x2000069c

080263f0 <_fwalk_sglue>:
 80263f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80263f4:	4607      	mov	r7, r0
 80263f6:	4688      	mov	r8, r1
 80263f8:	4614      	mov	r4, r2
 80263fa:	2600      	movs	r6, #0
 80263fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026400:	f1b9 0901 	subs.w	r9, r9, #1
 8026404:	d505      	bpl.n	8026412 <_fwalk_sglue+0x22>
 8026406:	6824      	ldr	r4, [r4, #0]
 8026408:	2c00      	cmp	r4, #0
 802640a:	d1f7      	bne.n	80263fc <_fwalk_sglue+0xc>
 802640c:	4630      	mov	r0, r6
 802640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026412:	89ab      	ldrh	r3, [r5, #12]
 8026414:	2b01      	cmp	r3, #1
 8026416:	d907      	bls.n	8026428 <_fwalk_sglue+0x38>
 8026418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802641c:	3301      	adds	r3, #1
 802641e:	d003      	beq.n	8026428 <_fwalk_sglue+0x38>
 8026420:	4629      	mov	r1, r5
 8026422:	4638      	mov	r0, r7
 8026424:	47c0      	blx	r8
 8026426:	4306      	orrs	r6, r0
 8026428:	3568      	adds	r5, #104	@ 0x68
 802642a:	e7e9      	b.n	8026400 <_fwalk_sglue+0x10>

0802642c <iprintf>:
 802642c:	b40f      	push	{r0, r1, r2, r3}
 802642e:	b507      	push	{r0, r1, r2, lr}
 8026430:	4906      	ldr	r1, [pc, #24]	@ (802644c <iprintf+0x20>)
 8026432:	ab04      	add	r3, sp, #16
 8026434:	6808      	ldr	r0, [r1, #0]
 8026436:	f853 2b04 	ldr.w	r2, [r3], #4
 802643a:	6881      	ldr	r1, [r0, #8]
 802643c:	9301      	str	r3, [sp, #4]
 802643e:	f000 f865 	bl	802650c <_vfiprintf_r>
 8026442:	b003      	add	sp, #12
 8026444:	f85d eb04 	ldr.w	lr, [sp], #4
 8026448:	b004      	add	sp, #16
 802644a:	4770      	bx	lr
 802644c:	20000018 	.word	0x20000018

08026450 <memset>:
 8026450:	4402      	add	r2, r0
 8026452:	4603      	mov	r3, r0
 8026454:	4293      	cmp	r3, r2
 8026456:	d100      	bne.n	802645a <memset+0xa>
 8026458:	4770      	bx	lr
 802645a:	f803 1b01 	strb.w	r1, [r3], #1
 802645e:	e7f9      	b.n	8026454 <memset+0x4>

08026460 <__errno>:
 8026460:	4b01      	ldr	r3, [pc, #4]	@ (8026468 <__errno+0x8>)
 8026462:	6818      	ldr	r0, [r3, #0]
 8026464:	4770      	bx	lr
 8026466:	bf00      	nop
 8026468:	20000018 	.word	0x20000018

0802646c <__libc_init_array>:
 802646c:	b570      	push	{r4, r5, r6, lr}
 802646e:	4d0d      	ldr	r5, [pc, #52]	@ (80264a4 <__libc_init_array+0x38>)
 8026470:	4c0d      	ldr	r4, [pc, #52]	@ (80264a8 <__libc_init_array+0x3c>)
 8026472:	1b64      	subs	r4, r4, r5
 8026474:	10a4      	asrs	r4, r4, #2
 8026476:	2600      	movs	r6, #0
 8026478:	42a6      	cmp	r6, r4
 802647a:	d109      	bne.n	8026490 <__libc_init_array+0x24>
 802647c:	4d0b      	ldr	r5, [pc, #44]	@ (80264ac <__libc_init_array+0x40>)
 802647e:	4c0c      	ldr	r4, [pc, #48]	@ (80264b0 <__libc_init_array+0x44>)
 8026480:	f000 fe40 	bl	8027104 <_init>
 8026484:	1b64      	subs	r4, r4, r5
 8026486:	10a4      	asrs	r4, r4, #2
 8026488:	2600      	movs	r6, #0
 802648a:	42a6      	cmp	r6, r4
 802648c:	d105      	bne.n	802649a <__libc_init_array+0x2e>
 802648e:	bd70      	pop	{r4, r5, r6, pc}
 8026490:	f855 3b04 	ldr.w	r3, [r5], #4
 8026494:	4798      	blx	r3
 8026496:	3601      	adds	r6, #1
 8026498:	e7ee      	b.n	8026478 <__libc_init_array+0xc>
 802649a:	f855 3b04 	ldr.w	r3, [r5], #4
 802649e:	4798      	blx	r3
 80264a0:	3601      	adds	r6, #1
 80264a2:	e7f2      	b.n	802648a <__libc_init_array+0x1e>
 80264a4:	08027214 	.word	0x08027214
 80264a8:	08027214 	.word	0x08027214
 80264ac:	08027214 	.word	0x08027214
 80264b0:	08027218 	.word	0x08027218

080264b4 <__retarget_lock_init_recursive>:
 80264b4:	4770      	bx	lr

080264b6 <__retarget_lock_acquire_recursive>:
 80264b6:	4770      	bx	lr

080264b8 <__retarget_lock_release_recursive>:
 80264b8:	4770      	bx	lr

080264ba <__sfputc_r>:
 80264ba:	6893      	ldr	r3, [r2, #8]
 80264bc:	3b01      	subs	r3, #1
 80264be:	2b00      	cmp	r3, #0
 80264c0:	b410      	push	{r4}
 80264c2:	6093      	str	r3, [r2, #8]
 80264c4:	da08      	bge.n	80264d8 <__sfputc_r+0x1e>
 80264c6:	6994      	ldr	r4, [r2, #24]
 80264c8:	42a3      	cmp	r3, r4
 80264ca:	db01      	blt.n	80264d0 <__sfputc_r+0x16>
 80264cc:	290a      	cmp	r1, #10
 80264ce:	d103      	bne.n	80264d8 <__sfputc_r+0x1e>
 80264d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80264d4:	f000 bc5d 	b.w	8026d92 <__swbuf_r>
 80264d8:	6813      	ldr	r3, [r2, #0]
 80264da:	1c58      	adds	r0, r3, #1
 80264dc:	6010      	str	r0, [r2, #0]
 80264de:	7019      	strb	r1, [r3, #0]
 80264e0:	4608      	mov	r0, r1
 80264e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80264e6:	4770      	bx	lr

080264e8 <__sfputs_r>:
 80264e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264ea:	4606      	mov	r6, r0
 80264ec:	460f      	mov	r7, r1
 80264ee:	4614      	mov	r4, r2
 80264f0:	18d5      	adds	r5, r2, r3
 80264f2:	42ac      	cmp	r4, r5
 80264f4:	d101      	bne.n	80264fa <__sfputs_r+0x12>
 80264f6:	2000      	movs	r0, #0
 80264f8:	e007      	b.n	802650a <__sfputs_r+0x22>
 80264fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264fe:	463a      	mov	r2, r7
 8026500:	4630      	mov	r0, r6
 8026502:	f7ff ffda 	bl	80264ba <__sfputc_r>
 8026506:	1c43      	adds	r3, r0, #1
 8026508:	d1f3      	bne.n	80264f2 <__sfputs_r+0xa>
 802650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802650c <_vfiprintf_r>:
 802650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026510:	460d      	mov	r5, r1
 8026512:	b09d      	sub	sp, #116	@ 0x74
 8026514:	4614      	mov	r4, r2
 8026516:	4698      	mov	r8, r3
 8026518:	4606      	mov	r6, r0
 802651a:	b118      	cbz	r0, 8026524 <_vfiprintf_r+0x18>
 802651c:	6a03      	ldr	r3, [r0, #32]
 802651e:	b90b      	cbnz	r3, 8026524 <_vfiprintf_r+0x18>
 8026520:	f7ff ff4e 	bl	80263c0 <__sinit>
 8026524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026526:	07d9      	lsls	r1, r3, #31
 8026528:	d405      	bmi.n	8026536 <_vfiprintf_r+0x2a>
 802652a:	89ab      	ldrh	r3, [r5, #12]
 802652c:	059a      	lsls	r2, r3, #22
 802652e:	d402      	bmi.n	8026536 <_vfiprintf_r+0x2a>
 8026530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026532:	f7ff ffc0 	bl	80264b6 <__retarget_lock_acquire_recursive>
 8026536:	89ab      	ldrh	r3, [r5, #12]
 8026538:	071b      	lsls	r3, r3, #28
 802653a:	d501      	bpl.n	8026540 <_vfiprintf_r+0x34>
 802653c:	692b      	ldr	r3, [r5, #16]
 802653e:	b99b      	cbnz	r3, 8026568 <_vfiprintf_r+0x5c>
 8026540:	4629      	mov	r1, r5
 8026542:	4630      	mov	r0, r6
 8026544:	f000 fc64 	bl	8026e10 <__swsetup_r>
 8026548:	b170      	cbz	r0, 8026568 <_vfiprintf_r+0x5c>
 802654a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802654c:	07dc      	lsls	r4, r3, #31
 802654e:	d504      	bpl.n	802655a <_vfiprintf_r+0x4e>
 8026550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026554:	b01d      	add	sp, #116	@ 0x74
 8026556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802655a:	89ab      	ldrh	r3, [r5, #12]
 802655c:	0598      	lsls	r0, r3, #22
 802655e:	d4f7      	bmi.n	8026550 <_vfiprintf_r+0x44>
 8026560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026562:	f7ff ffa9 	bl	80264b8 <__retarget_lock_release_recursive>
 8026566:	e7f3      	b.n	8026550 <_vfiprintf_r+0x44>
 8026568:	2300      	movs	r3, #0
 802656a:	9309      	str	r3, [sp, #36]	@ 0x24
 802656c:	2320      	movs	r3, #32
 802656e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026572:	f8cd 800c 	str.w	r8, [sp, #12]
 8026576:	2330      	movs	r3, #48	@ 0x30
 8026578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026728 <_vfiprintf_r+0x21c>
 802657c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026580:	f04f 0901 	mov.w	r9, #1
 8026584:	4623      	mov	r3, r4
 8026586:	469a      	mov	sl, r3
 8026588:	f813 2b01 	ldrb.w	r2, [r3], #1
 802658c:	b10a      	cbz	r2, 8026592 <_vfiprintf_r+0x86>
 802658e:	2a25      	cmp	r2, #37	@ 0x25
 8026590:	d1f9      	bne.n	8026586 <_vfiprintf_r+0x7a>
 8026592:	ebba 0b04 	subs.w	fp, sl, r4
 8026596:	d00b      	beq.n	80265b0 <_vfiprintf_r+0xa4>
 8026598:	465b      	mov	r3, fp
 802659a:	4622      	mov	r2, r4
 802659c:	4629      	mov	r1, r5
 802659e:	4630      	mov	r0, r6
 80265a0:	f7ff ffa2 	bl	80264e8 <__sfputs_r>
 80265a4:	3001      	adds	r0, #1
 80265a6:	f000 80a7 	beq.w	80266f8 <_vfiprintf_r+0x1ec>
 80265aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80265ac:	445a      	add	r2, fp
 80265ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80265b0:	f89a 3000 	ldrb.w	r3, [sl]
 80265b4:	2b00      	cmp	r3, #0
 80265b6:	f000 809f 	beq.w	80266f8 <_vfiprintf_r+0x1ec>
 80265ba:	2300      	movs	r3, #0
 80265bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80265c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80265c4:	f10a 0a01 	add.w	sl, sl, #1
 80265c8:	9304      	str	r3, [sp, #16]
 80265ca:	9307      	str	r3, [sp, #28]
 80265cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80265d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80265d2:	4654      	mov	r4, sl
 80265d4:	2205      	movs	r2, #5
 80265d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265da:	4853      	ldr	r0, [pc, #332]	@ (8026728 <_vfiprintf_r+0x21c>)
 80265dc:	f7f9 fd38 	bl	8020050 <memchr>
 80265e0:	9a04      	ldr	r2, [sp, #16]
 80265e2:	b9d8      	cbnz	r0, 802661c <_vfiprintf_r+0x110>
 80265e4:	06d1      	lsls	r1, r2, #27
 80265e6:	bf44      	itt	mi
 80265e8:	2320      	movmi	r3, #32
 80265ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265ee:	0713      	lsls	r3, r2, #28
 80265f0:	bf44      	itt	mi
 80265f2:	232b      	movmi	r3, #43	@ 0x2b
 80265f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265f8:	f89a 3000 	ldrb.w	r3, [sl]
 80265fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80265fe:	d015      	beq.n	802662c <_vfiprintf_r+0x120>
 8026600:	9a07      	ldr	r2, [sp, #28]
 8026602:	4654      	mov	r4, sl
 8026604:	2000      	movs	r0, #0
 8026606:	f04f 0c0a 	mov.w	ip, #10
 802660a:	4621      	mov	r1, r4
 802660c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026610:	3b30      	subs	r3, #48	@ 0x30
 8026612:	2b09      	cmp	r3, #9
 8026614:	d94b      	bls.n	80266ae <_vfiprintf_r+0x1a2>
 8026616:	b1b0      	cbz	r0, 8026646 <_vfiprintf_r+0x13a>
 8026618:	9207      	str	r2, [sp, #28]
 802661a:	e014      	b.n	8026646 <_vfiprintf_r+0x13a>
 802661c:	eba0 0308 	sub.w	r3, r0, r8
 8026620:	fa09 f303 	lsl.w	r3, r9, r3
 8026624:	4313      	orrs	r3, r2
 8026626:	9304      	str	r3, [sp, #16]
 8026628:	46a2      	mov	sl, r4
 802662a:	e7d2      	b.n	80265d2 <_vfiprintf_r+0xc6>
 802662c:	9b03      	ldr	r3, [sp, #12]
 802662e:	1d19      	adds	r1, r3, #4
 8026630:	681b      	ldr	r3, [r3, #0]
 8026632:	9103      	str	r1, [sp, #12]
 8026634:	2b00      	cmp	r3, #0
 8026636:	bfbb      	ittet	lt
 8026638:	425b      	neglt	r3, r3
 802663a:	f042 0202 	orrlt.w	r2, r2, #2
 802663e:	9307      	strge	r3, [sp, #28]
 8026640:	9307      	strlt	r3, [sp, #28]
 8026642:	bfb8      	it	lt
 8026644:	9204      	strlt	r2, [sp, #16]
 8026646:	7823      	ldrb	r3, [r4, #0]
 8026648:	2b2e      	cmp	r3, #46	@ 0x2e
 802664a:	d10a      	bne.n	8026662 <_vfiprintf_r+0x156>
 802664c:	7863      	ldrb	r3, [r4, #1]
 802664e:	2b2a      	cmp	r3, #42	@ 0x2a
 8026650:	d132      	bne.n	80266b8 <_vfiprintf_r+0x1ac>
 8026652:	9b03      	ldr	r3, [sp, #12]
 8026654:	1d1a      	adds	r2, r3, #4
 8026656:	681b      	ldr	r3, [r3, #0]
 8026658:	9203      	str	r2, [sp, #12]
 802665a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802665e:	3402      	adds	r4, #2
 8026660:	9305      	str	r3, [sp, #20]
 8026662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026738 <_vfiprintf_r+0x22c>
 8026666:	7821      	ldrb	r1, [r4, #0]
 8026668:	2203      	movs	r2, #3
 802666a:	4650      	mov	r0, sl
 802666c:	f7f9 fcf0 	bl	8020050 <memchr>
 8026670:	b138      	cbz	r0, 8026682 <_vfiprintf_r+0x176>
 8026672:	9b04      	ldr	r3, [sp, #16]
 8026674:	eba0 000a 	sub.w	r0, r0, sl
 8026678:	2240      	movs	r2, #64	@ 0x40
 802667a:	4082      	lsls	r2, r0
 802667c:	4313      	orrs	r3, r2
 802667e:	3401      	adds	r4, #1
 8026680:	9304      	str	r3, [sp, #16]
 8026682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026686:	4829      	ldr	r0, [pc, #164]	@ (802672c <_vfiprintf_r+0x220>)
 8026688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802668c:	2206      	movs	r2, #6
 802668e:	f7f9 fcdf 	bl	8020050 <memchr>
 8026692:	2800      	cmp	r0, #0
 8026694:	d03f      	beq.n	8026716 <_vfiprintf_r+0x20a>
 8026696:	4b26      	ldr	r3, [pc, #152]	@ (8026730 <_vfiprintf_r+0x224>)
 8026698:	bb1b      	cbnz	r3, 80266e2 <_vfiprintf_r+0x1d6>
 802669a:	9b03      	ldr	r3, [sp, #12]
 802669c:	3307      	adds	r3, #7
 802669e:	f023 0307 	bic.w	r3, r3, #7
 80266a2:	3308      	adds	r3, #8
 80266a4:	9303      	str	r3, [sp, #12]
 80266a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266a8:	443b      	add	r3, r7
 80266aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80266ac:	e76a      	b.n	8026584 <_vfiprintf_r+0x78>
 80266ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80266b2:	460c      	mov	r4, r1
 80266b4:	2001      	movs	r0, #1
 80266b6:	e7a8      	b.n	802660a <_vfiprintf_r+0xfe>
 80266b8:	2300      	movs	r3, #0
 80266ba:	3401      	adds	r4, #1
 80266bc:	9305      	str	r3, [sp, #20]
 80266be:	4619      	mov	r1, r3
 80266c0:	f04f 0c0a 	mov.w	ip, #10
 80266c4:	4620      	mov	r0, r4
 80266c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80266ca:	3a30      	subs	r2, #48	@ 0x30
 80266cc:	2a09      	cmp	r2, #9
 80266ce:	d903      	bls.n	80266d8 <_vfiprintf_r+0x1cc>
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d0c6      	beq.n	8026662 <_vfiprintf_r+0x156>
 80266d4:	9105      	str	r1, [sp, #20]
 80266d6:	e7c4      	b.n	8026662 <_vfiprintf_r+0x156>
 80266d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80266dc:	4604      	mov	r4, r0
 80266de:	2301      	movs	r3, #1
 80266e0:	e7f0      	b.n	80266c4 <_vfiprintf_r+0x1b8>
 80266e2:	ab03      	add	r3, sp, #12
 80266e4:	9300      	str	r3, [sp, #0]
 80266e6:	462a      	mov	r2, r5
 80266e8:	4b12      	ldr	r3, [pc, #72]	@ (8026734 <_vfiprintf_r+0x228>)
 80266ea:	a904      	add	r1, sp, #16
 80266ec:	4630      	mov	r0, r6
 80266ee:	f3af 8000 	nop.w
 80266f2:	4607      	mov	r7, r0
 80266f4:	1c78      	adds	r0, r7, #1
 80266f6:	d1d6      	bne.n	80266a6 <_vfiprintf_r+0x19a>
 80266f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80266fa:	07d9      	lsls	r1, r3, #31
 80266fc:	d405      	bmi.n	802670a <_vfiprintf_r+0x1fe>
 80266fe:	89ab      	ldrh	r3, [r5, #12]
 8026700:	059a      	lsls	r2, r3, #22
 8026702:	d402      	bmi.n	802670a <_vfiprintf_r+0x1fe>
 8026704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026706:	f7ff fed7 	bl	80264b8 <__retarget_lock_release_recursive>
 802670a:	89ab      	ldrh	r3, [r5, #12]
 802670c:	065b      	lsls	r3, r3, #25
 802670e:	f53f af1f 	bmi.w	8026550 <_vfiprintf_r+0x44>
 8026712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026714:	e71e      	b.n	8026554 <_vfiprintf_r+0x48>
 8026716:	ab03      	add	r3, sp, #12
 8026718:	9300      	str	r3, [sp, #0]
 802671a:	462a      	mov	r2, r5
 802671c:	4b05      	ldr	r3, [pc, #20]	@ (8026734 <_vfiprintf_r+0x228>)
 802671e:	a904      	add	r1, sp, #16
 8026720:	4630      	mov	r0, r6
 8026722:	f000 f91b 	bl	802695c <_printf_i>
 8026726:	e7e4      	b.n	80266f2 <_vfiprintf_r+0x1e6>
 8026728:	080271d8 	.word	0x080271d8
 802672c:	080271e2 	.word	0x080271e2
 8026730:	00000000 	.word	0x00000000
 8026734:	080264e9 	.word	0x080264e9
 8026738:	080271de 	.word	0x080271de

0802673c <sbrk_aligned>:
 802673c:	b570      	push	{r4, r5, r6, lr}
 802673e:	4e0f      	ldr	r6, [pc, #60]	@ (802677c <sbrk_aligned+0x40>)
 8026740:	460c      	mov	r4, r1
 8026742:	6831      	ldr	r1, [r6, #0]
 8026744:	4605      	mov	r5, r0
 8026746:	b911      	cbnz	r1, 802674e <sbrk_aligned+0x12>
 8026748:	f000 fc70 	bl	802702c <_sbrk_r>
 802674c:	6030      	str	r0, [r6, #0]
 802674e:	4621      	mov	r1, r4
 8026750:	4628      	mov	r0, r5
 8026752:	f000 fc6b 	bl	802702c <_sbrk_r>
 8026756:	1c43      	adds	r3, r0, #1
 8026758:	d103      	bne.n	8026762 <sbrk_aligned+0x26>
 802675a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802675e:	4620      	mov	r0, r4
 8026760:	bd70      	pop	{r4, r5, r6, pc}
 8026762:	1cc4      	adds	r4, r0, #3
 8026764:	f024 0403 	bic.w	r4, r4, #3
 8026768:	42a0      	cmp	r0, r4
 802676a:	d0f8      	beq.n	802675e <sbrk_aligned+0x22>
 802676c:	1a21      	subs	r1, r4, r0
 802676e:	4628      	mov	r0, r5
 8026770:	f000 fc5c 	bl	802702c <_sbrk_r>
 8026774:	3001      	adds	r0, #1
 8026776:	d1f2      	bne.n	802675e <sbrk_aligned+0x22>
 8026778:	e7ef      	b.n	802675a <sbrk_aligned+0x1e>
 802677a:	bf00      	nop
 802677c:	200006a4 	.word	0x200006a4

08026780 <_malloc_r>:
 8026780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026784:	1ccd      	adds	r5, r1, #3
 8026786:	f025 0503 	bic.w	r5, r5, #3
 802678a:	3508      	adds	r5, #8
 802678c:	2d0c      	cmp	r5, #12
 802678e:	bf38      	it	cc
 8026790:	250c      	movcc	r5, #12
 8026792:	2d00      	cmp	r5, #0
 8026794:	4606      	mov	r6, r0
 8026796:	db01      	blt.n	802679c <_malloc_r+0x1c>
 8026798:	42a9      	cmp	r1, r5
 802679a:	d904      	bls.n	80267a6 <_malloc_r+0x26>
 802679c:	230c      	movs	r3, #12
 802679e:	6033      	str	r3, [r6, #0]
 80267a0:	2000      	movs	r0, #0
 80267a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80267a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802687c <_malloc_r+0xfc>
 80267aa:	f000 faa3 	bl	8026cf4 <__malloc_lock>
 80267ae:	f8d8 3000 	ldr.w	r3, [r8]
 80267b2:	461c      	mov	r4, r3
 80267b4:	bb44      	cbnz	r4, 8026808 <_malloc_r+0x88>
 80267b6:	4629      	mov	r1, r5
 80267b8:	4630      	mov	r0, r6
 80267ba:	f7ff ffbf 	bl	802673c <sbrk_aligned>
 80267be:	1c43      	adds	r3, r0, #1
 80267c0:	4604      	mov	r4, r0
 80267c2:	d158      	bne.n	8026876 <_malloc_r+0xf6>
 80267c4:	f8d8 4000 	ldr.w	r4, [r8]
 80267c8:	4627      	mov	r7, r4
 80267ca:	2f00      	cmp	r7, #0
 80267cc:	d143      	bne.n	8026856 <_malloc_r+0xd6>
 80267ce:	2c00      	cmp	r4, #0
 80267d0:	d04b      	beq.n	802686a <_malloc_r+0xea>
 80267d2:	6823      	ldr	r3, [r4, #0]
 80267d4:	4639      	mov	r1, r7
 80267d6:	4630      	mov	r0, r6
 80267d8:	eb04 0903 	add.w	r9, r4, r3
 80267dc:	f000 fc26 	bl	802702c <_sbrk_r>
 80267e0:	4581      	cmp	r9, r0
 80267e2:	d142      	bne.n	802686a <_malloc_r+0xea>
 80267e4:	6821      	ldr	r1, [r4, #0]
 80267e6:	1a6d      	subs	r5, r5, r1
 80267e8:	4629      	mov	r1, r5
 80267ea:	4630      	mov	r0, r6
 80267ec:	f7ff ffa6 	bl	802673c <sbrk_aligned>
 80267f0:	3001      	adds	r0, #1
 80267f2:	d03a      	beq.n	802686a <_malloc_r+0xea>
 80267f4:	6823      	ldr	r3, [r4, #0]
 80267f6:	442b      	add	r3, r5
 80267f8:	6023      	str	r3, [r4, #0]
 80267fa:	f8d8 3000 	ldr.w	r3, [r8]
 80267fe:	685a      	ldr	r2, [r3, #4]
 8026800:	bb62      	cbnz	r2, 802685c <_malloc_r+0xdc>
 8026802:	f8c8 7000 	str.w	r7, [r8]
 8026806:	e00f      	b.n	8026828 <_malloc_r+0xa8>
 8026808:	6822      	ldr	r2, [r4, #0]
 802680a:	1b52      	subs	r2, r2, r5
 802680c:	d420      	bmi.n	8026850 <_malloc_r+0xd0>
 802680e:	2a0b      	cmp	r2, #11
 8026810:	d917      	bls.n	8026842 <_malloc_r+0xc2>
 8026812:	1961      	adds	r1, r4, r5
 8026814:	42a3      	cmp	r3, r4
 8026816:	6025      	str	r5, [r4, #0]
 8026818:	bf18      	it	ne
 802681a:	6059      	strne	r1, [r3, #4]
 802681c:	6863      	ldr	r3, [r4, #4]
 802681e:	bf08      	it	eq
 8026820:	f8c8 1000 	streq.w	r1, [r8]
 8026824:	5162      	str	r2, [r4, r5]
 8026826:	604b      	str	r3, [r1, #4]
 8026828:	4630      	mov	r0, r6
 802682a:	f000 fa69 	bl	8026d00 <__malloc_unlock>
 802682e:	f104 000b 	add.w	r0, r4, #11
 8026832:	1d23      	adds	r3, r4, #4
 8026834:	f020 0007 	bic.w	r0, r0, #7
 8026838:	1ac2      	subs	r2, r0, r3
 802683a:	bf1c      	itt	ne
 802683c:	1a1b      	subne	r3, r3, r0
 802683e:	50a3      	strne	r3, [r4, r2]
 8026840:	e7af      	b.n	80267a2 <_malloc_r+0x22>
 8026842:	6862      	ldr	r2, [r4, #4]
 8026844:	42a3      	cmp	r3, r4
 8026846:	bf0c      	ite	eq
 8026848:	f8c8 2000 	streq.w	r2, [r8]
 802684c:	605a      	strne	r2, [r3, #4]
 802684e:	e7eb      	b.n	8026828 <_malloc_r+0xa8>
 8026850:	4623      	mov	r3, r4
 8026852:	6864      	ldr	r4, [r4, #4]
 8026854:	e7ae      	b.n	80267b4 <_malloc_r+0x34>
 8026856:	463c      	mov	r4, r7
 8026858:	687f      	ldr	r7, [r7, #4]
 802685a:	e7b6      	b.n	80267ca <_malloc_r+0x4a>
 802685c:	461a      	mov	r2, r3
 802685e:	685b      	ldr	r3, [r3, #4]
 8026860:	42a3      	cmp	r3, r4
 8026862:	d1fb      	bne.n	802685c <_malloc_r+0xdc>
 8026864:	2300      	movs	r3, #0
 8026866:	6053      	str	r3, [r2, #4]
 8026868:	e7de      	b.n	8026828 <_malloc_r+0xa8>
 802686a:	230c      	movs	r3, #12
 802686c:	6033      	str	r3, [r6, #0]
 802686e:	4630      	mov	r0, r6
 8026870:	f000 fa46 	bl	8026d00 <__malloc_unlock>
 8026874:	e794      	b.n	80267a0 <_malloc_r+0x20>
 8026876:	6005      	str	r5, [r0, #0]
 8026878:	e7d6      	b.n	8026828 <_malloc_r+0xa8>
 802687a:	bf00      	nop
 802687c:	200006a8 	.word	0x200006a8

08026880 <_printf_common>:
 8026880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026884:	4616      	mov	r6, r2
 8026886:	4698      	mov	r8, r3
 8026888:	688a      	ldr	r2, [r1, #8]
 802688a:	690b      	ldr	r3, [r1, #16]
 802688c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026890:	4293      	cmp	r3, r2
 8026892:	bfb8      	it	lt
 8026894:	4613      	movlt	r3, r2
 8026896:	6033      	str	r3, [r6, #0]
 8026898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802689c:	4607      	mov	r7, r0
 802689e:	460c      	mov	r4, r1
 80268a0:	b10a      	cbz	r2, 80268a6 <_printf_common+0x26>
 80268a2:	3301      	adds	r3, #1
 80268a4:	6033      	str	r3, [r6, #0]
 80268a6:	6823      	ldr	r3, [r4, #0]
 80268a8:	0699      	lsls	r1, r3, #26
 80268aa:	bf42      	ittt	mi
 80268ac:	6833      	ldrmi	r3, [r6, #0]
 80268ae:	3302      	addmi	r3, #2
 80268b0:	6033      	strmi	r3, [r6, #0]
 80268b2:	6825      	ldr	r5, [r4, #0]
 80268b4:	f015 0506 	ands.w	r5, r5, #6
 80268b8:	d106      	bne.n	80268c8 <_printf_common+0x48>
 80268ba:	f104 0a19 	add.w	sl, r4, #25
 80268be:	68e3      	ldr	r3, [r4, #12]
 80268c0:	6832      	ldr	r2, [r6, #0]
 80268c2:	1a9b      	subs	r3, r3, r2
 80268c4:	42ab      	cmp	r3, r5
 80268c6:	dc26      	bgt.n	8026916 <_printf_common+0x96>
 80268c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80268cc:	6822      	ldr	r2, [r4, #0]
 80268ce:	3b00      	subs	r3, #0
 80268d0:	bf18      	it	ne
 80268d2:	2301      	movne	r3, #1
 80268d4:	0692      	lsls	r2, r2, #26
 80268d6:	d42b      	bmi.n	8026930 <_printf_common+0xb0>
 80268d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80268dc:	4641      	mov	r1, r8
 80268de:	4638      	mov	r0, r7
 80268e0:	47c8      	blx	r9
 80268e2:	3001      	adds	r0, #1
 80268e4:	d01e      	beq.n	8026924 <_printf_common+0xa4>
 80268e6:	6823      	ldr	r3, [r4, #0]
 80268e8:	6922      	ldr	r2, [r4, #16]
 80268ea:	f003 0306 	and.w	r3, r3, #6
 80268ee:	2b04      	cmp	r3, #4
 80268f0:	bf02      	ittt	eq
 80268f2:	68e5      	ldreq	r5, [r4, #12]
 80268f4:	6833      	ldreq	r3, [r6, #0]
 80268f6:	1aed      	subeq	r5, r5, r3
 80268f8:	68a3      	ldr	r3, [r4, #8]
 80268fa:	bf0c      	ite	eq
 80268fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026900:	2500      	movne	r5, #0
 8026902:	4293      	cmp	r3, r2
 8026904:	bfc4      	itt	gt
 8026906:	1a9b      	subgt	r3, r3, r2
 8026908:	18ed      	addgt	r5, r5, r3
 802690a:	2600      	movs	r6, #0
 802690c:	341a      	adds	r4, #26
 802690e:	42b5      	cmp	r5, r6
 8026910:	d11a      	bne.n	8026948 <_printf_common+0xc8>
 8026912:	2000      	movs	r0, #0
 8026914:	e008      	b.n	8026928 <_printf_common+0xa8>
 8026916:	2301      	movs	r3, #1
 8026918:	4652      	mov	r2, sl
 802691a:	4641      	mov	r1, r8
 802691c:	4638      	mov	r0, r7
 802691e:	47c8      	blx	r9
 8026920:	3001      	adds	r0, #1
 8026922:	d103      	bne.n	802692c <_printf_common+0xac>
 8026924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802692c:	3501      	adds	r5, #1
 802692e:	e7c6      	b.n	80268be <_printf_common+0x3e>
 8026930:	18e1      	adds	r1, r4, r3
 8026932:	1c5a      	adds	r2, r3, #1
 8026934:	2030      	movs	r0, #48	@ 0x30
 8026936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802693a:	4422      	add	r2, r4
 802693c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026944:	3302      	adds	r3, #2
 8026946:	e7c7      	b.n	80268d8 <_printf_common+0x58>
 8026948:	2301      	movs	r3, #1
 802694a:	4622      	mov	r2, r4
 802694c:	4641      	mov	r1, r8
 802694e:	4638      	mov	r0, r7
 8026950:	47c8      	blx	r9
 8026952:	3001      	adds	r0, #1
 8026954:	d0e6      	beq.n	8026924 <_printf_common+0xa4>
 8026956:	3601      	adds	r6, #1
 8026958:	e7d9      	b.n	802690e <_printf_common+0x8e>
	...

0802695c <_printf_i>:
 802695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026960:	7e0f      	ldrb	r7, [r1, #24]
 8026962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026964:	2f78      	cmp	r7, #120	@ 0x78
 8026966:	4691      	mov	r9, r2
 8026968:	4680      	mov	r8, r0
 802696a:	460c      	mov	r4, r1
 802696c:	469a      	mov	sl, r3
 802696e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8026972:	d807      	bhi.n	8026984 <_printf_i+0x28>
 8026974:	2f62      	cmp	r7, #98	@ 0x62
 8026976:	d80a      	bhi.n	802698e <_printf_i+0x32>
 8026978:	2f00      	cmp	r7, #0
 802697a:	f000 80d2 	beq.w	8026b22 <_printf_i+0x1c6>
 802697e:	2f58      	cmp	r7, #88	@ 0x58
 8026980:	f000 80b9 	beq.w	8026af6 <_printf_i+0x19a>
 8026984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802698c:	e03a      	b.n	8026a04 <_printf_i+0xa8>
 802698e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8026992:	2b15      	cmp	r3, #21
 8026994:	d8f6      	bhi.n	8026984 <_printf_i+0x28>
 8026996:	a101      	add	r1, pc, #4	@ (adr r1, 802699c <_printf_i+0x40>)
 8026998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802699c:	080269f5 	.word	0x080269f5
 80269a0:	08026a09 	.word	0x08026a09
 80269a4:	08026985 	.word	0x08026985
 80269a8:	08026985 	.word	0x08026985
 80269ac:	08026985 	.word	0x08026985
 80269b0:	08026985 	.word	0x08026985
 80269b4:	08026a09 	.word	0x08026a09
 80269b8:	08026985 	.word	0x08026985
 80269bc:	08026985 	.word	0x08026985
 80269c0:	08026985 	.word	0x08026985
 80269c4:	08026985 	.word	0x08026985
 80269c8:	08026b09 	.word	0x08026b09
 80269cc:	08026a33 	.word	0x08026a33
 80269d0:	08026ac3 	.word	0x08026ac3
 80269d4:	08026985 	.word	0x08026985
 80269d8:	08026985 	.word	0x08026985
 80269dc:	08026b2b 	.word	0x08026b2b
 80269e0:	08026985 	.word	0x08026985
 80269e4:	08026a33 	.word	0x08026a33
 80269e8:	08026985 	.word	0x08026985
 80269ec:	08026985 	.word	0x08026985
 80269f0:	08026acb 	.word	0x08026acb
 80269f4:	6833      	ldr	r3, [r6, #0]
 80269f6:	1d1a      	adds	r2, r3, #4
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	6032      	str	r2, [r6, #0]
 80269fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8026a04:	2301      	movs	r3, #1
 8026a06:	e09d      	b.n	8026b44 <_printf_i+0x1e8>
 8026a08:	6833      	ldr	r3, [r6, #0]
 8026a0a:	6820      	ldr	r0, [r4, #0]
 8026a0c:	1d19      	adds	r1, r3, #4
 8026a0e:	6031      	str	r1, [r6, #0]
 8026a10:	0606      	lsls	r6, r0, #24
 8026a12:	d501      	bpl.n	8026a18 <_printf_i+0xbc>
 8026a14:	681d      	ldr	r5, [r3, #0]
 8026a16:	e003      	b.n	8026a20 <_printf_i+0xc4>
 8026a18:	0645      	lsls	r5, r0, #25
 8026a1a:	d5fb      	bpl.n	8026a14 <_printf_i+0xb8>
 8026a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026a20:	2d00      	cmp	r5, #0
 8026a22:	da03      	bge.n	8026a2c <_printf_i+0xd0>
 8026a24:	232d      	movs	r3, #45	@ 0x2d
 8026a26:	426d      	negs	r5, r5
 8026a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026a2c:	4859      	ldr	r0, [pc, #356]	@ (8026b94 <_printf_i+0x238>)
 8026a2e:	230a      	movs	r3, #10
 8026a30:	e011      	b.n	8026a56 <_printf_i+0xfa>
 8026a32:	6821      	ldr	r1, [r4, #0]
 8026a34:	6833      	ldr	r3, [r6, #0]
 8026a36:	0608      	lsls	r0, r1, #24
 8026a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8026a3c:	d402      	bmi.n	8026a44 <_printf_i+0xe8>
 8026a3e:	0649      	lsls	r1, r1, #25
 8026a40:	bf48      	it	mi
 8026a42:	b2ad      	uxthmi	r5, r5
 8026a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8026a46:	4853      	ldr	r0, [pc, #332]	@ (8026b94 <_printf_i+0x238>)
 8026a48:	6033      	str	r3, [r6, #0]
 8026a4a:	bf14      	ite	ne
 8026a4c:	230a      	movne	r3, #10
 8026a4e:	2308      	moveq	r3, #8
 8026a50:	2100      	movs	r1, #0
 8026a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026a56:	6866      	ldr	r6, [r4, #4]
 8026a58:	60a6      	str	r6, [r4, #8]
 8026a5a:	2e00      	cmp	r6, #0
 8026a5c:	bfa2      	ittt	ge
 8026a5e:	6821      	ldrge	r1, [r4, #0]
 8026a60:	f021 0104 	bicge.w	r1, r1, #4
 8026a64:	6021      	strge	r1, [r4, #0]
 8026a66:	b90d      	cbnz	r5, 8026a6c <_printf_i+0x110>
 8026a68:	2e00      	cmp	r6, #0
 8026a6a:	d04b      	beq.n	8026b04 <_printf_i+0x1a8>
 8026a6c:	4616      	mov	r6, r2
 8026a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8026a72:	fb03 5711 	mls	r7, r3, r1, r5
 8026a76:	5dc7      	ldrb	r7, [r0, r7]
 8026a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026a7c:	462f      	mov	r7, r5
 8026a7e:	42bb      	cmp	r3, r7
 8026a80:	460d      	mov	r5, r1
 8026a82:	d9f4      	bls.n	8026a6e <_printf_i+0x112>
 8026a84:	2b08      	cmp	r3, #8
 8026a86:	d10b      	bne.n	8026aa0 <_printf_i+0x144>
 8026a88:	6823      	ldr	r3, [r4, #0]
 8026a8a:	07df      	lsls	r7, r3, #31
 8026a8c:	d508      	bpl.n	8026aa0 <_printf_i+0x144>
 8026a8e:	6923      	ldr	r3, [r4, #16]
 8026a90:	6861      	ldr	r1, [r4, #4]
 8026a92:	4299      	cmp	r1, r3
 8026a94:	bfde      	ittt	le
 8026a96:	2330      	movle	r3, #48	@ 0x30
 8026a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026a9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8026aa0:	1b92      	subs	r2, r2, r6
 8026aa2:	6122      	str	r2, [r4, #16]
 8026aa4:	f8cd a000 	str.w	sl, [sp]
 8026aa8:	464b      	mov	r3, r9
 8026aaa:	aa03      	add	r2, sp, #12
 8026aac:	4621      	mov	r1, r4
 8026aae:	4640      	mov	r0, r8
 8026ab0:	f7ff fee6 	bl	8026880 <_printf_common>
 8026ab4:	3001      	adds	r0, #1
 8026ab6:	d14a      	bne.n	8026b4e <_printf_i+0x1f2>
 8026ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026abc:	b004      	add	sp, #16
 8026abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ac2:	6823      	ldr	r3, [r4, #0]
 8026ac4:	f043 0320 	orr.w	r3, r3, #32
 8026ac8:	6023      	str	r3, [r4, #0]
 8026aca:	4833      	ldr	r0, [pc, #204]	@ (8026b98 <_printf_i+0x23c>)
 8026acc:	2778      	movs	r7, #120	@ 0x78
 8026ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8026ad2:	6823      	ldr	r3, [r4, #0]
 8026ad4:	6831      	ldr	r1, [r6, #0]
 8026ad6:	061f      	lsls	r7, r3, #24
 8026ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8026adc:	d402      	bmi.n	8026ae4 <_printf_i+0x188>
 8026ade:	065f      	lsls	r7, r3, #25
 8026ae0:	bf48      	it	mi
 8026ae2:	b2ad      	uxthmi	r5, r5
 8026ae4:	6031      	str	r1, [r6, #0]
 8026ae6:	07d9      	lsls	r1, r3, #31
 8026ae8:	bf44      	itt	mi
 8026aea:	f043 0320 	orrmi.w	r3, r3, #32
 8026aee:	6023      	strmi	r3, [r4, #0]
 8026af0:	b11d      	cbz	r5, 8026afa <_printf_i+0x19e>
 8026af2:	2310      	movs	r3, #16
 8026af4:	e7ac      	b.n	8026a50 <_printf_i+0xf4>
 8026af6:	4827      	ldr	r0, [pc, #156]	@ (8026b94 <_printf_i+0x238>)
 8026af8:	e7e9      	b.n	8026ace <_printf_i+0x172>
 8026afa:	6823      	ldr	r3, [r4, #0]
 8026afc:	f023 0320 	bic.w	r3, r3, #32
 8026b00:	6023      	str	r3, [r4, #0]
 8026b02:	e7f6      	b.n	8026af2 <_printf_i+0x196>
 8026b04:	4616      	mov	r6, r2
 8026b06:	e7bd      	b.n	8026a84 <_printf_i+0x128>
 8026b08:	6833      	ldr	r3, [r6, #0]
 8026b0a:	6825      	ldr	r5, [r4, #0]
 8026b0c:	6961      	ldr	r1, [r4, #20]
 8026b0e:	1d18      	adds	r0, r3, #4
 8026b10:	6030      	str	r0, [r6, #0]
 8026b12:	062e      	lsls	r6, r5, #24
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	d501      	bpl.n	8026b1c <_printf_i+0x1c0>
 8026b18:	6019      	str	r1, [r3, #0]
 8026b1a:	e002      	b.n	8026b22 <_printf_i+0x1c6>
 8026b1c:	0668      	lsls	r0, r5, #25
 8026b1e:	d5fb      	bpl.n	8026b18 <_printf_i+0x1bc>
 8026b20:	8019      	strh	r1, [r3, #0]
 8026b22:	2300      	movs	r3, #0
 8026b24:	6123      	str	r3, [r4, #16]
 8026b26:	4616      	mov	r6, r2
 8026b28:	e7bc      	b.n	8026aa4 <_printf_i+0x148>
 8026b2a:	6833      	ldr	r3, [r6, #0]
 8026b2c:	1d1a      	adds	r2, r3, #4
 8026b2e:	6032      	str	r2, [r6, #0]
 8026b30:	681e      	ldr	r6, [r3, #0]
 8026b32:	6862      	ldr	r2, [r4, #4]
 8026b34:	2100      	movs	r1, #0
 8026b36:	4630      	mov	r0, r6
 8026b38:	f7f9 fa8a 	bl	8020050 <memchr>
 8026b3c:	b108      	cbz	r0, 8026b42 <_printf_i+0x1e6>
 8026b3e:	1b80      	subs	r0, r0, r6
 8026b40:	6060      	str	r0, [r4, #4]
 8026b42:	6863      	ldr	r3, [r4, #4]
 8026b44:	6123      	str	r3, [r4, #16]
 8026b46:	2300      	movs	r3, #0
 8026b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026b4c:	e7aa      	b.n	8026aa4 <_printf_i+0x148>
 8026b4e:	6923      	ldr	r3, [r4, #16]
 8026b50:	4632      	mov	r2, r6
 8026b52:	4649      	mov	r1, r9
 8026b54:	4640      	mov	r0, r8
 8026b56:	47d0      	blx	sl
 8026b58:	3001      	adds	r0, #1
 8026b5a:	d0ad      	beq.n	8026ab8 <_printf_i+0x15c>
 8026b5c:	6823      	ldr	r3, [r4, #0]
 8026b5e:	079b      	lsls	r3, r3, #30
 8026b60:	d413      	bmi.n	8026b8a <_printf_i+0x22e>
 8026b62:	68e0      	ldr	r0, [r4, #12]
 8026b64:	9b03      	ldr	r3, [sp, #12]
 8026b66:	4298      	cmp	r0, r3
 8026b68:	bfb8      	it	lt
 8026b6a:	4618      	movlt	r0, r3
 8026b6c:	e7a6      	b.n	8026abc <_printf_i+0x160>
 8026b6e:	2301      	movs	r3, #1
 8026b70:	4632      	mov	r2, r6
 8026b72:	4649      	mov	r1, r9
 8026b74:	4640      	mov	r0, r8
 8026b76:	47d0      	blx	sl
 8026b78:	3001      	adds	r0, #1
 8026b7a:	d09d      	beq.n	8026ab8 <_printf_i+0x15c>
 8026b7c:	3501      	adds	r5, #1
 8026b7e:	68e3      	ldr	r3, [r4, #12]
 8026b80:	9903      	ldr	r1, [sp, #12]
 8026b82:	1a5b      	subs	r3, r3, r1
 8026b84:	42ab      	cmp	r3, r5
 8026b86:	dcf2      	bgt.n	8026b6e <_printf_i+0x212>
 8026b88:	e7eb      	b.n	8026b62 <_printf_i+0x206>
 8026b8a:	2500      	movs	r5, #0
 8026b8c:	f104 0619 	add.w	r6, r4, #25
 8026b90:	e7f5      	b.n	8026b7e <_printf_i+0x222>
 8026b92:	bf00      	nop
 8026b94:	080271e9 	.word	0x080271e9
 8026b98:	080271fa 	.word	0x080271fa

08026b9c <__sflush_r>:
 8026b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026ba4:	0716      	lsls	r6, r2, #28
 8026ba6:	4605      	mov	r5, r0
 8026ba8:	460c      	mov	r4, r1
 8026baa:	d454      	bmi.n	8026c56 <__sflush_r+0xba>
 8026bac:	684b      	ldr	r3, [r1, #4]
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	dc02      	bgt.n	8026bb8 <__sflush_r+0x1c>
 8026bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	dd48      	ble.n	8026c4a <__sflush_r+0xae>
 8026bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026bba:	2e00      	cmp	r6, #0
 8026bbc:	d045      	beq.n	8026c4a <__sflush_r+0xae>
 8026bbe:	2300      	movs	r3, #0
 8026bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026bc4:	682f      	ldr	r7, [r5, #0]
 8026bc6:	6a21      	ldr	r1, [r4, #32]
 8026bc8:	602b      	str	r3, [r5, #0]
 8026bca:	d030      	beq.n	8026c2e <__sflush_r+0x92>
 8026bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026bce:	89a3      	ldrh	r3, [r4, #12]
 8026bd0:	0759      	lsls	r1, r3, #29
 8026bd2:	d505      	bpl.n	8026be0 <__sflush_r+0x44>
 8026bd4:	6863      	ldr	r3, [r4, #4]
 8026bd6:	1ad2      	subs	r2, r2, r3
 8026bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026bda:	b10b      	cbz	r3, 8026be0 <__sflush_r+0x44>
 8026bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026bde:	1ad2      	subs	r2, r2, r3
 8026be0:	2300      	movs	r3, #0
 8026be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026be4:	6a21      	ldr	r1, [r4, #32]
 8026be6:	4628      	mov	r0, r5
 8026be8:	47b0      	blx	r6
 8026bea:	1c43      	adds	r3, r0, #1
 8026bec:	89a3      	ldrh	r3, [r4, #12]
 8026bee:	d106      	bne.n	8026bfe <__sflush_r+0x62>
 8026bf0:	6829      	ldr	r1, [r5, #0]
 8026bf2:	291d      	cmp	r1, #29
 8026bf4:	d82b      	bhi.n	8026c4e <__sflush_r+0xb2>
 8026bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8026ca0 <__sflush_r+0x104>)
 8026bf8:	410a      	asrs	r2, r1
 8026bfa:	07d6      	lsls	r6, r2, #31
 8026bfc:	d427      	bmi.n	8026c4e <__sflush_r+0xb2>
 8026bfe:	2200      	movs	r2, #0
 8026c00:	6062      	str	r2, [r4, #4]
 8026c02:	04d9      	lsls	r1, r3, #19
 8026c04:	6922      	ldr	r2, [r4, #16]
 8026c06:	6022      	str	r2, [r4, #0]
 8026c08:	d504      	bpl.n	8026c14 <__sflush_r+0x78>
 8026c0a:	1c42      	adds	r2, r0, #1
 8026c0c:	d101      	bne.n	8026c12 <__sflush_r+0x76>
 8026c0e:	682b      	ldr	r3, [r5, #0]
 8026c10:	b903      	cbnz	r3, 8026c14 <__sflush_r+0x78>
 8026c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8026c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026c16:	602f      	str	r7, [r5, #0]
 8026c18:	b1b9      	cbz	r1, 8026c4a <__sflush_r+0xae>
 8026c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026c1e:	4299      	cmp	r1, r3
 8026c20:	d002      	beq.n	8026c28 <__sflush_r+0x8c>
 8026c22:	4628      	mov	r0, r5
 8026c24:	f000 fa24 	bl	8027070 <_free_r>
 8026c28:	2300      	movs	r3, #0
 8026c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8026c2c:	e00d      	b.n	8026c4a <__sflush_r+0xae>
 8026c2e:	2301      	movs	r3, #1
 8026c30:	4628      	mov	r0, r5
 8026c32:	47b0      	blx	r6
 8026c34:	4602      	mov	r2, r0
 8026c36:	1c50      	adds	r0, r2, #1
 8026c38:	d1c9      	bne.n	8026bce <__sflush_r+0x32>
 8026c3a:	682b      	ldr	r3, [r5, #0]
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	d0c6      	beq.n	8026bce <__sflush_r+0x32>
 8026c40:	2b1d      	cmp	r3, #29
 8026c42:	d001      	beq.n	8026c48 <__sflush_r+0xac>
 8026c44:	2b16      	cmp	r3, #22
 8026c46:	d11e      	bne.n	8026c86 <__sflush_r+0xea>
 8026c48:	602f      	str	r7, [r5, #0]
 8026c4a:	2000      	movs	r0, #0
 8026c4c:	e022      	b.n	8026c94 <__sflush_r+0xf8>
 8026c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026c52:	b21b      	sxth	r3, r3
 8026c54:	e01b      	b.n	8026c8e <__sflush_r+0xf2>
 8026c56:	690f      	ldr	r7, [r1, #16]
 8026c58:	2f00      	cmp	r7, #0
 8026c5a:	d0f6      	beq.n	8026c4a <__sflush_r+0xae>
 8026c5c:	0793      	lsls	r3, r2, #30
 8026c5e:	680e      	ldr	r6, [r1, #0]
 8026c60:	bf08      	it	eq
 8026c62:	694b      	ldreq	r3, [r1, #20]
 8026c64:	600f      	str	r7, [r1, #0]
 8026c66:	bf18      	it	ne
 8026c68:	2300      	movne	r3, #0
 8026c6a:	eba6 0807 	sub.w	r8, r6, r7
 8026c6e:	608b      	str	r3, [r1, #8]
 8026c70:	f1b8 0f00 	cmp.w	r8, #0
 8026c74:	dde9      	ble.n	8026c4a <__sflush_r+0xae>
 8026c76:	6a21      	ldr	r1, [r4, #32]
 8026c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026c7a:	4643      	mov	r3, r8
 8026c7c:	463a      	mov	r2, r7
 8026c7e:	4628      	mov	r0, r5
 8026c80:	47b0      	blx	r6
 8026c82:	2800      	cmp	r0, #0
 8026c84:	dc08      	bgt.n	8026c98 <__sflush_r+0xfc>
 8026c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026c8e:	81a3      	strh	r3, [r4, #12]
 8026c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026c98:	4407      	add	r7, r0
 8026c9a:	eba8 0800 	sub.w	r8, r8, r0
 8026c9e:	e7e7      	b.n	8026c70 <__sflush_r+0xd4>
 8026ca0:	dfbffffe 	.word	0xdfbffffe

08026ca4 <_fflush_r>:
 8026ca4:	b538      	push	{r3, r4, r5, lr}
 8026ca6:	690b      	ldr	r3, [r1, #16]
 8026ca8:	4605      	mov	r5, r0
 8026caa:	460c      	mov	r4, r1
 8026cac:	b913      	cbnz	r3, 8026cb4 <_fflush_r+0x10>
 8026cae:	2500      	movs	r5, #0
 8026cb0:	4628      	mov	r0, r5
 8026cb2:	bd38      	pop	{r3, r4, r5, pc}
 8026cb4:	b118      	cbz	r0, 8026cbe <_fflush_r+0x1a>
 8026cb6:	6a03      	ldr	r3, [r0, #32]
 8026cb8:	b90b      	cbnz	r3, 8026cbe <_fflush_r+0x1a>
 8026cba:	f7ff fb81 	bl	80263c0 <__sinit>
 8026cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026cc2:	2b00      	cmp	r3, #0
 8026cc4:	d0f3      	beq.n	8026cae <_fflush_r+0xa>
 8026cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026cc8:	07d0      	lsls	r0, r2, #31
 8026cca:	d404      	bmi.n	8026cd6 <_fflush_r+0x32>
 8026ccc:	0599      	lsls	r1, r3, #22
 8026cce:	d402      	bmi.n	8026cd6 <_fflush_r+0x32>
 8026cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026cd2:	f7ff fbf0 	bl	80264b6 <__retarget_lock_acquire_recursive>
 8026cd6:	4628      	mov	r0, r5
 8026cd8:	4621      	mov	r1, r4
 8026cda:	f7ff ff5f 	bl	8026b9c <__sflush_r>
 8026cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026ce0:	07da      	lsls	r2, r3, #31
 8026ce2:	4605      	mov	r5, r0
 8026ce4:	d4e4      	bmi.n	8026cb0 <_fflush_r+0xc>
 8026ce6:	89a3      	ldrh	r3, [r4, #12]
 8026ce8:	059b      	lsls	r3, r3, #22
 8026cea:	d4e1      	bmi.n	8026cb0 <_fflush_r+0xc>
 8026cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026cee:	f7ff fbe3 	bl	80264b8 <__retarget_lock_release_recursive>
 8026cf2:	e7dd      	b.n	8026cb0 <_fflush_r+0xc>

08026cf4 <__malloc_lock>:
 8026cf4:	4801      	ldr	r0, [pc, #4]	@ (8026cfc <__malloc_lock+0x8>)
 8026cf6:	f7ff bbde 	b.w	80264b6 <__retarget_lock_acquire_recursive>
 8026cfa:	bf00      	nop
 8026cfc:	200006a0 	.word	0x200006a0

08026d00 <__malloc_unlock>:
 8026d00:	4801      	ldr	r0, [pc, #4]	@ (8026d08 <__malloc_unlock+0x8>)
 8026d02:	f7ff bbd9 	b.w	80264b8 <__retarget_lock_release_recursive>
 8026d06:	bf00      	nop
 8026d08:	200006a0 	.word	0x200006a0

08026d0c <__sread>:
 8026d0c:	b510      	push	{r4, lr}
 8026d0e:	460c      	mov	r4, r1
 8026d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d14:	f000 f978 	bl	8027008 <_read_r>
 8026d18:	2800      	cmp	r0, #0
 8026d1a:	bfab      	itete	ge
 8026d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8026d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8026d20:	181b      	addge	r3, r3, r0
 8026d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8026d26:	bfac      	ite	ge
 8026d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8026d2a:	81a3      	strhlt	r3, [r4, #12]
 8026d2c:	bd10      	pop	{r4, pc}

08026d2e <__swrite>:
 8026d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d32:	461f      	mov	r7, r3
 8026d34:	898b      	ldrh	r3, [r1, #12]
 8026d36:	05db      	lsls	r3, r3, #23
 8026d38:	4605      	mov	r5, r0
 8026d3a:	460c      	mov	r4, r1
 8026d3c:	4616      	mov	r6, r2
 8026d3e:	d505      	bpl.n	8026d4c <__swrite+0x1e>
 8026d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d44:	2302      	movs	r3, #2
 8026d46:	2200      	movs	r2, #0
 8026d48:	f000 f94c 	bl	8026fe4 <_lseek_r>
 8026d4c:	89a3      	ldrh	r3, [r4, #12]
 8026d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026d56:	81a3      	strh	r3, [r4, #12]
 8026d58:	4632      	mov	r2, r6
 8026d5a:	463b      	mov	r3, r7
 8026d5c:	4628      	mov	r0, r5
 8026d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026d62:	f000 b973 	b.w	802704c <_write_r>

08026d66 <__sseek>:
 8026d66:	b510      	push	{r4, lr}
 8026d68:	460c      	mov	r4, r1
 8026d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d6e:	f000 f939 	bl	8026fe4 <_lseek_r>
 8026d72:	1c43      	adds	r3, r0, #1
 8026d74:	89a3      	ldrh	r3, [r4, #12]
 8026d76:	bf15      	itete	ne
 8026d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8026d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8026d82:	81a3      	strheq	r3, [r4, #12]
 8026d84:	bf18      	it	ne
 8026d86:	81a3      	strhne	r3, [r4, #12]
 8026d88:	bd10      	pop	{r4, pc}

08026d8a <__sclose>:
 8026d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d8e:	f000 b8f7 	b.w	8026f80 <_close_r>

08026d92 <__swbuf_r>:
 8026d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d94:	460e      	mov	r6, r1
 8026d96:	4614      	mov	r4, r2
 8026d98:	4605      	mov	r5, r0
 8026d9a:	b118      	cbz	r0, 8026da4 <__swbuf_r+0x12>
 8026d9c:	6a03      	ldr	r3, [r0, #32]
 8026d9e:	b90b      	cbnz	r3, 8026da4 <__swbuf_r+0x12>
 8026da0:	f7ff fb0e 	bl	80263c0 <__sinit>
 8026da4:	69a3      	ldr	r3, [r4, #24]
 8026da6:	60a3      	str	r3, [r4, #8]
 8026da8:	89a3      	ldrh	r3, [r4, #12]
 8026daa:	071a      	lsls	r2, r3, #28
 8026dac:	d501      	bpl.n	8026db2 <__swbuf_r+0x20>
 8026dae:	6923      	ldr	r3, [r4, #16]
 8026db0:	b943      	cbnz	r3, 8026dc4 <__swbuf_r+0x32>
 8026db2:	4621      	mov	r1, r4
 8026db4:	4628      	mov	r0, r5
 8026db6:	f000 f82b 	bl	8026e10 <__swsetup_r>
 8026dba:	b118      	cbz	r0, 8026dc4 <__swbuf_r+0x32>
 8026dbc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026dc0:	4638      	mov	r0, r7
 8026dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026dc4:	6823      	ldr	r3, [r4, #0]
 8026dc6:	6922      	ldr	r2, [r4, #16]
 8026dc8:	1a98      	subs	r0, r3, r2
 8026dca:	6963      	ldr	r3, [r4, #20]
 8026dcc:	b2f6      	uxtb	r6, r6
 8026dce:	4283      	cmp	r3, r0
 8026dd0:	4637      	mov	r7, r6
 8026dd2:	dc05      	bgt.n	8026de0 <__swbuf_r+0x4e>
 8026dd4:	4621      	mov	r1, r4
 8026dd6:	4628      	mov	r0, r5
 8026dd8:	f7ff ff64 	bl	8026ca4 <_fflush_r>
 8026ddc:	2800      	cmp	r0, #0
 8026dde:	d1ed      	bne.n	8026dbc <__swbuf_r+0x2a>
 8026de0:	68a3      	ldr	r3, [r4, #8]
 8026de2:	3b01      	subs	r3, #1
 8026de4:	60a3      	str	r3, [r4, #8]
 8026de6:	6823      	ldr	r3, [r4, #0]
 8026de8:	1c5a      	adds	r2, r3, #1
 8026dea:	6022      	str	r2, [r4, #0]
 8026dec:	701e      	strb	r6, [r3, #0]
 8026dee:	6962      	ldr	r2, [r4, #20]
 8026df0:	1c43      	adds	r3, r0, #1
 8026df2:	429a      	cmp	r2, r3
 8026df4:	d004      	beq.n	8026e00 <__swbuf_r+0x6e>
 8026df6:	89a3      	ldrh	r3, [r4, #12]
 8026df8:	07db      	lsls	r3, r3, #31
 8026dfa:	d5e1      	bpl.n	8026dc0 <__swbuf_r+0x2e>
 8026dfc:	2e0a      	cmp	r6, #10
 8026dfe:	d1df      	bne.n	8026dc0 <__swbuf_r+0x2e>
 8026e00:	4621      	mov	r1, r4
 8026e02:	4628      	mov	r0, r5
 8026e04:	f7ff ff4e 	bl	8026ca4 <_fflush_r>
 8026e08:	2800      	cmp	r0, #0
 8026e0a:	d0d9      	beq.n	8026dc0 <__swbuf_r+0x2e>
 8026e0c:	e7d6      	b.n	8026dbc <__swbuf_r+0x2a>
	...

08026e10 <__swsetup_r>:
 8026e10:	b538      	push	{r3, r4, r5, lr}
 8026e12:	4b29      	ldr	r3, [pc, #164]	@ (8026eb8 <__swsetup_r+0xa8>)
 8026e14:	4605      	mov	r5, r0
 8026e16:	6818      	ldr	r0, [r3, #0]
 8026e18:	460c      	mov	r4, r1
 8026e1a:	b118      	cbz	r0, 8026e24 <__swsetup_r+0x14>
 8026e1c:	6a03      	ldr	r3, [r0, #32]
 8026e1e:	b90b      	cbnz	r3, 8026e24 <__swsetup_r+0x14>
 8026e20:	f7ff face 	bl	80263c0 <__sinit>
 8026e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e28:	0719      	lsls	r1, r3, #28
 8026e2a:	d422      	bmi.n	8026e72 <__swsetup_r+0x62>
 8026e2c:	06da      	lsls	r2, r3, #27
 8026e2e:	d407      	bmi.n	8026e40 <__swsetup_r+0x30>
 8026e30:	2209      	movs	r2, #9
 8026e32:	602a      	str	r2, [r5, #0]
 8026e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026e38:	81a3      	strh	r3, [r4, #12]
 8026e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026e3e:	e033      	b.n	8026ea8 <__swsetup_r+0x98>
 8026e40:	0758      	lsls	r0, r3, #29
 8026e42:	d512      	bpl.n	8026e6a <__swsetup_r+0x5a>
 8026e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e46:	b141      	cbz	r1, 8026e5a <__swsetup_r+0x4a>
 8026e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026e4c:	4299      	cmp	r1, r3
 8026e4e:	d002      	beq.n	8026e56 <__swsetup_r+0x46>
 8026e50:	4628      	mov	r0, r5
 8026e52:	f000 f90d 	bl	8027070 <_free_r>
 8026e56:	2300      	movs	r3, #0
 8026e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8026e5a:	89a3      	ldrh	r3, [r4, #12]
 8026e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026e60:	81a3      	strh	r3, [r4, #12]
 8026e62:	2300      	movs	r3, #0
 8026e64:	6063      	str	r3, [r4, #4]
 8026e66:	6923      	ldr	r3, [r4, #16]
 8026e68:	6023      	str	r3, [r4, #0]
 8026e6a:	89a3      	ldrh	r3, [r4, #12]
 8026e6c:	f043 0308 	orr.w	r3, r3, #8
 8026e70:	81a3      	strh	r3, [r4, #12]
 8026e72:	6923      	ldr	r3, [r4, #16]
 8026e74:	b94b      	cbnz	r3, 8026e8a <__swsetup_r+0x7a>
 8026e76:	89a3      	ldrh	r3, [r4, #12]
 8026e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026e80:	d003      	beq.n	8026e8a <__swsetup_r+0x7a>
 8026e82:	4621      	mov	r1, r4
 8026e84:	4628      	mov	r0, r5
 8026e86:	f000 f83f 	bl	8026f08 <__smakebuf_r>
 8026e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e8e:	f013 0201 	ands.w	r2, r3, #1
 8026e92:	d00a      	beq.n	8026eaa <__swsetup_r+0x9a>
 8026e94:	2200      	movs	r2, #0
 8026e96:	60a2      	str	r2, [r4, #8]
 8026e98:	6962      	ldr	r2, [r4, #20]
 8026e9a:	4252      	negs	r2, r2
 8026e9c:	61a2      	str	r2, [r4, #24]
 8026e9e:	6922      	ldr	r2, [r4, #16]
 8026ea0:	b942      	cbnz	r2, 8026eb4 <__swsetup_r+0xa4>
 8026ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026ea6:	d1c5      	bne.n	8026e34 <__swsetup_r+0x24>
 8026ea8:	bd38      	pop	{r3, r4, r5, pc}
 8026eaa:	0799      	lsls	r1, r3, #30
 8026eac:	bf58      	it	pl
 8026eae:	6962      	ldrpl	r2, [r4, #20]
 8026eb0:	60a2      	str	r2, [r4, #8]
 8026eb2:	e7f4      	b.n	8026e9e <__swsetup_r+0x8e>
 8026eb4:	2000      	movs	r0, #0
 8026eb6:	e7f7      	b.n	8026ea8 <__swsetup_r+0x98>
 8026eb8:	20000018 	.word	0x20000018

08026ebc <__swhatbuf_r>:
 8026ebc:	b570      	push	{r4, r5, r6, lr}
 8026ebe:	460c      	mov	r4, r1
 8026ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026ec4:	2900      	cmp	r1, #0
 8026ec6:	b096      	sub	sp, #88	@ 0x58
 8026ec8:	4615      	mov	r5, r2
 8026eca:	461e      	mov	r6, r3
 8026ecc:	da0d      	bge.n	8026eea <__swhatbuf_r+0x2e>
 8026ece:	89a3      	ldrh	r3, [r4, #12]
 8026ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026ed4:	f04f 0100 	mov.w	r1, #0
 8026ed8:	bf14      	ite	ne
 8026eda:	2340      	movne	r3, #64	@ 0x40
 8026edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026ee0:	2000      	movs	r0, #0
 8026ee2:	6031      	str	r1, [r6, #0]
 8026ee4:	602b      	str	r3, [r5, #0]
 8026ee6:	b016      	add	sp, #88	@ 0x58
 8026ee8:	bd70      	pop	{r4, r5, r6, pc}
 8026eea:	466a      	mov	r2, sp
 8026eec:	f000 f858 	bl	8026fa0 <_fstat_r>
 8026ef0:	2800      	cmp	r0, #0
 8026ef2:	dbec      	blt.n	8026ece <__swhatbuf_r+0x12>
 8026ef4:	9901      	ldr	r1, [sp, #4]
 8026ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026efe:	4259      	negs	r1, r3
 8026f00:	4159      	adcs	r1, r3
 8026f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026f06:	e7eb      	b.n	8026ee0 <__swhatbuf_r+0x24>

08026f08 <__smakebuf_r>:
 8026f08:	898b      	ldrh	r3, [r1, #12]
 8026f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f0c:	079d      	lsls	r5, r3, #30
 8026f0e:	4606      	mov	r6, r0
 8026f10:	460c      	mov	r4, r1
 8026f12:	d507      	bpl.n	8026f24 <__smakebuf_r+0x1c>
 8026f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026f18:	6023      	str	r3, [r4, #0]
 8026f1a:	6123      	str	r3, [r4, #16]
 8026f1c:	2301      	movs	r3, #1
 8026f1e:	6163      	str	r3, [r4, #20]
 8026f20:	b003      	add	sp, #12
 8026f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f24:	ab01      	add	r3, sp, #4
 8026f26:	466a      	mov	r2, sp
 8026f28:	f7ff ffc8 	bl	8026ebc <__swhatbuf_r>
 8026f2c:	9f00      	ldr	r7, [sp, #0]
 8026f2e:	4605      	mov	r5, r0
 8026f30:	4639      	mov	r1, r7
 8026f32:	4630      	mov	r0, r6
 8026f34:	f7ff fc24 	bl	8026780 <_malloc_r>
 8026f38:	b948      	cbnz	r0, 8026f4e <__smakebuf_r+0x46>
 8026f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026f3e:	059a      	lsls	r2, r3, #22
 8026f40:	d4ee      	bmi.n	8026f20 <__smakebuf_r+0x18>
 8026f42:	f023 0303 	bic.w	r3, r3, #3
 8026f46:	f043 0302 	orr.w	r3, r3, #2
 8026f4a:	81a3      	strh	r3, [r4, #12]
 8026f4c:	e7e2      	b.n	8026f14 <__smakebuf_r+0xc>
 8026f4e:	89a3      	ldrh	r3, [r4, #12]
 8026f50:	6020      	str	r0, [r4, #0]
 8026f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026f56:	81a3      	strh	r3, [r4, #12]
 8026f58:	9b01      	ldr	r3, [sp, #4]
 8026f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026f5e:	b15b      	cbz	r3, 8026f78 <__smakebuf_r+0x70>
 8026f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026f64:	4630      	mov	r0, r6
 8026f66:	f000 f82d 	bl	8026fc4 <_isatty_r>
 8026f6a:	b128      	cbz	r0, 8026f78 <__smakebuf_r+0x70>
 8026f6c:	89a3      	ldrh	r3, [r4, #12]
 8026f6e:	f023 0303 	bic.w	r3, r3, #3
 8026f72:	f043 0301 	orr.w	r3, r3, #1
 8026f76:	81a3      	strh	r3, [r4, #12]
 8026f78:	89a3      	ldrh	r3, [r4, #12]
 8026f7a:	431d      	orrs	r5, r3
 8026f7c:	81a5      	strh	r5, [r4, #12]
 8026f7e:	e7cf      	b.n	8026f20 <__smakebuf_r+0x18>

08026f80 <_close_r>:
 8026f80:	b538      	push	{r3, r4, r5, lr}
 8026f82:	4d06      	ldr	r5, [pc, #24]	@ (8026f9c <_close_r+0x1c>)
 8026f84:	2300      	movs	r3, #0
 8026f86:	4604      	mov	r4, r0
 8026f88:	4608      	mov	r0, r1
 8026f8a:	602b      	str	r3, [r5, #0]
 8026f8c:	f7fa fbb1 	bl	80216f2 <_close>
 8026f90:	1c43      	adds	r3, r0, #1
 8026f92:	d102      	bne.n	8026f9a <_close_r+0x1a>
 8026f94:	682b      	ldr	r3, [r5, #0]
 8026f96:	b103      	cbz	r3, 8026f9a <_close_r+0x1a>
 8026f98:	6023      	str	r3, [r4, #0]
 8026f9a:	bd38      	pop	{r3, r4, r5, pc}
 8026f9c:	200006ac 	.word	0x200006ac

08026fa0 <_fstat_r>:
 8026fa0:	b538      	push	{r3, r4, r5, lr}
 8026fa2:	4d07      	ldr	r5, [pc, #28]	@ (8026fc0 <_fstat_r+0x20>)
 8026fa4:	2300      	movs	r3, #0
 8026fa6:	4604      	mov	r4, r0
 8026fa8:	4608      	mov	r0, r1
 8026faa:	4611      	mov	r1, r2
 8026fac:	602b      	str	r3, [r5, #0]
 8026fae:	f7fa fbac 	bl	802170a <_fstat>
 8026fb2:	1c43      	adds	r3, r0, #1
 8026fb4:	d102      	bne.n	8026fbc <_fstat_r+0x1c>
 8026fb6:	682b      	ldr	r3, [r5, #0]
 8026fb8:	b103      	cbz	r3, 8026fbc <_fstat_r+0x1c>
 8026fba:	6023      	str	r3, [r4, #0]
 8026fbc:	bd38      	pop	{r3, r4, r5, pc}
 8026fbe:	bf00      	nop
 8026fc0:	200006ac 	.word	0x200006ac

08026fc4 <_isatty_r>:
 8026fc4:	b538      	push	{r3, r4, r5, lr}
 8026fc6:	4d06      	ldr	r5, [pc, #24]	@ (8026fe0 <_isatty_r+0x1c>)
 8026fc8:	2300      	movs	r3, #0
 8026fca:	4604      	mov	r4, r0
 8026fcc:	4608      	mov	r0, r1
 8026fce:	602b      	str	r3, [r5, #0]
 8026fd0:	f7fa fbab 	bl	802172a <_isatty>
 8026fd4:	1c43      	adds	r3, r0, #1
 8026fd6:	d102      	bne.n	8026fde <_isatty_r+0x1a>
 8026fd8:	682b      	ldr	r3, [r5, #0]
 8026fda:	b103      	cbz	r3, 8026fde <_isatty_r+0x1a>
 8026fdc:	6023      	str	r3, [r4, #0]
 8026fde:	bd38      	pop	{r3, r4, r5, pc}
 8026fe0:	200006ac 	.word	0x200006ac

08026fe4 <_lseek_r>:
 8026fe4:	b538      	push	{r3, r4, r5, lr}
 8026fe6:	4d07      	ldr	r5, [pc, #28]	@ (8027004 <_lseek_r+0x20>)
 8026fe8:	4604      	mov	r4, r0
 8026fea:	4608      	mov	r0, r1
 8026fec:	4611      	mov	r1, r2
 8026fee:	2200      	movs	r2, #0
 8026ff0:	602a      	str	r2, [r5, #0]
 8026ff2:	461a      	mov	r2, r3
 8026ff4:	f7fa fba4 	bl	8021740 <_lseek>
 8026ff8:	1c43      	adds	r3, r0, #1
 8026ffa:	d102      	bne.n	8027002 <_lseek_r+0x1e>
 8026ffc:	682b      	ldr	r3, [r5, #0]
 8026ffe:	b103      	cbz	r3, 8027002 <_lseek_r+0x1e>
 8027000:	6023      	str	r3, [r4, #0]
 8027002:	bd38      	pop	{r3, r4, r5, pc}
 8027004:	200006ac 	.word	0x200006ac

08027008 <_read_r>:
 8027008:	b538      	push	{r3, r4, r5, lr}
 802700a:	4d07      	ldr	r5, [pc, #28]	@ (8027028 <_read_r+0x20>)
 802700c:	4604      	mov	r4, r0
 802700e:	4608      	mov	r0, r1
 8027010:	4611      	mov	r1, r2
 8027012:	2200      	movs	r2, #0
 8027014:	602a      	str	r2, [r5, #0]
 8027016:	461a      	mov	r2, r3
 8027018:	f7fa fb32 	bl	8021680 <_read>
 802701c:	1c43      	adds	r3, r0, #1
 802701e:	d102      	bne.n	8027026 <_read_r+0x1e>
 8027020:	682b      	ldr	r3, [r5, #0]
 8027022:	b103      	cbz	r3, 8027026 <_read_r+0x1e>
 8027024:	6023      	str	r3, [r4, #0]
 8027026:	bd38      	pop	{r3, r4, r5, pc}
 8027028:	200006ac 	.word	0x200006ac

0802702c <_sbrk_r>:
 802702c:	b538      	push	{r3, r4, r5, lr}
 802702e:	4d06      	ldr	r5, [pc, #24]	@ (8027048 <_sbrk_r+0x1c>)
 8027030:	2300      	movs	r3, #0
 8027032:	4604      	mov	r4, r0
 8027034:	4608      	mov	r0, r1
 8027036:	602b      	str	r3, [r5, #0]
 8027038:	f7fa fb90 	bl	802175c <_sbrk>
 802703c:	1c43      	adds	r3, r0, #1
 802703e:	d102      	bne.n	8027046 <_sbrk_r+0x1a>
 8027040:	682b      	ldr	r3, [r5, #0]
 8027042:	b103      	cbz	r3, 8027046 <_sbrk_r+0x1a>
 8027044:	6023      	str	r3, [r4, #0]
 8027046:	bd38      	pop	{r3, r4, r5, pc}
 8027048:	200006ac 	.word	0x200006ac

0802704c <_write_r>:
 802704c:	b538      	push	{r3, r4, r5, lr}
 802704e:	4d07      	ldr	r5, [pc, #28]	@ (802706c <_write_r+0x20>)
 8027050:	4604      	mov	r4, r0
 8027052:	4608      	mov	r0, r1
 8027054:	4611      	mov	r1, r2
 8027056:	2200      	movs	r2, #0
 8027058:	602a      	str	r2, [r5, #0]
 802705a:	461a      	mov	r2, r3
 802705c:	f7fa fb2d 	bl	80216ba <_write>
 8027060:	1c43      	adds	r3, r0, #1
 8027062:	d102      	bne.n	802706a <_write_r+0x1e>
 8027064:	682b      	ldr	r3, [r5, #0]
 8027066:	b103      	cbz	r3, 802706a <_write_r+0x1e>
 8027068:	6023      	str	r3, [r4, #0]
 802706a:	bd38      	pop	{r3, r4, r5, pc}
 802706c:	200006ac 	.word	0x200006ac

08027070 <_free_r>:
 8027070:	b538      	push	{r3, r4, r5, lr}
 8027072:	4605      	mov	r5, r0
 8027074:	2900      	cmp	r1, #0
 8027076:	d041      	beq.n	80270fc <_free_r+0x8c>
 8027078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802707c:	1f0c      	subs	r4, r1, #4
 802707e:	2b00      	cmp	r3, #0
 8027080:	bfb8      	it	lt
 8027082:	18e4      	addlt	r4, r4, r3
 8027084:	f7ff fe36 	bl	8026cf4 <__malloc_lock>
 8027088:	4a1d      	ldr	r2, [pc, #116]	@ (8027100 <_free_r+0x90>)
 802708a:	6813      	ldr	r3, [r2, #0]
 802708c:	b933      	cbnz	r3, 802709c <_free_r+0x2c>
 802708e:	6063      	str	r3, [r4, #4]
 8027090:	6014      	str	r4, [r2, #0]
 8027092:	4628      	mov	r0, r5
 8027094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027098:	f7ff be32 	b.w	8026d00 <__malloc_unlock>
 802709c:	42a3      	cmp	r3, r4
 802709e:	d908      	bls.n	80270b2 <_free_r+0x42>
 80270a0:	6820      	ldr	r0, [r4, #0]
 80270a2:	1821      	adds	r1, r4, r0
 80270a4:	428b      	cmp	r3, r1
 80270a6:	bf01      	itttt	eq
 80270a8:	6819      	ldreq	r1, [r3, #0]
 80270aa:	685b      	ldreq	r3, [r3, #4]
 80270ac:	1809      	addeq	r1, r1, r0
 80270ae:	6021      	streq	r1, [r4, #0]
 80270b0:	e7ed      	b.n	802708e <_free_r+0x1e>
 80270b2:	461a      	mov	r2, r3
 80270b4:	685b      	ldr	r3, [r3, #4]
 80270b6:	b10b      	cbz	r3, 80270bc <_free_r+0x4c>
 80270b8:	42a3      	cmp	r3, r4
 80270ba:	d9fa      	bls.n	80270b2 <_free_r+0x42>
 80270bc:	6811      	ldr	r1, [r2, #0]
 80270be:	1850      	adds	r0, r2, r1
 80270c0:	42a0      	cmp	r0, r4
 80270c2:	d10b      	bne.n	80270dc <_free_r+0x6c>
 80270c4:	6820      	ldr	r0, [r4, #0]
 80270c6:	4401      	add	r1, r0
 80270c8:	1850      	adds	r0, r2, r1
 80270ca:	4283      	cmp	r3, r0
 80270cc:	6011      	str	r1, [r2, #0]
 80270ce:	d1e0      	bne.n	8027092 <_free_r+0x22>
 80270d0:	6818      	ldr	r0, [r3, #0]
 80270d2:	685b      	ldr	r3, [r3, #4]
 80270d4:	6053      	str	r3, [r2, #4]
 80270d6:	4408      	add	r0, r1
 80270d8:	6010      	str	r0, [r2, #0]
 80270da:	e7da      	b.n	8027092 <_free_r+0x22>
 80270dc:	d902      	bls.n	80270e4 <_free_r+0x74>
 80270de:	230c      	movs	r3, #12
 80270e0:	602b      	str	r3, [r5, #0]
 80270e2:	e7d6      	b.n	8027092 <_free_r+0x22>
 80270e4:	6820      	ldr	r0, [r4, #0]
 80270e6:	1821      	adds	r1, r4, r0
 80270e8:	428b      	cmp	r3, r1
 80270ea:	bf04      	itt	eq
 80270ec:	6819      	ldreq	r1, [r3, #0]
 80270ee:	685b      	ldreq	r3, [r3, #4]
 80270f0:	6063      	str	r3, [r4, #4]
 80270f2:	bf04      	itt	eq
 80270f4:	1809      	addeq	r1, r1, r0
 80270f6:	6021      	streq	r1, [r4, #0]
 80270f8:	6054      	str	r4, [r2, #4]
 80270fa:	e7ca      	b.n	8027092 <_free_r+0x22>
 80270fc:	bd38      	pop	{r3, r4, r5, pc}
 80270fe:	bf00      	nop
 8027100:	200006a8 	.word	0x200006a8

08027104 <_init>:
 8027104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027106:	bf00      	nop
 8027108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802710a:	bc08      	pop	{r3}
 802710c:	469e      	mov	lr, r3
 802710e:	4770      	bx	lr

08027110 <_fini>:
 8027110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027112:	bf00      	nop
 8027114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027116:	bc08      	pop	{r3}
 8027118:	469e      	mov	lr, r3
 802711a:	4770      	bx	lr

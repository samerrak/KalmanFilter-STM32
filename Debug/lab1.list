
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114bc  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080214bc  080214bc  000214bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021524  08021524  0002200c  2**0
                  CONTENTS
  4 .ARM          00000000  08021524  08021524  0002200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08021524  08021524  0002200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021524  08021524  00021524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021528  08021528  00021528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0802152c  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08021538  0002200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08021538  0002202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002200c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000056ac  00000000  00000000  0002203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007d  00000000  00000000  000276e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000044b2  00000000  00000000  00027765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000fa9  00000000  00000000  0002bc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005e8  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f96e8  00000000  00000000  0002d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000043e  00000000  00000000  00126890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028cdc  00000000  00000000  00126cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f9aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015cc  00000000  00000000  0014f9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	2000000c 	.word	0x2000000c
 801001c:	00000000 	.word	0x00000000
 8010020:	080214a4 	.word	0x080214a4

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000010 	.word	0x20000010
 801003c:	080214a4 	.word	0x080214a4
	...

08020000 <kalman>:



kalman:

	VSTMDB SP!, {s1-s6} // push temperory variables to the stack
 8020000:	ed6d 0a06 	vpush	{s1-s6}
	VLDR.f32 s1, [r0] //load q into first available floating register s1
 8020004:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 s2, [r0, #4] //load r into floating register s2
 8020008:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.f32 s3, [r0, #8] //load x into floating register s3
 802000c:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.f32 s4, [r0, #12] //load p into floating register s4
 8020010:	ed90 2a03 	vldr	s4, [r0, #12]
	// we don't need to load k since it is changed but need to store it at [r0+16]


	VADD.f32 s4, s4, s1 // self.p = self.p + self.q
 8020014:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.f32 s1, s4, s2 // since q is not need we store (self.p + self.r here)
 8020018:	ee72 0a01 	vadd.f32	s1, s4, s2
	VDIV.f32 s1, s4, s1 // since the interm value is not needed k is stored in s1
 802001c:	eec2 0a20 	vdiv.f32	s1, s4, s1


	VSUB.f32 s5, s0, s3 // measurement - self.x
 8020020:	ee70 2a61 	vsub.f32	s5, s0, s3
	VMUL.f32 s5, s5, s1 // k is in s1 in line 13 so we do k(measurement - self.x)
 8020024:	ee62 2aa0 	vmul.f32	s5, s5, s1
	VADD.f32 s3, s3, s5 // self.x + k(measurement - self.x)
 8020028:	ee71 1aa2 	vadd.f32	s3, s3, s5


	VMOV.f32 s6, #0x3F800000 // move 1 into a temp variable
 802002c:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	VSUB.f32 s6, s6, s1 // (1 - k)
 8020030:	ee33 3a60 	vsub.f32	s6, s6, s1
	VMUL.f32 s4, s4, s6 // (1-k) * p
 8020034:	ee22 2a03 	vmul.f32	s4, s4, s6

	VSTR.f32 s4, [r0, #12] //store p into where it was loaded from
 8020038:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.f32 s1, [r0, #16] //store k into where it was loaded from
 802003c:	edc0 0a04 	vstr	s1, [r0, #16]
	VSTR.f32 s3, [r0, #8] //store x into where it was loaded from
 8020040:	edc0 1a02 	vstr	s3, [r0, #8]

	VLDMIA SP!, {s1-s6}
 8020044:	ecfd 0a06 	vpop	{s1-s6}

	BX LR
 8020048:	4770      	bx	lr
 802004a:	bf00      	nop

0802004c <KalmanfilterARM>:
	//convolution
		arm_conv_f32(InputArray1, Length, InputArray2, Length, ResultArray); //convolution
}


int KalmanfilterARM(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 802004c:	b580      	push	{r7, lr}
 802004e:	b086      	sub	sp, #24
 8020050:	af00      	add	r7, sp, #0
 8020052:	60f8      	str	r0, [r7, #12]
 8020054:	60b9      	str	r1, [r7, #8]
 8020056:	607a      	str	r2, [r7, #4]
 8020058:	603b      	str	r3, [r7, #0]
	for (int i=0; i<Length; i++) {
 802005a:	2300      	movs	r3, #0
 802005c:	617b      	str	r3, [r7, #20]
 802005e:	e01e      	b.n	802009e <KalmanfilterARM+0x52>
		if (isnan(kstate->x) > 0)
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	edd3 7a02 	vldr	s15, [r3, #8]
 8020066:	eef4 7a67 	vcmp.f32	s15, s15
 802006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802006e:	d701      	bvc.n	8020074 <KalmanfilterARM+0x28>
			return 1;
 8020070:	2301      	movs	r3, #1
 8020072:	e019      	b.n	80200a8 <KalmanfilterARM+0x5c>

		kalman(kstate, InputArray[i]); // change to kalman for .s function
 8020074:	697b      	ldr	r3, [r7, #20]
 8020076:	009b      	lsls	r3, r3, #2
 8020078:	68fa      	ldr	r2, [r7, #12]
 802007a:	4413      	add	r3, r2
 802007c:	edd3 7a00 	vldr	s15, [r3]
 8020080:	eeb0 0a67 	vmov.f32	s0, s15
 8020084:	6878      	ldr	r0, [r7, #4]
 8020086:	f7ff ffbb 	bl	8020000 <kalman>
		OutputArray[i]= kstate->x;
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	009b      	lsls	r3, r3, #2
 802008e:	68ba      	ldr	r2, [r7, #8]
 8020090:	4413      	add	r3, r2
 8020092:	687a      	ldr	r2, [r7, #4]
 8020094:	6892      	ldr	r2, [r2, #8]
 8020096:	601a      	str	r2, [r3, #0]
	for (int i=0; i<Length; i++) {
 8020098:	697b      	ldr	r3, [r7, #20]
 802009a:	3301      	adds	r3, #1
 802009c:	617b      	str	r3, [r7, #20]
 802009e:	697a      	ldr	r2, [r7, #20]
 80200a0:	683b      	ldr	r3, [r7, #0]
 80200a2:	429a      	cmp	r2, r3
 80200a4:	dbdc      	blt.n	8020060 <KalmanfilterARM+0x14>
	}

	return 0;
 80200a6:	2300      	movs	r3, #0
}
 80200a8:	4618      	mov	r0, r3
 80200aa:	3718      	adds	r7, #24
 80200ac:	46bd      	mov	sp, r7
 80200ae:	bd80      	pop	{r7, pc}

080200b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80200b0:	b5b0      	push	{r4, r5, r7, lr}
 80200b2:	b090      	sub	sp, #64	@ 0x40
 80200b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80200b6:	f000 f90a 	bl	80202ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80200ba:	f000 f821 	bl	8020100 <SystemClock_Config>

  // float updateC(kalman_state* kstate, float measurement)

  // int KalmanfilterC(float* InputArray, float* OutputArray, kalman_state* kstate, int Length)

  kalman_state ks = {0.1f, 0.1f, 5.0f, 0.1f, 0.0f};
 80200be:	4b0e      	ldr	r3, [pc, #56]	@ (80200f8 <main+0x48>)
 80200c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80200c4:	461d      	mov	r5, r3
 80200c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80200c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80200ca:	682b      	ldr	r3, [r5, #0]
 80200cc:	6023      	str	r3, [r4, #0]

  float InputArray[5] = {0.0f, 1.0f, 2.0f, 3.0f, 4.0f};
 80200ce:	4b0b      	ldr	r3, [pc, #44]	@ (80200fc <main+0x4c>)
 80200d0:	f107 0414 	add.w	r4, r7, #20
 80200d4:	461d      	mov	r5, r3
 80200d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80200d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80200da:	682b      	ldr	r3, [r5, #0]
 80200dc:	6023      	str	r3, [r4, #0]
  float OutputArray[5];
  int Length = 5;
 80200de:	2305      	movs	r3, #5
 80200e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  }

  */

  KalmanfilterARM(InputArray, OutputArray, &ks, Length);
 80200e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80200e6:	4639      	mov	r1, r7
 80200e8:	f107 0014 	add.w	r0, r7, #20
 80200ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200ee:	f7ff ffad 	bl	802004c <KalmanfilterARM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80200f2:	bf00      	nop
 80200f4:	e7fd      	b.n	80200f2 <main+0x42>
 80200f6:	bf00      	nop
 80200f8:	080214bc 	.word	0x080214bc
 80200fc:	080214d0 	.word	0x080214d0

08020100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020100:	b580      	push	{r7, lr}
 8020102:	b096      	sub	sp, #88	@ 0x58
 8020104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020106:	f107 0314 	add.w	r3, r7, #20
 802010a:	2244      	movs	r2, #68	@ 0x44
 802010c:	2100      	movs	r1, #0
 802010e:	4618      	mov	r0, r3
 8020110:	f001 f99c 	bl	802144c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020114:	463b      	mov	r3, r7
 8020116:	2200      	movs	r2, #0
 8020118:	601a      	str	r2, [r3, #0]
 802011a:	605a      	str	r2, [r3, #4]
 802011c:	609a      	str	r2, [r3, #8]
 802011e:	60da      	str	r2, [r3, #12]
 8020120:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8020122:	2000      	movs	r0, #0
 8020124:	f000 fa4e 	bl	80205c4 <HAL_PWREx_ControlVoltageScaling>
 8020128:	4603      	mov	r3, r0
 802012a:	2b00      	cmp	r3, #0
 802012c:	d001      	beq.n	8020132 <SystemClock_Config+0x32>
  {
    Error_Handler();
 802012e:	f000 f838 	bl	80201a2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8020132:	2310      	movs	r3, #16
 8020134:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020136:	2301      	movs	r3, #1
 8020138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 802013a:	2300      	movs	r3, #0
 802013c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 802013e:	2360      	movs	r3, #96	@ 0x60
 8020140:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020142:	2302      	movs	r3, #2
 8020144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8020146:	2301      	movs	r3, #1
 8020148:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802014a:	2301      	movs	r3, #1
 802014c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 802014e:	233c      	movs	r3, #60	@ 0x3c
 8020150:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020152:	2302      	movs	r3, #2
 8020154:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8020156:	2302      	movs	r3, #2
 8020158:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802015a:	2302      	movs	r3, #2
 802015c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802015e:	f107 0314 	add.w	r3, r7, #20
 8020162:	4618      	mov	r0, r3
 8020164:	f000 fad2 	bl	802070c <HAL_RCC_OscConfig>
 8020168:	4603      	mov	r3, r0
 802016a:	2b00      	cmp	r3, #0
 802016c:	d001      	beq.n	8020172 <SystemClock_Config+0x72>
  {
    Error_Handler();
 802016e:	f000 f818 	bl	80201a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020172:	230f      	movs	r3, #15
 8020174:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020176:	2303      	movs	r3, #3
 8020178:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802017a:	2300      	movs	r3, #0
 802017c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802017e:	2300      	movs	r3, #0
 8020180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020182:	2300      	movs	r3, #0
 8020184:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020186:	463b      	mov	r3, r7
 8020188:	2105      	movs	r1, #5
 802018a:	4618      	mov	r0, r3
 802018c:	f000 fed8 	bl	8020f40 <HAL_RCC_ClockConfig>
 8020190:	4603      	mov	r3, r0
 8020192:	2b00      	cmp	r3, #0
 8020194:	d001      	beq.n	802019a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020196:	f000 f804 	bl	80201a2 <Error_Handler>
  }
}
 802019a:	bf00      	nop
 802019c:	3758      	adds	r7, #88	@ 0x58
 802019e:	46bd      	mov	sp, r7
 80201a0:	bd80      	pop	{r7, pc}

080201a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80201a2:	b480      	push	{r7}
 80201a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80201a6:	b672      	cpsid	i
}
 80201a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80201aa:	bf00      	nop
 80201ac:	e7fd      	b.n	80201aa <Error_Handler+0x8>
	...

080201b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80201b0:	b480      	push	{r7}
 80201b2:	b083      	sub	sp, #12
 80201b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80201b6:	4b0f      	ldr	r3, [pc, #60]	@ (80201f4 <HAL_MspInit+0x44>)
 80201b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80201ba:	4a0e      	ldr	r2, [pc, #56]	@ (80201f4 <HAL_MspInit+0x44>)
 80201bc:	f043 0301 	orr.w	r3, r3, #1
 80201c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80201c2:	4b0c      	ldr	r3, [pc, #48]	@ (80201f4 <HAL_MspInit+0x44>)
 80201c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80201c6:	f003 0301 	and.w	r3, r3, #1
 80201ca:	607b      	str	r3, [r7, #4]
 80201cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80201ce:	4b09      	ldr	r3, [pc, #36]	@ (80201f4 <HAL_MspInit+0x44>)
 80201d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80201d2:	4a08      	ldr	r2, [pc, #32]	@ (80201f4 <HAL_MspInit+0x44>)
 80201d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80201d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80201da:	4b06      	ldr	r3, [pc, #24]	@ (80201f4 <HAL_MspInit+0x44>)
 80201dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80201de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80201e2:	603b      	str	r3, [r7, #0]
 80201e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80201e6:	bf00      	nop
 80201e8:	370c      	adds	r7, #12
 80201ea:	46bd      	mov	sp, r7
 80201ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201f0:	4770      	bx	lr
 80201f2:	bf00      	nop
 80201f4:	40021000 	.word	0x40021000

080201f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80201f8:	b480      	push	{r7}
 80201fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80201fc:	bf00      	nop
 80201fe:	e7fd      	b.n	80201fc <NMI_Handler+0x4>

08020200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020200:	b480      	push	{r7}
 8020202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020204:	bf00      	nop
 8020206:	e7fd      	b.n	8020204 <HardFault_Handler+0x4>

08020208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020208:	b480      	push	{r7}
 802020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802020c:	bf00      	nop
 802020e:	e7fd      	b.n	802020c <MemManage_Handler+0x4>

08020210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020210:	b480      	push	{r7}
 8020212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020214:	bf00      	nop
 8020216:	e7fd      	b.n	8020214 <BusFault_Handler+0x4>

08020218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020218:	b480      	push	{r7}
 802021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802021c:	bf00      	nop
 802021e:	e7fd      	b.n	802021c <UsageFault_Handler+0x4>

08020220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020220:	b480      	push	{r7}
 8020222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020224:	bf00      	nop
 8020226:	46bd      	mov	sp, r7
 8020228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022c:	4770      	bx	lr

0802022e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802022e:	b480      	push	{r7}
 8020230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020232:	bf00      	nop
 8020234:	46bd      	mov	sp, r7
 8020236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802023a:	4770      	bx	lr

0802023c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802023c:	b480      	push	{r7}
 802023e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020240:	bf00      	nop
 8020242:	46bd      	mov	sp, r7
 8020244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020248:	4770      	bx	lr

0802024a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802024a:	b580      	push	{r7, lr}
 802024c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802024e:	f000 f893 	bl	8020378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020252:	bf00      	nop
 8020254:	bd80      	pop	{r7, pc}
	...

08020258 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8020258:	b480      	push	{r7}
 802025a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 802025c:	4b06      	ldr	r3, [pc, #24]	@ (8020278 <SystemInit+0x20>)
 802025e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020262:	4a05      	ldr	r2, [pc, #20]	@ (8020278 <SystemInit+0x20>)
 8020264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 802026c:	bf00      	nop
 802026e:	46bd      	mov	sp, r7
 8020270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020274:	4770      	bx	lr
 8020276:	bf00      	nop
 8020278:	e000ed00 	.word	0xe000ed00

0802027c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 802027c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80202b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8020280:	f7ff ffea 	bl	8020258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020284:	480c      	ldr	r0, [pc, #48]	@ (80202b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8020286:	490d      	ldr	r1, [pc, #52]	@ (80202bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8020288:	4a0d      	ldr	r2, [pc, #52]	@ (80202c0 <LoopForever+0xe>)
  movs r3, #0
 802028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802028c:	e002      	b.n	8020294 <LoopCopyDataInit>

0802028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020292:	3304      	adds	r3, #4

08020294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020298:	d3f9      	bcc.n	802028e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802029a:	4a0a      	ldr	r2, [pc, #40]	@ (80202c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 802029c:	4c0a      	ldr	r4, [pc, #40]	@ (80202c8 <LoopForever+0x16>)
  movs r3, #0
 802029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80202a0:	e001      	b.n	80202a6 <LoopFillZerobss>

080202a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80202a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80202a4:	3204      	adds	r2, #4

080202a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80202a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80202a8:	d3fb      	bcc.n	80202a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80202aa:	f001 f8d7 	bl	802145c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80202ae:	f7ff feff 	bl	80200b0 <main>

080202b2 <LoopForever>:

LoopForever:
    b LoopForever
 80202b2:	e7fe      	b.n	80202b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80202b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80202b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80202bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80202c0:	0802152c 	.word	0x0802152c
  ldr r2, =_sbss
 80202c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80202c8:	2000002c 	.word	0x2000002c

080202cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80202cc:	e7fe      	b.n	80202cc <ADC1_IRQHandler>

080202ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80202ce:	b580      	push	{r7, lr}
 80202d0:	b082      	sub	sp, #8
 80202d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80202d4:	2300      	movs	r3, #0
 80202d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80202d8:	2003      	movs	r0, #3
 80202da:	f000 f91f 	bl	802051c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80202de:	2000      	movs	r0, #0
 80202e0:	f000 f80e 	bl	8020300 <HAL_InitTick>
 80202e4:	4603      	mov	r3, r0
 80202e6:	2b00      	cmp	r3, #0
 80202e8:	d002      	beq.n	80202f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80202ea:	2301      	movs	r3, #1
 80202ec:	71fb      	strb	r3, [r7, #7]
 80202ee:	e001      	b.n	80202f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80202f0:	f7ff ff5e 	bl	80201b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80202f4:	79fb      	ldrb	r3, [r7, #7]
}
 80202f6:	4618      	mov	r0, r3
 80202f8:	3708      	adds	r7, #8
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd80      	pop	{r7, pc}
	...

08020300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020300:	b580      	push	{r7, lr}
 8020302:	b084      	sub	sp, #16
 8020304:	af00      	add	r7, sp, #0
 8020306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020308:	2300      	movs	r3, #0
 802030a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 802030c:	4b17      	ldr	r3, [pc, #92]	@ (802036c <HAL_InitTick+0x6c>)
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	2b00      	cmp	r3, #0
 8020312:	d023      	beq.n	802035c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020314:	4b16      	ldr	r3, [pc, #88]	@ (8020370 <HAL_InitTick+0x70>)
 8020316:	681a      	ldr	r2, [r3, #0]
 8020318:	4b14      	ldr	r3, [pc, #80]	@ (802036c <HAL_InitTick+0x6c>)
 802031a:	781b      	ldrb	r3, [r3, #0]
 802031c:	4619      	mov	r1, r3
 802031e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020322:	fbb3 f3f1 	udiv	r3, r3, r1
 8020326:	fbb2 f3f3 	udiv	r3, r2, r3
 802032a:	4618      	mov	r0, r3
 802032c:	f000 f91d 	bl	802056a <HAL_SYSTICK_Config>
 8020330:	4603      	mov	r3, r0
 8020332:	2b00      	cmp	r3, #0
 8020334:	d10f      	bne.n	8020356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	2b0f      	cmp	r3, #15
 802033a:	d809      	bhi.n	8020350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802033c:	2200      	movs	r2, #0
 802033e:	6879      	ldr	r1, [r7, #4]
 8020340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020344:	f000 f8f5 	bl	8020532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020348:	4a0a      	ldr	r2, [pc, #40]	@ (8020374 <HAL_InitTick+0x74>)
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	6013      	str	r3, [r2, #0]
 802034e:	e007      	b.n	8020360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8020350:	2301      	movs	r3, #1
 8020352:	73fb      	strb	r3, [r7, #15]
 8020354:	e004      	b.n	8020360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020356:	2301      	movs	r3, #1
 8020358:	73fb      	strb	r3, [r7, #15]
 802035a:	e001      	b.n	8020360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 802035c:	2301      	movs	r3, #1
 802035e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020360:	7bfb      	ldrb	r3, [r7, #15]
}
 8020362:	4618      	mov	r0, r3
 8020364:	3710      	adds	r7, #16
 8020366:	46bd      	mov	sp, r7
 8020368:	bd80      	pop	{r7, pc}
 802036a:	bf00      	nop
 802036c:	20000008 	.word	0x20000008
 8020370:	20000000 	.word	0x20000000
 8020374:	20000004 	.word	0x20000004

08020378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020378:	b480      	push	{r7}
 802037a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802037c:	4b06      	ldr	r3, [pc, #24]	@ (8020398 <HAL_IncTick+0x20>)
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	461a      	mov	r2, r3
 8020382:	4b06      	ldr	r3, [pc, #24]	@ (802039c <HAL_IncTick+0x24>)
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	4413      	add	r3, r2
 8020388:	4a04      	ldr	r2, [pc, #16]	@ (802039c <HAL_IncTick+0x24>)
 802038a:	6013      	str	r3, [r2, #0]
}
 802038c:	bf00      	nop
 802038e:	46bd      	mov	sp, r7
 8020390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020394:	4770      	bx	lr
 8020396:	bf00      	nop
 8020398:	20000008 	.word	0x20000008
 802039c:	20000028 	.word	0x20000028

080203a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80203a0:	b480      	push	{r7}
 80203a2:	af00      	add	r7, sp, #0
  return uwTick;
 80203a4:	4b03      	ldr	r3, [pc, #12]	@ (80203b4 <HAL_GetTick+0x14>)
 80203a6:	681b      	ldr	r3, [r3, #0]
}
 80203a8:	4618      	mov	r0, r3
 80203aa:	46bd      	mov	sp, r7
 80203ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b0:	4770      	bx	lr
 80203b2:	bf00      	nop
 80203b4:	20000028 	.word	0x20000028

080203b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80203b8:	b480      	push	{r7}
 80203ba:	b085      	sub	sp, #20
 80203bc:	af00      	add	r7, sp, #0
 80203be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	f003 0307 	and.w	r3, r3, #7
 80203c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80203c8:	4b0c      	ldr	r3, [pc, #48]	@ (80203fc <__NVIC_SetPriorityGrouping+0x44>)
 80203ca:	68db      	ldr	r3, [r3, #12]
 80203cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80203ce:	68ba      	ldr	r2, [r7, #8]
 80203d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80203d4:	4013      	ands	r3, r2
 80203d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80203dc:	68bb      	ldr	r3, [r7, #8]
 80203de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80203e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80203e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80203e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80203ea:	4a04      	ldr	r2, [pc, #16]	@ (80203fc <__NVIC_SetPriorityGrouping+0x44>)
 80203ec:	68bb      	ldr	r3, [r7, #8]
 80203ee:	60d3      	str	r3, [r2, #12]
}
 80203f0:	bf00      	nop
 80203f2:	3714      	adds	r7, #20
 80203f4:	46bd      	mov	sp, r7
 80203f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fa:	4770      	bx	lr
 80203fc:	e000ed00 	.word	0xe000ed00

08020400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020400:	b480      	push	{r7}
 8020402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020404:	4b04      	ldr	r3, [pc, #16]	@ (8020418 <__NVIC_GetPriorityGrouping+0x18>)
 8020406:	68db      	ldr	r3, [r3, #12]
 8020408:	0a1b      	lsrs	r3, r3, #8
 802040a:	f003 0307 	and.w	r3, r3, #7
}
 802040e:	4618      	mov	r0, r3
 8020410:	46bd      	mov	sp, r7
 8020412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020416:	4770      	bx	lr
 8020418:	e000ed00 	.word	0xe000ed00

0802041c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802041c:	b480      	push	{r7}
 802041e:	b083      	sub	sp, #12
 8020420:	af00      	add	r7, sp, #0
 8020422:	4603      	mov	r3, r0
 8020424:	6039      	str	r1, [r7, #0]
 8020426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802042c:	2b00      	cmp	r3, #0
 802042e:	db0a      	blt.n	8020446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	b2da      	uxtb	r2, r3
 8020434:	490c      	ldr	r1, [pc, #48]	@ (8020468 <__NVIC_SetPriority+0x4c>)
 8020436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802043a:	0112      	lsls	r2, r2, #4
 802043c:	b2d2      	uxtb	r2, r2
 802043e:	440b      	add	r3, r1
 8020440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020444:	e00a      	b.n	802045c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020446:	683b      	ldr	r3, [r7, #0]
 8020448:	b2da      	uxtb	r2, r3
 802044a:	4908      	ldr	r1, [pc, #32]	@ (802046c <__NVIC_SetPriority+0x50>)
 802044c:	79fb      	ldrb	r3, [r7, #7]
 802044e:	f003 030f 	and.w	r3, r3, #15
 8020452:	3b04      	subs	r3, #4
 8020454:	0112      	lsls	r2, r2, #4
 8020456:	b2d2      	uxtb	r2, r2
 8020458:	440b      	add	r3, r1
 802045a:	761a      	strb	r2, [r3, #24]
}
 802045c:	bf00      	nop
 802045e:	370c      	adds	r7, #12
 8020460:	46bd      	mov	sp, r7
 8020462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020466:	4770      	bx	lr
 8020468:	e000e100 	.word	0xe000e100
 802046c:	e000ed00 	.word	0xe000ed00

08020470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020470:	b480      	push	{r7}
 8020472:	b089      	sub	sp, #36	@ 0x24
 8020474:	af00      	add	r7, sp, #0
 8020476:	60f8      	str	r0, [r7, #12]
 8020478:	60b9      	str	r1, [r7, #8]
 802047a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802047c:	68fb      	ldr	r3, [r7, #12]
 802047e:	f003 0307 	and.w	r3, r3, #7
 8020482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020484:	69fb      	ldr	r3, [r7, #28]
 8020486:	f1c3 0307 	rsb	r3, r3, #7
 802048a:	2b04      	cmp	r3, #4
 802048c:	bf28      	it	cs
 802048e:	2304      	movcs	r3, #4
 8020490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020492:	69fb      	ldr	r3, [r7, #28]
 8020494:	3304      	adds	r3, #4
 8020496:	2b06      	cmp	r3, #6
 8020498:	d902      	bls.n	80204a0 <NVIC_EncodePriority+0x30>
 802049a:	69fb      	ldr	r3, [r7, #28]
 802049c:	3b03      	subs	r3, #3
 802049e:	e000      	b.n	80204a2 <NVIC_EncodePriority+0x32>
 80204a0:	2300      	movs	r3, #0
 80204a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80204a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80204a8:	69bb      	ldr	r3, [r7, #24]
 80204aa:	fa02 f303 	lsl.w	r3, r2, r3
 80204ae:	43da      	mvns	r2, r3
 80204b0:	68bb      	ldr	r3, [r7, #8]
 80204b2:	401a      	ands	r2, r3
 80204b4:	697b      	ldr	r3, [r7, #20]
 80204b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80204b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80204bc:	697b      	ldr	r3, [r7, #20]
 80204be:	fa01 f303 	lsl.w	r3, r1, r3
 80204c2:	43d9      	mvns	r1, r3
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80204c8:	4313      	orrs	r3, r2
         );
}
 80204ca:	4618      	mov	r0, r3
 80204cc:	3724      	adds	r7, #36	@ 0x24
 80204ce:	46bd      	mov	sp, r7
 80204d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204d4:	4770      	bx	lr
	...

080204d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b082      	sub	sp, #8
 80204dc:	af00      	add	r7, sp, #0
 80204de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	3b01      	subs	r3, #1
 80204e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80204e8:	d301      	bcc.n	80204ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80204ea:	2301      	movs	r3, #1
 80204ec:	e00f      	b.n	802050e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80204ee:	4a0a      	ldr	r2, [pc, #40]	@ (8020518 <SysTick_Config+0x40>)
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	3b01      	subs	r3, #1
 80204f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80204f6:	210f      	movs	r1, #15
 80204f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80204fc:	f7ff ff8e 	bl	802041c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020500:	4b05      	ldr	r3, [pc, #20]	@ (8020518 <SysTick_Config+0x40>)
 8020502:	2200      	movs	r2, #0
 8020504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020506:	4b04      	ldr	r3, [pc, #16]	@ (8020518 <SysTick_Config+0x40>)
 8020508:	2207      	movs	r2, #7
 802050a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802050c:	2300      	movs	r3, #0
}
 802050e:	4618      	mov	r0, r3
 8020510:	3708      	adds	r7, #8
 8020512:	46bd      	mov	sp, r7
 8020514:	bd80      	pop	{r7, pc}
 8020516:	bf00      	nop
 8020518:	e000e010 	.word	0xe000e010

0802051c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802051c:	b580      	push	{r7, lr}
 802051e:	b082      	sub	sp, #8
 8020520:	af00      	add	r7, sp, #0
 8020522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020524:	6878      	ldr	r0, [r7, #4]
 8020526:	f7ff ff47 	bl	80203b8 <__NVIC_SetPriorityGrouping>
}
 802052a:	bf00      	nop
 802052c:	3708      	adds	r7, #8
 802052e:	46bd      	mov	sp, r7
 8020530:	bd80      	pop	{r7, pc}

08020532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020532:	b580      	push	{r7, lr}
 8020534:	b086      	sub	sp, #24
 8020536:	af00      	add	r7, sp, #0
 8020538:	4603      	mov	r3, r0
 802053a:	60b9      	str	r1, [r7, #8]
 802053c:	607a      	str	r2, [r7, #4]
 802053e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020540:	2300      	movs	r3, #0
 8020542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020544:	f7ff ff5c 	bl	8020400 <__NVIC_GetPriorityGrouping>
 8020548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802054a:	687a      	ldr	r2, [r7, #4]
 802054c:	68b9      	ldr	r1, [r7, #8]
 802054e:	6978      	ldr	r0, [r7, #20]
 8020550:	f7ff ff8e 	bl	8020470 <NVIC_EncodePriority>
 8020554:	4602      	mov	r2, r0
 8020556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802055a:	4611      	mov	r1, r2
 802055c:	4618      	mov	r0, r3
 802055e:	f7ff ff5d 	bl	802041c <__NVIC_SetPriority>
}
 8020562:	bf00      	nop
 8020564:	3718      	adds	r7, #24
 8020566:	46bd      	mov	sp, r7
 8020568:	bd80      	pop	{r7, pc}

0802056a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802056a:	b580      	push	{r7, lr}
 802056c:	b082      	sub	sp, #8
 802056e:	af00      	add	r7, sp, #0
 8020570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020572:	6878      	ldr	r0, [r7, #4]
 8020574:	f7ff ffb0 	bl	80204d8 <SysTick_Config>
 8020578:	4603      	mov	r3, r0
}
 802057a:	4618      	mov	r0, r3
 802057c:	3708      	adds	r7, #8
 802057e:	46bd      	mov	sp, r7
 8020580:	bd80      	pop	{r7, pc}
	...

08020584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8020584:	b480      	push	{r7}
 8020586:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8020588:	4b0d      	ldr	r3, [pc, #52]	@ (80205c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020594:	d102      	bne.n	802059c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8020596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802059a:	e00b      	b.n	80205b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 802059c:	4b08      	ldr	r3, [pc, #32]	@ (80205c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 802059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80205a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80205a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80205aa:	d102      	bne.n	80205b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80205ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80205b0:	e000      	b.n	80205b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80205b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80205b4:	4618      	mov	r0, r3
 80205b6:	46bd      	mov	sp, r7
 80205b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205bc:	4770      	bx	lr
 80205be:	bf00      	nop
 80205c0:	40007000 	.word	0x40007000

080205c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80205c4:	b480      	push	{r7}
 80205c6:	b085      	sub	sp, #20
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d141      	bne.n	8020656 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80205d2:	4b4b      	ldr	r3, [pc, #300]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80205da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80205de:	d131      	bne.n	8020644 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80205e0:	4b47      	ldr	r3, [pc, #284]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80205e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80205e6:	4a46      	ldr	r2, [pc, #280]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80205e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80205ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80205f0:	4b43      	ldr	r3, [pc, #268]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80205f8:	4a41      	ldr	r2, [pc, #260]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80205fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80205fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8020600:	4b40      	ldr	r3, [pc, #256]	@ (8020704 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	2232      	movs	r2, #50	@ 0x32
 8020606:	fb02 f303 	mul.w	r3, r2, r3
 802060a:	4a3f      	ldr	r2, [pc, #252]	@ (8020708 <HAL_PWREx_ControlVoltageScaling+0x144>)
 802060c:	fba2 2303 	umull	r2, r3, r2, r3
 8020610:	0c9b      	lsrs	r3, r3, #18
 8020612:	3301      	adds	r3, #1
 8020614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8020616:	e002      	b.n	802061e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	3b01      	subs	r3, #1
 802061c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 802061e:	4b38      	ldr	r3, [pc, #224]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020620:	695b      	ldr	r3, [r3, #20]
 8020622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802062a:	d102      	bne.n	8020632 <HAL_PWREx_ControlVoltageScaling+0x6e>
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	2b00      	cmp	r3, #0
 8020630:	d1f2      	bne.n	8020618 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8020632:	4b33      	ldr	r3, [pc, #204]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020634:	695b      	ldr	r3, [r3, #20]
 8020636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802063a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802063e:	d158      	bne.n	80206f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8020640:	2303      	movs	r3, #3
 8020642:	e057      	b.n	80206f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8020644:	4b2e      	ldr	r3, [pc, #184]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802064a:	4a2d      	ldr	r2, [pc, #180]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802064c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020650:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8020654:	e04d      	b.n	80206f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8020656:	687b      	ldr	r3, [r7, #4]
 8020658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802065c:	d141      	bne.n	80206e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 802065e:	4b28      	ldr	r3, [pc, #160]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020660:	681b      	ldr	r3, [r3, #0]
 8020662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802066a:	d131      	bne.n	80206d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 802066c:	4b24      	ldr	r3, [pc, #144]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802066e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020672:	4a23      	ldr	r2, [pc, #140]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 802067c:	4b20      	ldr	r3, [pc, #128]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020684:	4a1e      	ldr	r2, [pc, #120]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8020686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 802068a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 802068c:	4b1d      	ldr	r3, [pc, #116]	@ (8020704 <HAL_PWREx_ControlVoltageScaling+0x140>)
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	2232      	movs	r2, #50	@ 0x32
 8020692:	fb02 f303 	mul.w	r3, r2, r3
 8020696:	4a1c      	ldr	r2, [pc, #112]	@ (8020708 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8020698:	fba2 2303 	umull	r2, r3, r2, r3
 802069c:	0c9b      	lsrs	r3, r3, #18
 802069e:	3301      	adds	r3, #1
 80206a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80206a2:	e002      	b.n	80206aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	3b01      	subs	r3, #1
 80206a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80206aa:	4b15      	ldr	r3, [pc, #84]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206ac:	695b      	ldr	r3, [r3, #20]
 80206ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80206b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80206b6:	d102      	bne.n	80206be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d1f2      	bne.n	80206a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80206be:	4b10      	ldr	r3, [pc, #64]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206c0:	695b      	ldr	r3, [r3, #20]
 80206c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80206c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80206ca:	d112      	bne.n	80206f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80206cc:	2303      	movs	r3, #3
 80206ce:	e011      	b.n	80206f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80206d0:	4b0b      	ldr	r3, [pc, #44]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80206d6:	4a0a      	ldr	r2, [pc, #40]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80206dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80206e0:	e007      	b.n	80206f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80206e2:	4b07      	ldr	r3, [pc, #28]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206e4:	681b      	ldr	r3, [r3, #0]
 80206e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80206ea:	4a05      	ldr	r2, [pc, #20]	@ (8020700 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80206ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80206f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80206f2:	2300      	movs	r3, #0
}
 80206f4:	4618      	mov	r0, r3
 80206f6:	3714      	adds	r7, #20
 80206f8:	46bd      	mov	sp, r7
 80206fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206fe:	4770      	bx	lr
 8020700:	40007000 	.word	0x40007000
 8020704:	20000000 	.word	0x20000000
 8020708:	431bde83 	.word	0x431bde83

0802070c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802070c:	b580      	push	{r7, lr}
 802070e:	b088      	sub	sp, #32
 8020710:	af00      	add	r7, sp, #0
 8020712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	2b00      	cmp	r3, #0
 8020718:	d102      	bne.n	8020720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802071a:	2301      	movs	r3, #1
 802071c:	f000 bc08 	b.w	8020f30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020720:	4b96      	ldr	r3, [pc, #600]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020722:	689b      	ldr	r3, [r3, #8]
 8020724:	f003 030c 	and.w	r3, r3, #12
 8020728:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802072a:	4b94      	ldr	r3, [pc, #592]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 802072c:	68db      	ldr	r3, [r3, #12]
 802072e:	f003 0303 	and.w	r3, r3, #3
 8020732:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	f003 0310 	and.w	r3, r3, #16
 802073c:	2b00      	cmp	r3, #0
 802073e:	f000 80e4 	beq.w	802090a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8020742:	69bb      	ldr	r3, [r7, #24]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d007      	beq.n	8020758 <HAL_RCC_OscConfig+0x4c>
 8020748:	69bb      	ldr	r3, [r7, #24]
 802074a:	2b0c      	cmp	r3, #12
 802074c:	f040 808b 	bne.w	8020866 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	2b01      	cmp	r3, #1
 8020754:	f040 8087 	bne.w	8020866 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020758:	4b88      	ldr	r3, [pc, #544]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	f003 0302 	and.w	r3, r3, #2
 8020760:	2b00      	cmp	r3, #0
 8020762:	d005      	beq.n	8020770 <HAL_RCC_OscConfig+0x64>
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	699b      	ldr	r3, [r3, #24]
 8020768:	2b00      	cmp	r3, #0
 802076a:	d101      	bne.n	8020770 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 802076c:	2301      	movs	r3, #1
 802076e:	e3df      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	6a1a      	ldr	r2, [r3, #32]
 8020774:	4b81      	ldr	r3, [pc, #516]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	f003 0308 	and.w	r3, r3, #8
 802077c:	2b00      	cmp	r3, #0
 802077e:	d004      	beq.n	802078a <HAL_RCC_OscConfig+0x7e>
 8020780:	4b7e      	ldr	r3, [pc, #504]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020788:	e005      	b.n	8020796 <HAL_RCC_OscConfig+0x8a>
 802078a:	4b7c      	ldr	r3, [pc, #496]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 802078c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020790:	091b      	lsrs	r3, r3, #4
 8020792:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020796:	4293      	cmp	r3, r2
 8020798:	d223      	bcs.n	80207e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	6a1b      	ldr	r3, [r3, #32]
 802079e:	4618      	mov	r0, r3
 80207a0:	f000 fd94 	bl	80212cc <RCC_SetFlashLatencyFromMSIRange>
 80207a4:	4603      	mov	r3, r0
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d001      	beq.n	80207ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80207aa:	2301      	movs	r3, #1
 80207ac:	e3c0      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80207ae:	4b73      	ldr	r3, [pc, #460]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	4a72      	ldr	r2, [pc, #456]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207b4:	f043 0308 	orr.w	r3, r3, #8
 80207b8:	6013      	str	r3, [r2, #0]
 80207ba:	4b70      	ldr	r3, [pc, #448]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	6a1b      	ldr	r3, [r3, #32]
 80207c6:	496d      	ldr	r1, [pc, #436]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207c8:	4313      	orrs	r3, r2
 80207ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80207cc:	4b6b      	ldr	r3, [pc, #428]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207ce:	685b      	ldr	r3, [r3, #4]
 80207d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	69db      	ldr	r3, [r3, #28]
 80207d8:	021b      	lsls	r3, r3, #8
 80207da:	4968      	ldr	r1, [pc, #416]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207dc:	4313      	orrs	r3, r2
 80207de:	604b      	str	r3, [r1, #4]
 80207e0:	e025      	b.n	802082e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80207e2:	4b66      	ldr	r3, [pc, #408]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	4a65      	ldr	r2, [pc, #404]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207e8:	f043 0308 	orr.w	r3, r3, #8
 80207ec:	6013      	str	r3, [r2, #0]
 80207ee:	4b63      	ldr	r3, [pc, #396]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	6a1b      	ldr	r3, [r3, #32]
 80207fa:	4960      	ldr	r1, [pc, #384]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80207fc:	4313      	orrs	r3, r2
 80207fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8020800:	4b5e      	ldr	r3, [pc, #376]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020802:	685b      	ldr	r3, [r3, #4]
 8020804:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	69db      	ldr	r3, [r3, #28]
 802080c:	021b      	lsls	r3, r3, #8
 802080e:	495b      	ldr	r1, [pc, #364]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020810:	4313      	orrs	r3, r2
 8020812:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8020814:	69bb      	ldr	r3, [r7, #24]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d109      	bne.n	802082e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	6a1b      	ldr	r3, [r3, #32]
 802081e:	4618      	mov	r0, r3
 8020820:	f000 fd54 	bl	80212cc <RCC_SetFlashLatencyFromMSIRange>
 8020824:	4603      	mov	r3, r0
 8020826:	2b00      	cmp	r3, #0
 8020828:	d001      	beq.n	802082e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 802082a:	2301      	movs	r3, #1
 802082c:	e380      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 802082e:	f000 fcc1 	bl	80211b4 <HAL_RCC_GetSysClockFreq>
 8020832:	4602      	mov	r2, r0
 8020834:	4b51      	ldr	r3, [pc, #324]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020836:	689b      	ldr	r3, [r3, #8]
 8020838:	091b      	lsrs	r3, r3, #4
 802083a:	f003 030f 	and.w	r3, r3, #15
 802083e:	4950      	ldr	r1, [pc, #320]	@ (8020980 <HAL_RCC_OscConfig+0x274>)
 8020840:	5ccb      	ldrb	r3, [r1, r3]
 8020842:	f003 031f 	and.w	r3, r3, #31
 8020846:	fa22 f303 	lsr.w	r3, r2, r3
 802084a:	4a4e      	ldr	r2, [pc, #312]	@ (8020984 <HAL_RCC_OscConfig+0x278>)
 802084c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 802084e:	4b4e      	ldr	r3, [pc, #312]	@ (8020988 <HAL_RCC_OscConfig+0x27c>)
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	4618      	mov	r0, r3
 8020854:	f7ff fd54 	bl	8020300 <HAL_InitTick>
 8020858:	4603      	mov	r3, r0
 802085a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 802085c:	7bfb      	ldrb	r3, [r7, #15]
 802085e:	2b00      	cmp	r3, #0
 8020860:	d052      	beq.n	8020908 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8020862:	7bfb      	ldrb	r3, [r7, #15]
 8020864:	e364      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	699b      	ldr	r3, [r3, #24]
 802086a:	2b00      	cmp	r3, #0
 802086c:	d032      	beq.n	80208d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 802086e:	4b43      	ldr	r3, [pc, #268]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020870:	681b      	ldr	r3, [r3, #0]
 8020872:	4a42      	ldr	r2, [pc, #264]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020874:	f043 0301 	orr.w	r3, r3, #1
 8020878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 802087a:	f7ff fd91 	bl	80203a0 <HAL_GetTick>
 802087e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020880:	e008      	b.n	8020894 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8020882:	f7ff fd8d 	bl	80203a0 <HAL_GetTick>
 8020886:	4602      	mov	r2, r0
 8020888:	693b      	ldr	r3, [r7, #16]
 802088a:	1ad3      	subs	r3, r2, r3
 802088c:	2b02      	cmp	r3, #2
 802088e:	d901      	bls.n	8020894 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8020890:	2303      	movs	r3, #3
 8020892:	e34d      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8020894:	4b39      	ldr	r3, [pc, #228]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020896:	681b      	ldr	r3, [r3, #0]
 8020898:	f003 0302 	and.w	r3, r3, #2
 802089c:	2b00      	cmp	r3, #0
 802089e:	d0f0      	beq.n	8020882 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80208a0:	4b36      	ldr	r3, [pc, #216]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	4a35      	ldr	r2, [pc, #212]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208a6:	f043 0308 	orr.w	r3, r3, #8
 80208aa:	6013      	str	r3, [r2, #0]
 80208ac:	4b33      	ldr	r3, [pc, #204]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	6a1b      	ldr	r3, [r3, #32]
 80208b8:	4930      	ldr	r1, [pc, #192]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208ba:	4313      	orrs	r3, r2
 80208bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80208be:	4b2f      	ldr	r3, [pc, #188]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208c0:	685b      	ldr	r3, [r3, #4]
 80208c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	69db      	ldr	r3, [r3, #28]
 80208ca:	021b      	lsls	r3, r3, #8
 80208cc:	492b      	ldr	r1, [pc, #172]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208ce:	4313      	orrs	r3, r2
 80208d0:	604b      	str	r3, [r1, #4]
 80208d2:	e01a      	b.n	802090a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80208d4:	4b29      	ldr	r3, [pc, #164]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208d6:	681b      	ldr	r3, [r3, #0]
 80208d8:	4a28      	ldr	r2, [pc, #160]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208da:	f023 0301 	bic.w	r3, r3, #1
 80208de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80208e0:	f7ff fd5e 	bl	80203a0 <HAL_GetTick>
 80208e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80208e6:	e008      	b.n	80208fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80208e8:	f7ff fd5a 	bl	80203a0 <HAL_GetTick>
 80208ec:	4602      	mov	r2, r0
 80208ee:	693b      	ldr	r3, [r7, #16]
 80208f0:	1ad3      	subs	r3, r2, r3
 80208f2:	2b02      	cmp	r3, #2
 80208f4:	d901      	bls.n	80208fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80208f6:	2303      	movs	r3, #3
 80208f8:	e31a      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80208fa:	4b20      	ldr	r3, [pc, #128]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	f003 0302 	and.w	r3, r3, #2
 8020902:	2b00      	cmp	r3, #0
 8020904:	d1f0      	bne.n	80208e8 <HAL_RCC_OscConfig+0x1dc>
 8020906:	e000      	b.n	802090a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8020908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	681b      	ldr	r3, [r3, #0]
 802090e:	f003 0301 	and.w	r3, r3, #1
 8020912:	2b00      	cmp	r3, #0
 8020914:	d073      	beq.n	80209fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8020916:	69bb      	ldr	r3, [r7, #24]
 8020918:	2b08      	cmp	r3, #8
 802091a:	d005      	beq.n	8020928 <HAL_RCC_OscConfig+0x21c>
 802091c:	69bb      	ldr	r3, [r7, #24]
 802091e:	2b0c      	cmp	r3, #12
 8020920:	d10e      	bne.n	8020940 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8020922:	697b      	ldr	r3, [r7, #20]
 8020924:	2b03      	cmp	r3, #3
 8020926:	d10b      	bne.n	8020940 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020928:	4b14      	ldr	r3, [pc, #80]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020930:	2b00      	cmp	r3, #0
 8020932:	d063      	beq.n	80209fc <HAL_RCC_OscConfig+0x2f0>
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	685b      	ldr	r3, [r3, #4]
 8020938:	2b00      	cmp	r3, #0
 802093a:	d15f      	bne.n	80209fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 802093c:	2301      	movs	r3, #1
 802093e:	e2f7      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	685b      	ldr	r3, [r3, #4]
 8020944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020948:	d106      	bne.n	8020958 <HAL_RCC_OscConfig+0x24c>
 802094a:	4b0c      	ldr	r3, [pc, #48]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	4a0b      	ldr	r2, [pc, #44]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020954:	6013      	str	r3, [r2, #0]
 8020956:	e025      	b.n	80209a4 <HAL_RCC_OscConfig+0x298>
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	685b      	ldr	r3, [r3, #4]
 802095c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8020960:	d114      	bne.n	802098c <HAL_RCC_OscConfig+0x280>
 8020962:	4b06      	ldr	r3, [pc, #24]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	4a05      	ldr	r2, [pc, #20]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802096c:	6013      	str	r3, [r2, #0]
 802096e:	4b03      	ldr	r3, [pc, #12]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020970:	681b      	ldr	r3, [r3, #0]
 8020972:	4a02      	ldr	r2, [pc, #8]	@ (802097c <HAL_RCC_OscConfig+0x270>)
 8020974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020978:	6013      	str	r3, [r2, #0]
 802097a:	e013      	b.n	80209a4 <HAL_RCC_OscConfig+0x298>
 802097c:	40021000 	.word	0x40021000
 8020980:	080214e4 	.word	0x080214e4
 8020984:	20000000 	.word	0x20000000
 8020988:	20000004 	.word	0x20000004
 802098c:	4ba0      	ldr	r3, [pc, #640]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	4a9f      	ldr	r2, [pc, #636]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020996:	6013      	str	r3, [r2, #0]
 8020998:	4b9d      	ldr	r3, [pc, #628]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	4a9c      	ldr	r2, [pc, #624]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 802099e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80209a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	685b      	ldr	r3, [r3, #4]
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d013      	beq.n	80209d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80209ac:	f7ff fcf8 	bl	80203a0 <HAL_GetTick>
 80209b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80209b2:	e008      	b.n	80209c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80209b4:	f7ff fcf4 	bl	80203a0 <HAL_GetTick>
 80209b8:	4602      	mov	r2, r0
 80209ba:	693b      	ldr	r3, [r7, #16]
 80209bc:	1ad3      	subs	r3, r2, r3
 80209be:	2b64      	cmp	r3, #100	@ 0x64
 80209c0:	d901      	bls.n	80209c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80209c2:	2303      	movs	r3, #3
 80209c4:	e2b4      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80209c6:	4b92      	ldr	r3, [pc, #584]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d0f0      	beq.n	80209b4 <HAL_RCC_OscConfig+0x2a8>
 80209d2:	e014      	b.n	80209fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80209d4:	f7ff fce4 	bl	80203a0 <HAL_GetTick>
 80209d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80209da:	e008      	b.n	80209ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80209dc:	f7ff fce0 	bl	80203a0 <HAL_GetTick>
 80209e0:	4602      	mov	r2, r0
 80209e2:	693b      	ldr	r3, [r7, #16]
 80209e4:	1ad3      	subs	r3, r2, r3
 80209e6:	2b64      	cmp	r3, #100	@ 0x64
 80209e8:	d901      	bls.n	80209ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80209ea:	2303      	movs	r3, #3
 80209ec:	e2a0      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80209ee:	4b88      	ldr	r3, [pc, #544]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d1f0      	bne.n	80209dc <HAL_RCC_OscConfig+0x2d0>
 80209fa:	e000      	b.n	80209fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80209fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	f003 0302 	and.w	r3, r3, #2
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d060      	beq.n	8020acc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8020a0a:	69bb      	ldr	r3, [r7, #24]
 8020a0c:	2b04      	cmp	r3, #4
 8020a0e:	d005      	beq.n	8020a1c <HAL_RCC_OscConfig+0x310>
 8020a10:	69bb      	ldr	r3, [r7, #24]
 8020a12:	2b0c      	cmp	r3, #12
 8020a14:	d119      	bne.n	8020a4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8020a16:	697b      	ldr	r3, [r7, #20]
 8020a18:	2b02      	cmp	r3, #2
 8020a1a:	d116      	bne.n	8020a4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8020a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a1e:	681b      	ldr	r3, [r3, #0]
 8020a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d005      	beq.n	8020a34 <HAL_RCC_OscConfig+0x328>
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	68db      	ldr	r3, [r3, #12]
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d101      	bne.n	8020a34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8020a30:	2301      	movs	r3, #1
 8020a32:	e27d      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020a34:	4b76      	ldr	r3, [pc, #472]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a36:	685b      	ldr	r3, [r3, #4]
 8020a38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8020a3c:	687b      	ldr	r3, [r7, #4]
 8020a3e:	691b      	ldr	r3, [r3, #16]
 8020a40:	061b      	lsls	r3, r3, #24
 8020a42:	4973      	ldr	r1, [pc, #460]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a44:	4313      	orrs	r3, r2
 8020a46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8020a48:	e040      	b.n	8020acc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	68db      	ldr	r3, [r3, #12]
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	d023      	beq.n	8020a9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8020a52:	4b6f      	ldr	r3, [pc, #444]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	4a6e      	ldr	r2, [pc, #440]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020a5e:	f7ff fc9f 	bl	80203a0 <HAL_GetTick>
 8020a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8020a64:	e008      	b.n	8020a78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8020a66:	f7ff fc9b 	bl	80203a0 <HAL_GetTick>
 8020a6a:	4602      	mov	r2, r0
 8020a6c:	693b      	ldr	r3, [r7, #16]
 8020a6e:	1ad3      	subs	r3, r2, r3
 8020a70:	2b02      	cmp	r3, #2
 8020a72:	d901      	bls.n	8020a78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8020a74:	2303      	movs	r3, #3
 8020a76:	e25b      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8020a78:	4b65      	ldr	r3, [pc, #404]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d0f0      	beq.n	8020a66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020a84:	4b62      	ldr	r3, [pc, #392]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a86:	685b      	ldr	r3, [r3, #4]
 8020a88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	691b      	ldr	r3, [r3, #16]
 8020a90:	061b      	lsls	r3, r3, #24
 8020a92:	495f      	ldr	r1, [pc, #380]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a94:	4313      	orrs	r3, r2
 8020a96:	604b      	str	r3, [r1, #4]
 8020a98:	e018      	b.n	8020acc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8020a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020aa6:	f7ff fc7b 	bl	80203a0 <HAL_GetTick>
 8020aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8020aac:	e008      	b.n	8020ac0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8020aae:	f7ff fc77 	bl	80203a0 <HAL_GetTick>
 8020ab2:	4602      	mov	r2, r0
 8020ab4:	693b      	ldr	r3, [r7, #16]
 8020ab6:	1ad3      	subs	r3, r2, r3
 8020ab8:	2b02      	cmp	r3, #2
 8020aba:	d901      	bls.n	8020ac0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8020abc:	2303      	movs	r3, #3
 8020abe:	e237      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8020ac0:	4b53      	ldr	r3, [pc, #332]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020ac2:	681b      	ldr	r3, [r3, #0]
 8020ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d1f0      	bne.n	8020aae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	f003 0308 	and.w	r3, r3, #8
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d03c      	beq.n	8020b52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	695b      	ldr	r3, [r3, #20]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d01c      	beq.n	8020b1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8020ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020ae8:	f043 0301 	orr.w	r3, r3, #1
 8020aec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020af0:	f7ff fc56 	bl	80203a0 <HAL_GetTick>
 8020af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8020af6:	e008      	b.n	8020b0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8020af8:	f7ff fc52 	bl	80203a0 <HAL_GetTick>
 8020afc:	4602      	mov	r2, r0
 8020afe:	693b      	ldr	r3, [r7, #16]
 8020b00:	1ad3      	subs	r3, r2, r3
 8020b02:	2b02      	cmp	r3, #2
 8020b04:	d901      	bls.n	8020b0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8020b06:	2303      	movs	r3, #3
 8020b08:	e212      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8020b0a:	4b41      	ldr	r3, [pc, #260]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020b10:	f003 0302 	and.w	r3, r3, #2
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d0ef      	beq.n	8020af8 <HAL_RCC_OscConfig+0x3ec>
 8020b18:	e01b      	b.n	8020b52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8020b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020b20:	4a3b      	ldr	r2, [pc, #236]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b22:	f023 0301 	bic.w	r3, r3, #1
 8020b26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020b2a:	f7ff fc39 	bl	80203a0 <HAL_GetTick>
 8020b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8020b30:	e008      	b.n	8020b44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8020b32:	f7ff fc35 	bl	80203a0 <HAL_GetTick>
 8020b36:	4602      	mov	r2, r0
 8020b38:	693b      	ldr	r3, [r7, #16]
 8020b3a:	1ad3      	subs	r3, r2, r3
 8020b3c:	2b02      	cmp	r3, #2
 8020b3e:	d901      	bls.n	8020b44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8020b40:	2303      	movs	r3, #3
 8020b42:	e1f5      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8020b44:	4b32      	ldr	r3, [pc, #200]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020b4a:	f003 0302 	and.w	r3, r3, #2
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d1ef      	bne.n	8020b32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	f003 0304 	and.w	r3, r3, #4
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	f000 80a6 	beq.w	8020cac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8020b60:	2300      	movs	r3, #0
 8020b62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8020b64:	4b2a      	ldr	r3, [pc, #168]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d10d      	bne.n	8020b8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020b70:	4b27      	ldr	r3, [pc, #156]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b74:	4a26      	ldr	r2, [pc, #152]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8020b7c:	4b24      	ldr	r3, [pc, #144]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020b84:	60bb      	str	r3, [r7, #8]
 8020b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8020b88:	2301      	movs	r3, #1
 8020b8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020b8c:	4b21      	ldr	r3, [pc, #132]	@ (8020c14 <HAL_RCC_OscConfig+0x508>)
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d118      	bne.n	8020bca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8020b98:	4b1e      	ldr	r3, [pc, #120]	@ (8020c14 <HAL_RCC_OscConfig+0x508>)
 8020b9a:	681b      	ldr	r3, [r3, #0]
 8020b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8020c14 <HAL_RCC_OscConfig+0x508>)
 8020b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8020ba4:	f7ff fbfc 	bl	80203a0 <HAL_GetTick>
 8020ba8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020baa:	e008      	b.n	8020bbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020bac:	f7ff fbf8 	bl	80203a0 <HAL_GetTick>
 8020bb0:	4602      	mov	r2, r0
 8020bb2:	693b      	ldr	r3, [r7, #16]
 8020bb4:	1ad3      	subs	r3, r2, r3
 8020bb6:	2b02      	cmp	r3, #2
 8020bb8:	d901      	bls.n	8020bbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8020bba:	2303      	movs	r3, #3
 8020bbc:	e1b8      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8020bbe:	4b15      	ldr	r3, [pc, #84]	@ (8020c14 <HAL_RCC_OscConfig+0x508>)
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d0f0      	beq.n	8020bac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	689b      	ldr	r3, [r3, #8]
 8020bce:	2b01      	cmp	r3, #1
 8020bd0:	d108      	bne.n	8020be4 <HAL_RCC_OscConfig+0x4d8>
 8020bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020bda:	f043 0301 	orr.w	r3, r3, #1
 8020bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020be2:	e029      	b.n	8020c38 <HAL_RCC_OscConfig+0x52c>
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	689b      	ldr	r3, [r3, #8]
 8020be8:	2b05      	cmp	r3, #5
 8020bea:	d115      	bne.n	8020c18 <HAL_RCC_OscConfig+0x50c>
 8020bec:	4b08      	ldr	r3, [pc, #32]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020bf2:	4a07      	ldr	r2, [pc, #28]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020bf4:	f043 0304 	orr.w	r3, r3, #4
 8020bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020bfc:	4b04      	ldr	r3, [pc, #16]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020c02:	4a03      	ldr	r2, [pc, #12]	@ (8020c10 <HAL_RCC_OscConfig+0x504>)
 8020c04:	f043 0301 	orr.w	r3, r3, #1
 8020c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020c0c:	e014      	b.n	8020c38 <HAL_RCC_OscConfig+0x52c>
 8020c0e:	bf00      	nop
 8020c10:	40021000 	.word	0x40021000
 8020c14:	40007000 	.word	0x40007000
 8020c18:	4b9d      	ldr	r3, [pc, #628]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020c1e:	4a9c      	ldr	r2, [pc, #624]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c20:	f023 0301 	bic.w	r3, r3, #1
 8020c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8020c28:	4b99      	ldr	r3, [pc, #612]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020c2e:	4a98      	ldr	r2, [pc, #608]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c30:	f023 0304 	bic.w	r3, r3, #4
 8020c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	689b      	ldr	r3, [r3, #8]
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d016      	beq.n	8020c6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020c40:	f7ff fbae 	bl	80203a0 <HAL_GetTick>
 8020c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8020c46:	e00a      	b.n	8020c5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8020c48:	f7ff fbaa 	bl	80203a0 <HAL_GetTick>
 8020c4c:	4602      	mov	r2, r0
 8020c4e:	693b      	ldr	r3, [r7, #16]
 8020c50:	1ad3      	subs	r3, r2, r3
 8020c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020c56:	4293      	cmp	r3, r2
 8020c58:	d901      	bls.n	8020c5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8020c5a:	2303      	movs	r3, #3
 8020c5c:	e168      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8020c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020c64:	f003 0302 	and.w	r3, r3, #2
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d0ed      	beq.n	8020c48 <HAL_RCC_OscConfig+0x53c>
 8020c6c:	e015      	b.n	8020c9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020c6e:	f7ff fb97 	bl	80203a0 <HAL_GetTick>
 8020c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8020c74:	e00a      	b.n	8020c8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8020c76:	f7ff fb93 	bl	80203a0 <HAL_GetTick>
 8020c7a:	4602      	mov	r2, r0
 8020c7c:	693b      	ldr	r3, [r7, #16]
 8020c7e:	1ad3      	subs	r3, r2, r3
 8020c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020c84:	4293      	cmp	r3, r2
 8020c86:	d901      	bls.n	8020c8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8020c88:	2303      	movs	r3, #3
 8020c8a:	e151      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8020c8c:	4b80      	ldr	r3, [pc, #512]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020c92:	f003 0302 	and.w	r3, r3, #2
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d1ed      	bne.n	8020c76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8020c9a:	7ffb      	ldrb	r3, [r7, #31]
 8020c9c:	2b01      	cmp	r3, #1
 8020c9e:	d105      	bne.n	8020cac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8020caa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	f003 0320 	and.w	r3, r3, #32
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d03c      	beq.n	8020d32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d01c      	beq.n	8020cfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8020cc0:	4b73      	ldr	r3, [pc, #460]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020cc6:	4a72      	ldr	r2, [pc, #456]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020cc8:	f043 0301 	orr.w	r3, r3, #1
 8020ccc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020cd0:	f7ff fb66 	bl	80203a0 <HAL_GetTick>
 8020cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8020cd6:	e008      	b.n	8020cea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8020cd8:	f7ff fb62 	bl	80203a0 <HAL_GetTick>
 8020cdc:	4602      	mov	r2, r0
 8020cde:	693b      	ldr	r3, [r7, #16]
 8020ce0:	1ad3      	subs	r3, r2, r3
 8020ce2:	2b02      	cmp	r3, #2
 8020ce4:	d901      	bls.n	8020cea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8020ce6:	2303      	movs	r3, #3
 8020ce8:	e122      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8020cea:	4b69      	ldr	r3, [pc, #420]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020cf0:	f003 0302 	and.w	r3, r3, #2
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	d0ef      	beq.n	8020cd8 <HAL_RCC_OscConfig+0x5cc>
 8020cf8:	e01b      	b.n	8020d32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8020cfa:	4b65      	ldr	r3, [pc, #404]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020d00:	4a63      	ldr	r2, [pc, #396]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020d02:	f023 0301 	bic.w	r3, r3, #1
 8020d06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020d0a:	f7ff fb49 	bl	80203a0 <HAL_GetTick>
 8020d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8020d10:	e008      	b.n	8020d24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8020d12:	f7ff fb45 	bl	80203a0 <HAL_GetTick>
 8020d16:	4602      	mov	r2, r0
 8020d18:	693b      	ldr	r3, [r7, #16]
 8020d1a:	1ad3      	subs	r3, r2, r3
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	d901      	bls.n	8020d24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8020d20:	2303      	movs	r3, #3
 8020d22:	e105      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8020d24:	4b5a      	ldr	r3, [pc, #360]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020d2a:	f003 0302 	and.w	r3, r3, #2
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d1ef      	bne.n	8020d12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8020d32:	687b      	ldr	r3, [r7, #4]
 8020d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	f000 80f9 	beq.w	8020f2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d40:	2b02      	cmp	r3, #2
 8020d42:	f040 80cf 	bne.w	8020ee4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8020d46:	4b52      	ldr	r3, [pc, #328]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020d48:	68db      	ldr	r3, [r3, #12]
 8020d4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8020d4c:	697b      	ldr	r3, [r7, #20]
 8020d4e:	f003 0203 	and.w	r2, r3, #3
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d56:	429a      	cmp	r2, r3
 8020d58:	d12c      	bne.n	8020db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8020d5a:	697b      	ldr	r3, [r7, #20]
 8020d5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020d64:	3b01      	subs	r3, #1
 8020d66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8020d68:	429a      	cmp	r2, r3
 8020d6a:	d123      	bne.n	8020db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8020d6c:	697b      	ldr	r3, [r7, #20]
 8020d6e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020d76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8020d78:	429a      	cmp	r2, r3
 8020d7a:	d11b      	bne.n	8020db4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8020d7c:	697b      	ldr	r3, [r7, #20]
 8020d7e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020d86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8020d88:	429a      	cmp	r2, r3
 8020d8a:	d113      	bne.n	8020db4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8020d8c:	697b      	ldr	r3, [r7, #20]
 8020d8e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020d96:	085b      	lsrs	r3, r3, #1
 8020d98:	3b01      	subs	r3, #1
 8020d9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8020d9c:	429a      	cmp	r2, r3
 8020d9e:	d109      	bne.n	8020db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8020da0:	697b      	ldr	r3, [r7, #20]
 8020da2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020daa:	085b      	lsrs	r3, r3, #1
 8020dac:	3b01      	subs	r3, #1
 8020dae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8020db0:	429a      	cmp	r2, r3
 8020db2:	d071      	beq.n	8020e98 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8020db4:	69bb      	ldr	r3, [r7, #24]
 8020db6:	2b0c      	cmp	r3, #12
 8020db8:	d068      	beq.n	8020e8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8020dba:	4b35      	ldr	r3, [pc, #212]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d105      	bne.n	8020dd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8020dc6:	4b32      	ldr	r3, [pc, #200]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020dc8:	681b      	ldr	r3, [r3, #0]
 8020dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d001      	beq.n	8020dd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	e0ac      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8020dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	4a2d      	ldr	r2, [pc, #180]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8020de0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8020de2:	f7ff fadd 	bl	80203a0 <HAL_GetTick>
 8020de6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020de8:	e008      	b.n	8020dfc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020dea:	f7ff fad9 	bl	80203a0 <HAL_GetTick>
 8020dee:	4602      	mov	r2, r0
 8020df0:	693b      	ldr	r3, [r7, #16]
 8020df2:	1ad3      	subs	r3, r2, r3
 8020df4:	2b02      	cmp	r3, #2
 8020df6:	d901      	bls.n	8020dfc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8020df8:	2303      	movs	r3, #3
 8020dfa:	e099      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020dfc:	4b24      	ldr	r3, [pc, #144]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d1f0      	bne.n	8020dea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8020e08:	4b21      	ldr	r3, [pc, #132]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e0a:	68da      	ldr	r2, [r3, #12]
 8020e0c:	4b21      	ldr	r3, [pc, #132]	@ (8020e94 <HAL_RCC_OscConfig+0x788>)
 8020e0e:	4013      	ands	r3, r2
 8020e10:	687a      	ldr	r2, [r7, #4]
 8020e12:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8020e14:	687a      	ldr	r2, [r7, #4]
 8020e16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8020e18:	3a01      	subs	r2, #1
 8020e1a:	0112      	lsls	r2, r2, #4
 8020e1c:	4311      	orrs	r1, r2
 8020e1e:	687a      	ldr	r2, [r7, #4]
 8020e20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8020e22:	0212      	lsls	r2, r2, #8
 8020e24:	4311      	orrs	r1, r2
 8020e26:	687a      	ldr	r2, [r7, #4]
 8020e28:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8020e2a:	0852      	lsrs	r2, r2, #1
 8020e2c:	3a01      	subs	r2, #1
 8020e2e:	0552      	lsls	r2, r2, #21
 8020e30:	4311      	orrs	r1, r2
 8020e32:	687a      	ldr	r2, [r7, #4]
 8020e34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8020e36:	0852      	lsrs	r2, r2, #1
 8020e38:	3a01      	subs	r2, #1
 8020e3a:	0652      	lsls	r2, r2, #25
 8020e3c:	4311      	orrs	r1, r2
 8020e3e:	687a      	ldr	r2, [r7, #4]
 8020e40:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8020e42:	06d2      	lsls	r2, r2, #27
 8020e44:	430a      	orrs	r2, r1
 8020e46:	4912      	ldr	r1, [pc, #72]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e48:	4313      	orrs	r3, r2
 8020e4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8020e4c:	4b10      	ldr	r3, [pc, #64]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	4a0f      	ldr	r2, [pc, #60]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8020e58:	4b0d      	ldr	r3, [pc, #52]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e5a:	68db      	ldr	r3, [r3, #12]
 8020e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8020e64:	f7ff fa9c 	bl	80203a0 <HAL_GetTick>
 8020e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020e6a:	e008      	b.n	8020e7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020e6c:	f7ff fa98 	bl	80203a0 <HAL_GetTick>
 8020e70:	4602      	mov	r2, r0
 8020e72:	693b      	ldr	r3, [r7, #16]
 8020e74:	1ad3      	subs	r3, r2, r3
 8020e76:	2b02      	cmp	r3, #2
 8020e78:	d901      	bls.n	8020e7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8020e7a:	2303      	movs	r3, #3
 8020e7c:	e058      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020e7e:	4b04      	ldr	r3, [pc, #16]	@ (8020e90 <HAL_RCC_OscConfig+0x784>)
 8020e80:	681b      	ldr	r3, [r3, #0]
 8020e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d0f0      	beq.n	8020e6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8020e8a:	e050      	b.n	8020f2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8020e8c:	2301      	movs	r3, #1
 8020e8e:	e04f      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
 8020e90:	40021000 	.word	0x40021000
 8020e94:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020e98:	4b27      	ldr	r3, [pc, #156]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	d144      	bne.n	8020f2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8020ea4:	4b24      	ldr	r3, [pc, #144]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	4a23      	ldr	r2, [pc, #140]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8020eb0:	4b21      	ldr	r3, [pc, #132]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020eb2:	68db      	ldr	r3, [r3, #12]
 8020eb4:	4a20      	ldr	r2, [pc, #128]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8020eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8020ebc:	f7ff fa70 	bl	80203a0 <HAL_GetTick>
 8020ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020ec2:	e008      	b.n	8020ed6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020ec4:	f7ff fa6c 	bl	80203a0 <HAL_GetTick>
 8020ec8:	4602      	mov	r2, r0
 8020eca:	693b      	ldr	r3, [r7, #16]
 8020ecc:	1ad3      	subs	r3, r2, r3
 8020ece:	2b02      	cmp	r3, #2
 8020ed0:	d901      	bls.n	8020ed6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8020ed2:	2303      	movs	r3, #3
 8020ed4:	e02c      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020ed6:	4b18      	ldr	r3, [pc, #96]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	d0f0      	beq.n	8020ec4 <HAL_RCC_OscConfig+0x7b8>
 8020ee2:	e024      	b.n	8020f2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8020ee4:	69bb      	ldr	r3, [r7, #24]
 8020ee6:	2b0c      	cmp	r3, #12
 8020ee8:	d01f      	beq.n	8020f2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8020eea:	4b13      	ldr	r3, [pc, #76]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	4a12      	ldr	r2, [pc, #72]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8020ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020ef6:	f7ff fa53 	bl	80203a0 <HAL_GetTick>
 8020efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020efc:	e008      	b.n	8020f10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8020efe:	f7ff fa4f 	bl	80203a0 <HAL_GetTick>
 8020f02:	4602      	mov	r2, r0
 8020f04:	693b      	ldr	r3, [r7, #16]
 8020f06:	1ad3      	subs	r3, r2, r3
 8020f08:	2b02      	cmp	r3, #2
 8020f0a:	d901      	bls.n	8020f10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8020f0c:	2303      	movs	r3, #3
 8020f0e:	e00f      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8020f10:	4b09      	ldr	r3, [pc, #36]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d1f0      	bne.n	8020efe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8020f1c:	4b06      	ldr	r3, [pc, #24]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020f1e:	68da      	ldr	r2, [r3, #12]
 8020f20:	4905      	ldr	r1, [pc, #20]	@ (8020f38 <HAL_RCC_OscConfig+0x82c>)
 8020f22:	4b06      	ldr	r3, [pc, #24]	@ (8020f3c <HAL_RCC_OscConfig+0x830>)
 8020f24:	4013      	ands	r3, r2
 8020f26:	60cb      	str	r3, [r1, #12]
 8020f28:	e001      	b.n	8020f2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8020f2a:	2301      	movs	r3, #1
 8020f2c:	e000      	b.n	8020f30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8020f2e:	2300      	movs	r3, #0
}
 8020f30:	4618      	mov	r0, r3
 8020f32:	3720      	adds	r7, #32
 8020f34:	46bd      	mov	sp, r7
 8020f36:	bd80      	pop	{r7, pc}
 8020f38:	40021000 	.word	0x40021000
 8020f3c:	feeefffc 	.word	0xfeeefffc

08020f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b086      	sub	sp, #24
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	6078      	str	r0, [r7, #4]
 8020f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8020f4a:	2300      	movs	r3, #0
 8020f4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	d101      	bne.n	8020f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8020f54:	2301      	movs	r3, #1
 8020f56:	e11d      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8020f58:	4b90      	ldr	r3, [pc, #576]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	f003 030f 	and.w	r3, r3, #15
 8020f60:	683a      	ldr	r2, [r7, #0]
 8020f62:	429a      	cmp	r2, r3
 8020f64:	d910      	bls.n	8020f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020f66:	4b8d      	ldr	r3, [pc, #564]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	f023 020f 	bic.w	r2, r3, #15
 8020f6e:	498b      	ldr	r1, [pc, #556]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8020f70:	683b      	ldr	r3, [r7, #0]
 8020f72:	4313      	orrs	r3, r2
 8020f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020f76:	4b89      	ldr	r3, [pc, #548]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	f003 030f 	and.w	r3, r3, #15
 8020f7e:	683a      	ldr	r2, [r7, #0]
 8020f80:	429a      	cmp	r2, r3
 8020f82:	d001      	beq.n	8020f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8020f84:	2301      	movs	r3, #1
 8020f86:	e105      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	f003 0302 	and.w	r3, r3, #2
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d010      	beq.n	8020fb6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	689a      	ldr	r2, [r3, #8]
 8020f98:	4b81      	ldr	r3, [pc, #516]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020f9a:	689b      	ldr	r3, [r3, #8]
 8020f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020fa0:	429a      	cmp	r2, r3
 8020fa2:	d908      	bls.n	8020fb6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020fa6:	689b      	ldr	r3, [r3, #8]
 8020fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	689b      	ldr	r3, [r3, #8]
 8020fb0:	497b      	ldr	r1, [pc, #492]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020fb2:	4313      	orrs	r3, r2
 8020fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	f003 0301 	and.w	r3, r3, #1
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d079      	beq.n	80210b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	685b      	ldr	r3, [r3, #4]
 8020fc6:	2b03      	cmp	r3, #3
 8020fc8:	d11e      	bne.n	8021008 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8020fca:	4b75      	ldr	r3, [pc, #468]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d101      	bne.n	8020fda <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8020fd6:	2301      	movs	r3, #1
 8020fd8:	e0dc      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8020fda:	f000 f9d1 	bl	8021380 <RCC_GetSysClockFreqFromPLLSource>
 8020fde:	4603      	mov	r3, r0
 8020fe0:	4a70      	ldr	r2, [pc, #448]	@ (80211a4 <HAL_RCC_ClockConfig+0x264>)
 8020fe2:	4293      	cmp	r3, r2
 8020fe4:	d946      	bls.n	8021074 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8020fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020fe8:	689b      	ldr	r3, [r3, #8]
 8020fea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d140      	bne.n	8021074 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8020ff2:	4b6b      	ldr	r3, [pc, #428]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020ff4:	689b      	ldr	r3, [r3, #8]
 8020ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8020ffa:	4a69      	ldr	r2, [pc, #420]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8020ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021000:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021002:	2380      	movs	r3, #128	@ 0x80
 8021004:	617b      	str	r3, [r7, #20]
 8021006:	e035      	b.n	8021074 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	685b      	ldr	r3, [r3, #4]
 802100c:	2b02      	cmp	r3, #2
 802100e:	d107      	bne.n	8021020 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021010:	4b63      	ldr	r3, [pc, #396]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021018:	2b00      	cmp	r3, #0
 802101a:	d115      	bne.n	8021048 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 802101c:	2301      	movs	r3, #1
 802101e:	e0b9      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	685b      	ldr	r3, [r3, #4]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d107      	bne.n	8021038 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021028:	4b5d      	ldr	r3, [pc, #372]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	f003 0302 	and.w	r3, r3, #2
 8021030:	2b00      	cmp	r3, #0
 8021032:	d109      	bne.n	8021048 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021034:	2301      	movs	r3, #1
 8021036:	e0ad      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021038:	4b59      	ldr	r3, [pc, #356]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021040:	2b00      	cmp	r3, #0
 8021042:	d101      	bne.n	8021048 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8021044:	2301      	movs	r3, #1
 8021046:	e0a5      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8021048:	f000 f8b4 	bl	80211b4 <HAL_RCC_GetSysClockFreq>
 802104c:	4603      	mov	r3, r0
 802104e:	4a55      	ldr	r2, [pc, #340]	@ (80211a4 <HAL_RCC_ClockConfig+0x264>)
 8021050:	4293      	cmp	r3, r2
 8021052:	d90f      	bls.n	8021074 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8021054:	4b52      	ldr	r3, [pc, #328]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021056:	689b      	ldr	r3, [r3, #8]
 8021058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802105c:	2b00      	cmp	r3, #0
 802105e:	d109      	bne.n	8021074 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8021060:	4b4f      	ldr	r3, [pc, #316]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021062:	689b      	ldr	r3, [r3, #8]
 8021064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021068:	4a4d      	ldr	r2, [pc, #308]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 802106a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802106e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8021070:	2380      	movs	r3, #128	@ 0x80
 8021072:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8021074:	4b4a      	ldr	r3, [pc, #296]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021076:	689b      	ldr	r3, [r3, #8]
 8021078:	f023 0203 	bic.w	r2, r3, #3
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	685b      	ldr	r3, [r3, #4]
 8021080:	4947      	ldr	r1, [pc, #284]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021082:	4313      	orrs	r3, r2
 8021084:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021086:	f7ff f98b 	bl	80203a0 <HAL_GetTick>
 802108a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802108c:	e00a      	b.n	80210a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802108e:	f7ff f987 	bl	80203a0 <HAL_GetTick>
 8021092:	4602      	mov	r2, r0
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	1ad3      	subs	r3, r2, r3
 8021098:	f241 3288 	movw	r2, #5000	@ 0x1388
 802109c:	4293      	cmp	r3, r2
 802109e:	d901      	bls.n	80210a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80210a0:	2303      	movs	r3, #3
 80210a2:	e077      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80210a4:	4b3e      	ldr	r3, [pc, #248]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210a6:	689b      	ldr	r3, [r3, #8]
 80210a8:	f003 020c 	and.w	r2, r3, #12
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	685b      	ldr	r3, [r3, #4]
 80210b0:	009b      	lsls	r3, r3, #2
 80210b2:	429a      	cmp	r2, r3
 80210b4:	d1eb      	bne.n	802108e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80210b6:	697b      	ldr	r3, [r7, #20]
 80210b8:	2b80      	cmp	r3, #128	@ 0x80
 80210ba:	d105      	bne.n	80210c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80210bc:	4b38      	ldr	r3, [pc, #224]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210be:	689b      	ldr	r3, [r3, #8]
 80210c0:	4a37      	ldr	r2, [pc, #220]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80210c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	f003 0302 	and.w	r3, r3, #2
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d010      	beq.n	80210f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	689a      	ldr	r2, [r3, #8]
 80210d8:	4b31      	ldr	r3, [pc, #196]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210da:	689b      	ldr	r3, [r3, #8]
 80210dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80210e0:	429a      	cmp	r2, r3
 80210e2:	d208      	bcs.n	80210f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80210e4:	4b2e      	ldr	r3, [pc, #184]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210e6:	689b      	ldr	r3, [r3, #8]
 80210e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	689b      	ldr	r3, [r3, #8]
 80210f0:	492b      	ldr	r1, [pc, #172]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 80210f2:	4313      	orrs	r3, r2
 80210f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80210f6:	4b29      	ldr	r3, [pc, #164]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	f003 030f 	and.w	r3, r3, #15
 80210fe:	683a      	ldr	r2, [r7, #0]
 8021100:	429a      	cmp	r2, r3
 8021102:	d210      	bcs.n	8021126 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021104:	4b25      	ldr	r3, [pc, #148]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	f023 020f 	bic.w	r2, r3, #15
 802110c:	4923      	ldr	r1, [pc, #140]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 802110e:	683b      	ldr	r3, [r7, #0]
 8021110:	4313      	orrs	r3, r2
 8021112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021114:	4b21      	ldr	r3, [pc, #132]	@ (802119c <HAL_RCC_ClockConfig+0x25c>)
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	f003 030f 	and.w	r3, r3, #15
 802111c:	683a      	ldr	r2, [r7, #0]
 802111e:	429a      	cmp	r2, r3
 8021120:	d001      	beq.n	8021126 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8021122:	2301      	movs	r3, #1
 8021124:	e036      	b.n	8021194 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	f003 0304 	and.w	r3, r3, #4
 802112e:	2b00      	cmp	r3, #0
 8021130:	d008      	beq.n	8021144 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021132:	4b1b      	ldr	r3, [pc, #108]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021134:	689b      	ldr	r3, [r3, #8]
 8021136:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	68db      	ldr	r3, [r3, #12]
 802113e:	4918      	ldr	r1, [pc, #96]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021140:	4313      	orrs	r3, r2
 8021142:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	f003 0308 	and.w	r3, r3, #8
 802114c:	2b00      	cmp	r3, #0
 802114e:	d009      	beq.n	8021164 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021150:	4b13      	ldr	r3, [pc, #76]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021152:	689b      	ldr	r3, [r3, #8]
 8021154:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	691b      	ldr	r3, [r3, #16]
 802115c:	00db      	lsls	r3, r3, #3
 802115e:	4910      	ldr	r1, [pc, #64]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 8021160:	4313      	orrs	r3, r2
 8021162:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021164:	f000 f826 	bl	80211b4 <HAL_RCC_GetSysClockFreq>
 8021168:	4602      	mov	r2, r0
 802116a:	4b0d      	ldr	r3, [pc, #52]	@ (80211a0 <HAL_RCC_ClockConfig+0x260>)
 802116c:	689b      	ldr	r3, [r3, #8]
 802116e:	091b      	lsrs	r3, r3, #4
 8021170:	f003 030f 	and.w	r3, r3, #15
 8021174:	490c      	ldr	r1, [pc, #48]	@ (80211a8 <HAL_RCC_ClockConfig+0x268>)
 8021176:	5ccb      	ldrb	r3, [r1, r3]
 8021178:	f003 031f 	and.w	r3, r3, #31
 802117c:	fa22 f303 	lsr.w	r3, r2, r3
 8021180:	4a0a      	ldr	r2, [pc, #40]	@ (80211ac <HAL_RCC_ClockConfig+0x26c>)
 8021182:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8021184:	4b0a      	ldr	r3, [pc, #40]	@ (80211b0 <HAL_RCC_ClockConfig+0x270>)
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	4618      	mov	r0, r3
 802118a:	f7ff f8b9 	bl	8020300 <HAL_InitTick>
 802118e:	4603      	mov	r3, r0
 8021190:	73fb      	strb	r3, [r7, #15]

  return status;
 8021192:	7bfb      	ldrb	r3, [r7, #15]
}
 8021194:	4618      	mov	r0, r3
 8021196:	3718      	adds	r7, #24
 8021198:	46bd      	mov	sp, r7
 802119a:	bd80      	pop	{r7, pc}
 802119c:	40022000 	.word	0x40022000
 80211a0:	40021000 	.word	0x40021000
 80211a4:	04c4b400 	.word	0x04c4b400
 80211a8:	080214e4 	.word	0x080214e4
 80211ac:	20000000 	.word	0x20000000
 80211b0:	20000004 	.word	0x20000004

080211b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80211b4:	b480      	push	{r7}
 80211b6:	b089      	sub	sp, #36	@ 0x24
 80211b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80211ba:	2300      	movs	r3, #0
 80211bc:	61fb      	str	r3, [r7, #28]
 80211be:	2300      	movs	r3, #0
 80211c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80211c2:	4b3e      	ldr	r3, [pc, #248]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 80211c4:	689b      	ldr	r3, [r3, #8]
 80211c6:	f003 030c 	and.w	r3, r3, #12
 80211ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80211cc:	4b3b      	ldr	r3, [pc, #236]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 80211ce:	68db      	ldr	r3, [r3, #12]
 80211d0:	f003 0303 	and.w	r3, r3, #3
 80211d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80211d6:	693b      	ldr	r3, [r7, #16]
 80211d8:	2b00      	cmp	r3, #0
 80211da:	d005      	beq.n	80211e8 <HAL_RCC_GetSysClockFreq+0x34>
 80211dc:	693b      	ldr	r3, [r7, #16]
 80211de:	2b0c      	cmp	r3, #12
 80211e0:	d121      	bne.n	8021226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	2b01      	cmp	r3, #1
 80211e6:	d11e      	bne.n	8021226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80211e8:	4b34      	ldr	r3, [pc, #208]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	f003 0308 	and.w	r3, r3, #8
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d107      	bne.n	8021204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80211f4:	4b31      	ldr	r3, [pc, #196]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 80211f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80211fa:	0a1b      	lsrs	r3, r3, #8
 80211fc:	f003 030f 	and.w	r3, r3, #15
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	e005      	b.n	8021210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8021204:	4b2d      	ldr	r3, [pc, #180]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 8021206:	681b      	ldr	r3, [r3, #0]
 8021208:	091b      	lsrs	r3, r3, #4
 802120a:	f003 030f 	and.w	r3, r3, #15
 802120e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8021210:	4a2b      	ldr	r2, [pc, #172]	@ (80212c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8021212:	69fb      	ldr	r3, [r7, #28]
 8021214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802121a:	693b      	ldr	r3, [r7, #16]
 802121c:	2b00      	cmp	r3, #0
 802121e:	d10d      	bne.n	802123c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8021220:	69fb      	ldr	r3, [r7, #28]
 8021222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021224:	e00a      	b.n	802123c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8021226:	693b      	ldr	r3, [r7, #16]
 8021228:	2b04      	cmp	r3, #4
 802122a:	d102      	bne.n	8021232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 802122c:	4b25      	ldr	r3, [pc, #148]	@ (80212c4 <HAL_RCC_GetSysClockFreq+0x110>)
 802122e:	61bb      	str	r3, [r7, #24]
 8021230:	e004      	b.n	802123c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8021232:	693b      	ldr	r3, [r7, #16]
 8021234:	2b08      	cmp	r3, #8
 8021236:	d101      	bne.n	802123c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8021238:	4b23      	ldr	r3, [pc, #140]	@ (80212c8 <HAL_RCC_GetSysClockFreq+0x114>)
 802123a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 802123c:	693b      	ldr	r3, [r7, #16]
 802123e:	2b0c      	cmp	r3, #12
 8021240:	d134      	bne.n	80212ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021242:	4b1e      	ldr	r3, [pc, #120]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 8021244:	68db      	ldr	r3, [r3, #12]
 8021246:	f003 0303 	and.w	r3, r3, #3
 802124a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 802124c:	68bb      	ldr	r3, [r7, #8]
 802124e:	2b02      	cmp	r3, #2
 8021250:	d003      	beq.n	802125a <HAL_RCC_GetSysClockFreq+0xa6>
 8021252:	68bb      	ldr	r3, [r7, #8]
 8021254:	2b03      	cmp	r3, #3
 8021256:	d003      	beq.n	8021260 <HAL_RCC_GetSysClockFreq+0xac>
 8021258:	e005      	b.n	8021266 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 802125a:	4b1a      	ldr	r3, [pc, #104]	@ (80212c4 <HAL_RCC_GetSysClockFreq+0x110>)
 802125c:	617b      	str	r3, [r7, #20]
      break;
 802125e:	e005      	b.n	802126c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8021260:	4b19      	ldr	r3, [pc, #100]	@ (80212c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8021262:	617b      	str	r3, [r7, #20]
      break;
 8021264:	e002      	b.n	802126c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8021266:	69fb      	ldr	r3, [r7, #28]
 8021268:	617b      	str	r3, [r7, #20]
      break;
 802126a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802126c:	4b13      	ldr	r3, [pc, #76]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 802126e:	68db      	ldr	r3, [r3, #12]
 8021270:	091b      	lsrs	r3, r3, #4
 8021272:	f003 030f 	and.w	r3, r3, #15
 8021276:	3301      	adds	r3, #1
 8021278:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 802127a:	4b10      	ldr	r3, [pc, #64]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 802127c:	68db      	ldr	r3, [r3, #12]
 802127e:	0a1b      	lsrs	r3, r3, #8
 8021280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021284:	697a      	ldr	r2, [r7, #20]
 8021286:	fb03 f202 	mul.w	r2, r3, r2
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	fbb2 f3f3 	udiv	r3, r2, r3
 8021290:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021292:	4b0a      	ldr	r3, [pc, #40]	@ (80212bc <HAL_RCC_GetSysClockFreq+0x108>)
 8021294:	68db      	ldr	r3, [r3, #12]
 8021296:	0e5b      	lsrs	r3, r3, #25
 8021298:	f003 0303 	and.w	r3, r3, #3
 802129c:	3301      	adds	r3, #1
 802129e:	005b      	lsls	r3, r3, #1
 80212a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80212a2:	697a      	ldr	r2, [r7, #20]
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80212aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80212ac:	69bb      	ldr	r3, [r7, #24]
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	3724      	adds	r7, #36	@ 0x24
 80212b2:	46bd      	mov	sp, r7
 80212b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b8:	4770      	bx	lr
 80212ba:	bf00      	nop
 80212bc:	40021000 	.word	0x40021000
 80212c0:	080214f4 	.word	0x080214f4
 80212c4:	00f42400 	.word	0x00f42400
 80212c8:	007a1200 	.word	0x007a1200

080212cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b086      	sub	sp, #24
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80212d4:	2300      	movs	r3, #0
 80212d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80212d8:	4b27      	ldr	r3, [pc, #156]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80212da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80212dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d003      	beq.n	80212ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80212e4:	f7ff f94e 	bl	8020584 <HAL_PWREx_GetVoltageRange>
 80212e8:	6178      	str	r0, [r7, #20]
 80212ea:	e014      	b.n	8021316 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80212ec:	4b22      	ldr	r3, [pc, #136]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80212ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80212f0:	4a21      	ldr	r2, [pc, #132]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80212f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80212f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80212f8:	4b1f      	ldr	r3, [pc, #124]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80212fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80212fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8021300:	60fb      	str	r3, [r7, #12]
 8021302:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8021304:	f7ff f93e 	bl	8020584 <HAL_PWREx_GetVoltageRange>
 8021308:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 802130a:	4b1b      	ldr	r3, [pc, #108]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802130e:	4a1a      	ldr	r2, [pc, #104]	@ (8021378 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8021310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021314:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021316:	697b      	ldr	r3, [r7, #20]
 8021318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802131c:	d10b      	bne.n	8021336 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	2b80      	cmp	r3, #128	@ 0x80
 8021322:	d913      	bls.n	802134c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	2ba0      	cmp	r3, #160	@ 0xa0
 8021328:	d902      	bls.n	8021330 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 802132a:	2302      	movs	r3, #2
 802132c:	613b      	str	r3, [r7, #16]
 802132e:	e00d      	b.n	802134c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021330:	2301      	movs	r3, #1
 8021332:	613b      	str	r3, [r7, #16]
 8021334:	e00a      	b.n	802134c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	2b7f      	cmp	r3, #127	@ 0x7f
 802133a:	d902      	bls.n	8021342 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 802133c:	2302      	movs	r3, #2
 802133e:	613b      	str	r3, [r7, #16]
 8021340:	e004      	b.n	802134c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	2b70      	cmp	r3, #112	@ 0x70
 8021346:	d101      	bne.n	802134c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8021348:	2301      	movs	r3, #1
 802134a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 802134c:	4b0b      	ldr	r3, [pc, #44]	@ (802137c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	f023 020f 	bic.w	r2, r3, #15
 8021354:	4909      	ldr	r1, [pc, #36]	@ (802137c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8021356:	693b      	ldr	r3, [r7, #16]
 8021358:	4313      	orrs	r3, r2
 802135a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 802135c:	4b07      	ldr	r3, [pc, #28]	@ (802137c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	f003 030f 	and.w	r3, r3, #15
 8021364:	693a      	ldr	r2, [r7, #16]
 8021366:	429a      	cmp	r2, r3
 8021368:	d001      	beq.n	802136e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 802136a:	2301      	movs	r3, #1
 802136c:	e000      	b.n	8021370 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 802136e:	2300      	movs	r3, #0
}
 8021370:	4618      	mov	r0, r3
 8021372:	3718      	adds	r7, #24
 8021374:	46bd      	mov	sp, r7
 8021376:	bd80      	pop	{r7, pc}
 8021378:	40021000 	.word	0x40021000
 802137c:	40022000 	.word	0x40022000

08021380 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8021380:	b480      	push	{r7}
 8021382:	b087      	sub	sp, #28
 8021384:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8021386:	4b2d      	ldr	r3, [pc, #180]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021388:	68db      	ldr	r3, [r3, #12]
 802138a:	f003 0303 	and.w	r3, r3, #3
 802138e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	2b03      	cmp	r3, #3
 8021394:	d00b      	beq.n	80213ae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	2b03      	cmp	r3, #3
 802139a:	d825      	bhi.n	80213e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	2b01      	cmp	r3, #1
 80213a0:	d008      	beq.n	80213b4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80213a2:	68fb      	ldr	r3, [r7, #12]
 80213a4:	2b02      	cmp	r3, #2
 80213a6:	d11f      	bne.n	80213e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80213a8:	4b25      	ldr	r3, [pc, #148]	@ (8021440 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80213aa:	613b      	str	r3, [r7, #16]
    break;
 80213ac:	e01f      	b.n	80213ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80213ae:	4b25      	ldr	r3, [pc, #148]	@ (8021444 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80213b0:	613b      	str	r3, [r7, #16]
    break;
 80213b2:	e01c      	b.n	80213ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80213b4:	4b21      	ldr	r3, [pc, #132]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	f003 0308 	and.w	r3, r3, #8
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d107      	bne.n	80213d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80213c0:	4b1e      	ldr	r3, [pc, #120]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80213c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80213c6:	0a1b      	lsrs	r3, r3, #8
 80213c8:	f003 030f 	and.w	r3, r3, #15
 80213cc:	617b      	str	r3, [r7, #20]
 80213ce:	e005      	b.n	80213dc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80213d0:	4b1a      	ldr	r3, [pc, #104]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	091b      	lsrs	r3, r3, #4
 80213d6:	f003 030f 	and.w	r3, r3, #15
 80213da:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80213dc:	4a1a      	ldr	r2, [pc, #104]	@ (8021448 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80213de:	697b      	ldr	r3, [r7, #20]
 80213e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80213e4:	613b      	str	r3, [r7, #16]
    break;
 80213e6:	e002      	b.n	80213ee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80213e8:	2300      	movs	r3, #0
 80213ea:	613b      	str	r3, [r7, #16]
    break;
 80213ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80213ee:	4b13      	ldr	r3, [pc, #76]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80213f0:	68db      	ldr	r3, [r3, #12]
 80213f2:	091b      	lsrs	r3, r3, #4
 80213f4:	f003 030f 	and.w	r3, r3, #15
 80213f8:	3301      	adds	r3, #1
 80213fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80213fc:	4b0f      	ldr	r3, [pc, #60]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80213fe:	68db      	ldr	r3, [r3, #12]
 8021400:	0a1b      	lsrs	r3, r3, #8
 8021402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021406:	693a      	ldr	r2, [r7, #16]
 8021408:	fb03 f202 	mul.w	r2, r3, r2
 802140c:	68bb      	ldr	r3, [r7, #8]
 802140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021412:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8021414:	4b09      	ldr	r3, [pc, #36]	@ (802143c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8021416:	68db      	ldr	r3, [r3, #12]
 8021418:	0e5b      	lsrs	r3, r3, #25
 802141a:	f003 0303 	and.w	r3, r3, #3
 802141e:	3301      	adds	r3, #1
 8021420:	005b      	lsls	r3, r3, #1
 8021422:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8021424:	693a      	ldr	r2, [r7, #16]
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	fbb2 f3f3 	udiv	r3, r2, r3
 802142c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 802142e:	683b      	ldr	r3, [r7, #0]
}
 8021430:	4618      	mov	r0, r3
 8021432:	371c      	adds	r7, #28
 8021434:	46bd      	mov	sp, r7
 8021436:	f85d 7b04 	ldr.w	r7, [sp], #4
 802143a:	4770      	bx	lr
 802143c:	40021000 	.word	0x40021000
 8021440:	00f42400 	.word	0x00f42400
 8021444:	007a1200 	.word	0x007a1200
 8021448:	080214f4 	.word	0x080214f4

0802144c <memset>:
 802144c:	4402      	add	r2, r0
 802144e:	4603      	mov	r3, r0
 8021450:	4293      	cmp	r3, r2
 8021452:	d100      	bne.n	8021456 <memset+0xa>
 8021454:	4770      	bx	lr
 8021456:	f803 1b01 	strb.w	r1, [r3], #1
 802145a:	e7f9      	b.n	8021450 <memset+0x4>

0802145c <__libc_init_array>:
 802145c:	b570      	push	{r4, r5, r6, lr}
 802145e:	4d0d      	ldr	r5, [pc, #52]	@ (8021494 <__libc_init_array+0x38>)
 8021460:	4c0d      	ldr	r4, [pc, #52]	@ (8021498 <__libc_init_array+0x3c>)
 8021462:	1b64      	subs	r4, r4, r5
 8021464:	10a4      	asrs	r4, r4, #2
 8021466:	2600      	movs	r6, #0
 8021468:	42a6      	cmp	r6, r4
 802146a:	d109      	bne.n	8021480 <__libc_init_array+0x24>
 802146c:	4d0b      	ldr	r5, [pc, #44]	@ (802149c <__libc_init_array+0x40>)
 802146e:	4c0c      	ldr	r4, [pc, #48]	@ (80214a0 <__libc_init_array+0x44>)
 8021470:	f000 f818 	bl	80214a4 <_init>
 8021474:	1b64      	subs	r4, r4, r5
 8021476:	10a4      	asrs	r4, r4, #2
 8021478:	2600      	movs	r6, #0
 802147a:	42a6      	cmp	r6, r4
 802147c:	d105      	bne.n	802148a <__libc_init_array+0x2e>
 802147e:	bd70      	pop	{r4, r5, r6, pc}
 8021480:	f855 3b04 	ldr.w	r3, [r5], #4
 8021484:	4798      	blx	r3
 8021486:	3601      	adds	r6, #1
 8021488:	e7ee      	b.n	8021468 <__libc_init_array+0xc>
 802148a:	f855 3b04 	ldr.w	r3, [r5], #4
 802148e:	4798      	blx	r3
 8021490:	3601      	adds	r6, #1
 8021492:	e7f2      	b.n	802147a <__libc_init_array+0x1e>
 8021494:	08021524 	.word	0x08021524
 8021498:	08021524 	.word	0x08021524
 802149c:	08021524 	.word	0x08021524
 80214a0:	08021528 	.word	0x08021528

080214a4 <_init>:
 80214a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214a6:	bf00      	nop
 80214a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214aa:	bc08      	pop	{r3}
 80214ac:	469e      	mov	lr, r3
 80214ae:	4770      	bx	lr

080214b0 <_fini>:
 80214b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214b2:	bf00      	nop
 80214b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80214b6:	bc08      	pop	{r3}
 80214b8:	469e      	mov	lr, r3
 80214ba:	4770      	bx	lr


lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013acc  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08023acc  08023acc  00023acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023cb4  08023cb4  00024070  2**0
                  CONTENTS
  4 .ARM          00000000  08023cb4  08023cb4  00024070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08023cb4  08023cb4  00024070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023cb4  08023cb4  00023cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023cb8  08023cb8  00023cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08023cbc  00024000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08023d2c  00024070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08023d2c  000241c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024070  2**0
                  CONTENTS, READONLY
 12 .debug_line   00007a80  00000000  00000000  000240a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000007d  00000000  00000000  0002bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009bc4  00000000  00000000  0002bb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e98  00000000  00000000  00035761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d0  00000000  00000000  00037600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f9eff  00000000  00000000  00037cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000445  00000000  00000000  00131bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028ce0  00000000  00000000  00132014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b8  00000000  00000000  0015acf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c0c  00000000  00000000  0015adac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000341f  00000000  00000000  0015c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0015fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000070 	.word	0x20000070
 801001c:	00000000 	.word	0x00000000
 8010020:	08023ab4 	.word	0x08023ab4

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000074 	.word	0x20000074
 801003c:	08023ab4 	.word	0x08023ab4
	...

08020000 <kalman>:



kalman:

	VSTMDB SP!, {s1-s6} // push temperory variables to the stack
 8020000:	ed6d 0a06 	vpush	{s1-s6}
	push {r1}
 8020004:	b402      	push	{r1}
	VLDR.f32 s1, [r0] //load q into first available floating register s1
 8020006:	edd0 0a00 	vldr	s1, [r0]
	VLDR.f32 s2, [r0, #4] //load r into floating register s2
 802000a:	ed90 1a01 	vldr	s2, [r0, #4]
	VLDR.f32 s3, [r0, #8] //load x into floating register s3
 802000e:	edd0 1a02 	vldr	s3, [r0, #8]
	VLDR.f32 s4, [r0, #12] //load p into floating register s4
 8020012:	ed90 2a03 	vldr	s4, [r0, #12]
	// we don't need to load k since it is changed but need to store it at [r0+16]


	VADD.f32 s4, s4, s1 // self.p = self.p + self.q
 8020016:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.f32 s1, s4, s2 // since q is not need we store (self.p + self.r here)
 802001a:	ee72 0a01 	vadd.f32	s1, s4, s2
	VDIV.f32 s1, s4, s1 // since the interm value is not needed k is stored in s1
 802001e:	eec2 0a20 	vdiv.f32	s1, s4, s1


	VSUB.f32 s5, s0, s3 // measurement - self.x
 8020022:	ee70 2a61 	vsub.f32	s5, s0, s3
	VMUL.f32 s5, s5, s1 // k is in s1 in line 13 so we do k(measurement - self.x)
 8020026:	ee62 2aa0 	vmul.f32	s5, s5, s1
	VADD.f32 s3, s3, s5 // self.x + k(measurement - self.x)
 802002a:	ee71 1aa2 	vadd.f32	s3, s3, s5


	VMOV.f32 s6, #0x3F800000 // move 1 into a temp variable
 802002e:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
	VSUB.f32 s6, s6, s1 // (1 - k)
 8020032:	ee33 3a60 	vsub.f32	s6, s6, s1
	VMUL.f32 s4, s4, s6 // (1-k) * p
 8020036:	ee22 2a03 	vmul.f32	s4, s4, s6

	VMRS r1, FPSCR // load FPSCR Register
 802003a:	eef1 1a10 	vmrs	r1, fpscr

	AND r1, r1, 0xF // check for errors using mask
 802003e:	f001 010f 	and.w	r1, r1, #15

	CMP r1, #0 // compare it with 0
 8020042:	2900      	cmp	r1, #0

	BEQ no_err // if equal to 0 update state and return x
 8020044:	d006      	beq.n	8020054 <no_err>

	MOV r1, #0
 8020046:	f04f 0100 	mov.w	r1, #0

	VMSR FPSCR, r1 //reset FPSCR
 802004a:	eee1 1a10 	vmsr	fpscr, r1
	VMOV.f32 s0, #-1
 802004e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

	B restore // restore
 8020052:	e007      	b.n	8020064 <restore>

08020054 <no_err>:


no_err:

	VSTR.f32 s4, [r0, #12] //store p into where it was loaded from
 8020054:	ed80 2a03 	vstr	s4, [r0, #12]
	VSTR.f32 s1, [r0, #16] //store k into where it was loaded from
 8020058:	edc0 0a04 	vstr	s1, [r0, #16]
	VSTR.f32 s3, [r0, #8] //store x into where it was loaded from
 802005c:	edc0 1a02 	vstr	s3, [r0, #8]
	VMOV.f32 s0, s3 //move x into s0
 8020060:	eeb0 0a61 	vmov.f32	s0, s3

08020064 <restore>:

restore:

	VLDMIA SP!, {s1-s6}
 8020064:	ecfd 0a06 	vpop	{s1-s6}
	pop {r1}
 8020068:	bc02      	pop	{r1}

	BX LR
 802006a:	4770      	bx	lr

0802006c <__aeabi_drsub>:
 802006c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8020070:	e002      	b.n	8020078 <__adddf3>
 8020072:	bf00      	nop

08020074 <__aeabi_dsub>:
 8020074:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08020078 <__adddf3>:
 8020078:	b530      	push	{r4, r5, lr}
 802007a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 802007e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020082:	ea94 0f05 	teq	r4, r5
 8020086:	bf08      	it	eq
 8020088:	ea90 0f02 	teqeq	r0, r2
 802008c:	bf1f      	itttt	ne
 802008e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020092:	ea55 0c02 	orrsne.w	ip, r5, r2
 8020096:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802009a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 802009e:	f000 80e2 	beq.w	8020266 <__adddf3+0x1ee>
 80200a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80200a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80200aa:	bfb8      	it	lt
 80200ac:	426d      	neglt	r5, r5
 80200ae:	dd0c      	ble.n	80200ca <__adddf3+0x52>
 80200b0:	442c      	add	r4, r5
 80200b2:	ea80 0202 	eor.w	r2, r0, r2
 80200b6:	ea81 0303 	eor.w	r3, r1, r3
 80200ba:	ea82 0000 	eor.w	r0, r2, r0
 80200be:	ea83 0101 	eor.w	r1, r3, r1
 80200c2:	ea80 0202 	eor.w	r2, r0, r2
 80200c6:	ea81 0303 	eor.w	r3, r1, r3
 80200ca:	2d36      	cmp	r5, #54	@ 0x36
 80200cc:	bf88      	it	hi
 80200ce:	bd30      	pophi	{r4, r5, pc}
 80200d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80200d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80200dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200e0:	d002      	beq.n	80200e8 <__adddf3+0x70>
 80200e2:	4240      	negs	r0, r0
 80200e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80200ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200f4:	d002      	beq.n	80200fc <__adddf3+0x84>
 80200f6:	4252      	negs	r2, r2
 80200f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200fc:	ea94 0f05 	teq	r4, r5
 8020100:	f000 80a7 	beq.w	8020252 <__adddf3+0x1da>
 8020104:	f1a4 0401 	sub.w	r4, r4, #1
 8020108:	f1d5 0e20 	rsbs	lr, r5, #32
 802010c:	db0d      	blt.n	802012a <__adddf3+0xb2>
 802010e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020112:	fa22 f205 	lsr.w	r2, r2, r5
 8020116:	1880      	adds	r0, r0, r2
 8020118:	f141 0100 	adc.w	r1, r1, #0
 802011c:	fa03 f20e 	lsl.w	r2, r3, lr
 8020120:	1880      	adds	r0, r0, r2
 8020122:	fa43 f305 	asr.w	r3, r3, r5
 8020126:	4159      	adcs	r1, r3
 8020128:	e00e      	b.n	8020148 <__adddf3+0xd0>
 802012a:	f1a5 0520 	sub.w	r5, r5, #32
 802012e:	f10e 0e20 	add.w	lr, lr, #32
 8020132:	2a01      	cmp	r2, #1
 8020134:	fa03 fc0e 	lsl.w	ip, r3, lr
 8020138:	bf28      	it	cs
 802013a:	f04c 0c02 	orrcs.w	ip, ip, #2
 802013e:	fa43 f305 	asr.w	r3, r3, r5
 8020142:	18c0      	adds	r0, r0, r3
 8020144:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8020148:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802014c:	d507      	bpl.n	802015e <__adddf3+0xe6>
 802014e:	f04f 0e00 	mov.w	lr, #0
 8020152:	f1dc 0c00 	rsbs	ip, ip, #0
 8020156:	eb7e 0000 	sbcs.w	r0, lr, r0
 802015a:	eb6e 0101 	sbc.w	r1, lr, r1
 802015e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8020162:	d31b      	bcc.n	802019c <__adddf3+0x124>
 8020164:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8020168:	d30c      	bcc.n	8020184 <__adddf3+0x10c>
 802016a:	0849      	lsrs	r1, r1, #1
 802016c:	ea5f 0030 	movs.w	r0, r0, rrx
 8020170:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020174:	f104 0401 	add.w	r4, r4, #1
 8020178:	ea4f 5244 	mov.w	r2, r4, lsl #21
 802017c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8020180:	f080 809a 	bcs.w	80202b8 <__adddf3+0x240>
 8020184:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8020188:	bf08      	it	eq
 802018a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 802018e:	f150 0000 	adcs.w	r0, r0, #0
 8020192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020196:	ea41 0105 	orr.w	r1, r1, r5
 802019a:	bd30      	pop	{r4, r5, pc}
 802019c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80201a0:	4140      	adcs	r0, r0
 80201a2:	eb41 0101 	adc.w	r1, r1, r1
 80201a6:	3c01      	subs	r4, #1
 80201a8:	bf28      	it	cs
 80201aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80201ae:	d2e9      	bcs.n	8020184 <__adddf3+0x10c>
 80201b0:	f091 0f00 	teq	r1, #0
 80201b4:	bf04      	itt	eq
 80201b6:	4601      	moveq	r1, r0
 80201b8:	2000      	moveq	r0, #0
 80201ba:	fab1 f381 	clz	r3, r1
 80201be:	bf08      	it	eq
 80201c0:	3320      	addeq	r3, #32
 80201c2:	f1a3 030b 	sub.w	r3, r3, #11
 80201c6:	f1b3 0220 	subs.w	r2, r3, #32
 80201ca:	da0c      	bge.n	80201e6 <__adddf3+0x16e>
 80201cc:	320c      	adds	r2, #12
 80201ce:	dd08      	ble.n	80201e2 <__adddf3+0x16a>
 80201d0:	f102 0c14 	add.w	ip, r2, #20
 80201d4:	f1c2 020c 	rsb	r2, r2, #12
 80201d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80201dc:	fa21 f102 	lsr.w	r1, r1, r2
 80201e0:	e00c      	b.n	80201fc <__adddf3+0x184>
 80201e2:	f102 0214 	add.w	r2, r2, #20
 80201e6:	bfd8      	it	le
 80201e8:	f1c2 0c20 	rsble	ip, r2, #32
 80201ec:	fa01 f102 	lsl.w	r1, r1, r2
 80201f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201f4:	bfdc      	itt	le
 80201f6:	ea41 010c 	orrle.w	r1, r1, ip
 80201fa:	4090      	lslle	r0, r2
 80201fc:	1ae4      	subs	r4, r4, r3
 80201fe:	bfa2      	ittt	ge
 8020200:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020204:	4329      	orrge	r1, r5
 8020206:	bd30      	popge	{r4, r5, pc}
 8020208:	ea6f 0404 	mvn.w	r4, r4
 802020c:	3c1f      	subs	r4, #31
 802020e:	da1c      	bge.n	802024a <__adddf3+0x1d2>
 8020210:	340c      	adds	r4, #12
 8020212:	dc0e      	bgt.n	8020232 <__adddf3+0x1ba>
 8020214:	f104 0414 	add.w	r4, r4, #20
 8020218:	f1c4 0220 	rsb	r2, r4, #32
 802021c:	fa20 f004 	lsr.w	r0, r0, r4
 8020220:	fa01 f302 	lsl.w	r3, r1, r2
 8020224:	ea40 0003 	orr.w	r0, r0, r3
 8020228:	fa21 f304 	lsr.w	r3, r1, r4
 802022c:	ea45 0103 	orr.w	r1, r5, r3
 8020230:	bd30      	pop	{r4, r5, pc}
 8020232:	f1c4 040c 	rsb	r4, r4, #12
 8020236:	f1c4 0220 	rsb	r2, r4, #32
 802023a:	fa20 f002 	lsr.w	r0, r0, r2
 802023e:	fa01 f304 	lsl.w	r3, r1, r4
 8020242:	ea40 0003 	orr.w	r0, r0, r3
 8020246:	4629      	mov	r1, r5
 8020248:	bd30      	pop	{r4, r5, pc}
 802024a:	fa21 f004 	lsr.w	r0, r1, r4
 802024e:	4629      	mov	r1, r5
 8020250:	bd30      	pop	{r4, r5, pc}
 8020252:	f094 0f00 	teq	r4, #0
 8020256:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 802025a:	bf06      	itte	eq
 802025c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8020260:	3401      	addeq	r4, #1
 8020262:	3d01      	subne	r5, #1
 8020264:	e74e      	b.n	8020104 <__adddf3+0x8c>
 8020266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802026a:	bf18      	it	ne
 802026c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020270:	d029      	beq.n	80202c6 <__adddf3+0x24e>
 8020272:	ea94 0f05 	teq	r4, r5
 8020276:	bf08      	it	eq
 8020278:	ea90 0f02 	teqeq	r0, r2
 802027c:	d005      	beq.n	802028a <__adddf3+0x212>
 802027e:	ea54 0c00 	orrs.w	ip, r4, r0
 8020282:	bf04      	itt	eq
 8020284:	4619      	moveq	r1, r3
 8020286:	4610      	moveq	r0, r2
 8020288:	bd30      	pop	{r4, r5, pc}
 802028a:	ea91 0f03 	teq	r1, r3
 802028e:	bf1e      	ittt	ne
 8020290:	2100      	movne	r1, #0
 8020292:	2000      	movne	r0, #0
 8020294:	bd30      	popne	{r4, r5, pc}
 8020296:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802029a:	d105      	bne.n	80202a8 <__adddf3+0x230>
 802029c:	0040      	lsls	r0, r0, #1
 802029e:	4149      	adcs	r1, r1
 80202a0:	bf28      	it	cs
 80202a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80202a6:	bd30      	pop	{r4, r5, pc}
 80202a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80202ac:	bf3c      	itt	cc
 80202ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80202b2:	bd30      	popcc	{r4, r5, pc}
 80202b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80202b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80202bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80202c0:	f04f 0000 	mov.w	r0, #0
 80202c4:	bd30      	pop	{r4, r5, pc}
 80202c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ca:	bf1a      	itte	ne
 80202cc:	4619      	movne	r1, r3
 80202ce:	4610      	movne	r0, r2
 80202d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202d4:	bf1c      	itt	ne
 80202d6:	460b      	movne	r3, r1
 80202d8:	4602      	movne	r2, r0
 80202da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202de:	bf06      	itte	eq
 80202e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202e4:	ea91 0f03 	teqeq	r1, r3
 80202e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80202ec:	bd30      	pop	{r4, r5, pc}
 80202ee:	bf00      	nop

080202f0 <__aeabi_ui2d>:
 80202f0:	f090 0f00 	teq	r0, #0
 80202f4:	bf04      	itt	eq
 80202f6:	2100      	moveq	r1, #0
 80202f8:	4770      	bxeq	lr
 80202fa:	b530      	push	{r4, r5, lr}
 80202fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020300:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020304:	f04f 0500 	mov.w	r5, #0
 8020308:	f04f 0100 	mov.w	r1, #0
 802030c:	e750      	b.n	80201b0 <__adddf3+0x138>
 802030e:	bf00      	nop

08020310 <__aeabi_i2d>:
 8020310:	f090 0f00 	teq	r0, #0
 8020314:	bf04      	itt	eq
 8020316:	2100      	moveq	r1, #0
 8020318:	4770      	bxeq	lr
 802031a:	b530      	push	{r4, r5, lr}
 802031c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020320:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020324:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8020328:	bf48      	it	mi
 802032a:	4240      	negmi	r0, r0
 802032c:	f04f 0100 	mov.w	r1, #0
 8020330:	e73e      	b.n	80201b0 <__adddf3+0x138>
 8020332:	bf00      	nop

08020334 <__aeabi_f2d>:
 8020334:	0042      	lsls	r2, r0, #1
 8020336:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802033a:	ea4f 0131 	mov.w	r1, r1, rrx
 802033e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020342:	bf1f      	itttt	ne
 8020344:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8020348:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 802034c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8020350:	4770      	bxne	lr
 8020352:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8020356:	bf08      	it	eq
 8020358:	4770      	bxeq	lr
 802035a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 802035e:	bf04      	itt	eq
 8020360:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8020364:	4770      	bxeq	lr
 8020366:	b530      	push	{r4, r5, lr}
 8020368:	f44f 7460 	mov.w	r4, #896	@ 0x380
 802036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8020370:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020374:	e71c      	b.n	80201b0 <__adddf3+0x138>
 8020376:	bf00      	nop

08020378 <__aeabi_ul2d>:
 8020378:	ea50 0201 	orrs.w	r2, r0, r1
 802037c:	bf08      	it	eq
 802037e:	4770      	bxeq	lr
 8020380:	b530      	push	{r4, r5, lr}
 8020382:	f04f 0500 	mov.w	r5, #0
 8020386:	e00a      	b.n	802039e <__aeabi_l2d+0x16>

08020388 <__aeabi_l2d>:
 8020388:	ea50 0201 	orrs.w	r2, r0, r1
 802038c:	bf08      	it	eq
 802038e:	4770      	bxeq	lr
 8020390:	b530      	push	{r4, r5, lr}
 8020392:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8020396:	d502      	bpl.n	802039e <__aeabi_l2d+0x16>
 8020398:	4240      	negs	r0, r0
 802039a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802039e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80203a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80203a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80203aa:	f43f aed8 	beq.w	802015e <__adddf3+0xe6>
 80203ae:	f04f 0203 	mov.w	r2, #3
 80203b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203b6:	bf18      	it	ne
 80203b8:	3203      	addne	r2, #3
 80203ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203be:	bf18      	it	ne
 80203c0:	3203      	addne	r2, #3
 80203c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80203c6:	f1c2 0320 	rsb	r3, r2, #32
 80203ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80203ce:	fa20 f002 	lsr.w	r0, r0, r2
 80203d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80203d6:	ea40 000e 	orr.w	r0, r0, lr
 80203da:	fa21 f102 	lsr.w	r1, r1, r2
 80203de:	4414      	add	r4, r2
 80203e0:	e6bd      	b.n	802015e <__adddf3+0xe6>
 80203e2:	bf00      	nop

080203e4 <__aeabi_dmul>:
 80203e4:	b570      	push	{r4, r5, r6, lr}
 80203e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80203ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80203ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203f2:	bf1d      	ittte	ne
 80203f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203f8:	ea94 0f0c 	teqne	r4, ip
 80203fc:	ea95 0f0c 	teqne	r5, ip
 8020400:	f000 f8de 	bleq	80205c0 <__aeabi_dmul+0x1dc>
 8020404:	442c      	add	r4, r5
 8020406:	ea81 0603 	eor.w	r6, r1, r3
 802040a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 802040e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020412:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8020416:	bf18      	it	ne
 8020418:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 802041c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020420:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8020424:	d038      	beq.n	8020498 <__aeabi_dmul+0xb4>
 8020426:	fba0 ce02 	umull	ip, lr, r0, r2
 802042a:	f04f 0500 	mov.w	r5, #0
 802042e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020432:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8020436:	fbe0 e503 	umlal	lr, r5, r0, r3
 802043a:	f04f 0600 	mov.w	r6, #0
 802043e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020442:	f09c 0f00 	teq	ip, #0
 8020446:	bf18      	it	ne
 8020448:	f04e 0e01 	orrne.w	lr, lr, #1
 802044c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8020450:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8020454:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8020458:	d204      	bcs.n	8020464 <__aeabi_dmul+0x80>
 802045a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 802045e:	416d      	adcs	r5, r5
 8020460:	eb46 0606 	adc.w	r6, r6, r6
 8020464:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8020468:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 802046c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020470:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020474:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8020478:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 802047c:	bf88      	it	hi
 802047e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020482:	d81e      	bhi.n	80204c2 <__aeabi_dmul+0xde>
 8020484:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8020488:	bf08      	it	eq
 802048a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 802048e:	f150 0000 	adcs.w	r0, r0, #0
 8020492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8020496:	bd70      	pop	{r4, r5, r6, pc}
 8020498:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 802049c:	ea46 0101 	orr.w	r1, r6, r1
 80204a0:	ea40 0002 	orr.w	r0, r0, r2
 80204a4:	ea81 0103 	eor.w	r1, r1, r3
 80204a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80204ac:	bfc2      	ittt	gt
 80204ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80204b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80204b6:	bd70      	popgt	{r4, r5, r6, pc}
 80204b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80204bc:	f04f 0e00 	mov.w	lr, #0
 80204c0:	3c01      	subs	r4, #1
 80204c2:	f300 80ab 	bgt.w	802061c <__aeabi_dmul+0x238>
 80204c6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80204ca:	bfde      	ittt	le
 80204cc:	2000      	movle	r0, #0
 80204ce:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80204d2:	bd70      	pople	{r4, r5, r6, pc}
 80204d4:	f1c4 0400 	rsb	r4, r4, #0
 80204d8:	3c20      	subs	r4, #32
 80204da:	da35      	bge.n	8020548 <__aeabi_dmul+0x164>
 80204dc:	340c      	adds	r4, #12
 80204de:	dc1b      	bgt.n	8020518 <__aeabi_dmul+0x134>
 80204e0:	f104 0414 	add.w	r4, r4, #20
 80204e4:	f1c4 0520 	rsb	r5, r4, #32
 80204e8:	fa00 f305 	lsl.w	r3, r0, r5
 80204ec:	fa20 f004 	lsr.w	r0, r0, r4
 80204f0:	fa01 f205 	lsl.w	r2, r1, r5
 80204f4:	ea40 0002 	orr.w	r0, r0, r2
 80204f8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80204fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8020500:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020504:	fa21 f604 	lsr.w	r6, r1, r4
 8020508:	eb42 0106 	adc.w	r1, r2, r6
 802050c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020510:	bf08      	it	eq
 8020512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020516:	bd70      	pop	{r4, r5, r6, pc}
 8020518:	f1c4 040c 	rsb	r4, r4, #12
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f304 	lsl.w	r3, r0, r4
 8020524:	fa20 f005 	lsr.w	r0, r0, r5
 8020528:	fa01 f204 	lsl.w	r2, r1, r4
 802052c:	ea40 0002 	orr.w	r0, r0, r2
 8020530:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020534:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020538:	f141 0100 	adc.w	r1, r1, #0
 802053c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020540:	bf08      	it	eq
 8020542:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020546:	bd70      	pop	{r4, r5, r6, pc}
 8020548:	f1c4 0520 	rsb	r5, r4, #32
 802054c:	fa00 f205 	lsl.w	r2, r0, r5
 8020550:	ea4e 0e02 	orr.w	lr, lr, r2
 8020554:	fa20 f304 	lsr.w	r3, r0, r4
 8020558:	fa01 f205 	lsl.w	r2, r1, r5
 802055c:	ea43 0302 	orr.w	r3, r3, r2
 8020560:	fa21 f004 	lsr.w	r0, r1, r4
 8020564:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020568:	fa21 f204 	lsr.w	r2, r1, r4
 802056c:	ea20 0002 	bic.w	r0, r0, r2
 8020570:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020574:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020578:	bf08      	it	eq
 802057a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802057e:	bd70      	pop	{r4, r5, r6, pc}
 8020580:	f094 0f00 	teq	r4, #0
 8020584:	d10f      	bne.n	80205a6 <__aeabi_dmul+0x1c2>
 8020586:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 802058a:	0040      	lsls	r0, r0, #1
 802058c:	eb41 0101 	adc.w	r1, r1, r1
 8020590:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020594:	bf08      	it	eq
 8020596:	3c01      	subeq	r4, #1
 8020598:	d0f7      	beq.n	802058a <__aeabi_dmul+0x1a6>
 802059a:	ea41 0106 	orr.w	r1, r1, r6
 802059e:	f095 0f00 	teq	r5, #0
 80205a2:	bf18      	it	ne
 80205a4:	4770      	bxne	lr
 80205a6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80205aa:	0052      	lsls	r2, r2, #1
 80205ac:	eb43 0303 	adc.w	r3, r3, r3
 80205b0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80205b4:	bf08      	it	eq
 80205b6:	3d01      	subeq	r5, #1
 80205b8:	d0f7      	beq.n	80205aa <__aeabi_dmul+0x1c6>
 80205ba:	ea43 0306 	orr.w	r3, r3, r6
 80205be:	4770      	bx	lr
 80205c0:	ea94 0f0c 	teq	r4, ip
 80205c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80205c8:	bf18      	it	ne
 80205ca:	ea95 0f0c 	teqne	r5, ip
 80205ce:	d00c      	beq.n	80205ea <__aeabi_dmul+0x206>
 80205d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205d4:	bf18      	it	ne
 80205d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205da:	d1d1      	bne.n	8020580 <__aeabi_dmul+0x19c>
 80205dc:	ea81 0103 	eor.w	r1, r1, r3
 80205e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80205e4:	f04f 0000 	mov.w	r0, #0
 80205e8:	bd70      	pop	{r4, r5, r6, pc}
 80205ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205ee:	bf06      	itte	eq
 80205f0:	4610      	moveq	r0, r2
 80205f2:	4619      	moveq	r1, r3
 80205f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205f8:	d019      	beq.n	802062e <__aeabi_dmul+0x24a>
 80205fa:	ea94 0f0c 	teq	r4, ip
 80205fe:	d102      	bne.n	8020606 <__aeabi_dmul+0x222>
 8020600:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020604:	d113      	bne.n	802062e <__aeabi_dmul+0x24a>
 8020606:	ea95 0f0c 	teq	r5, ip
 802060a:	d105      	bne.n	8020618 <__aeabi_dmul+0x234>
 802060c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020610:	bf1c      	itt	ne
 8020612:	4610      	movne	r0, r2
 8020614:	4619      	movne	r1, r3
 8020616:	d10a      	bne.n	802062e <__aeabi_dmul+0x24a>
 8020618:	ea81 0103 	eor.w	r1, r1, r3
 802061c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8020620:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020628:	f04f 0000 	mov.w	r0, #0
 802062c:	bd70      	pop	{r4, r5, r6, pc}
 802062e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8020632:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8020636:	bd70      	pop	{r4, r5, r6, pc}

08020638 <__aeabi_ddiv>:
 8020638:	b570      	push	{r4, r5, r6, lr}
 802063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 802063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8020642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020646:	bf1d      	ittte	ne
 8020648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802064c:	ea94 0f0c 	teqne	r4, ip
 8020650:	ea95 0f0c 	teqne	r5, ip
 8020654:	f000 f8a7 	bleq	80207a6 <__aeabi_ddiv+0x16e>
 8020658:	eba4 0405 	sub.w	r4, r4, r5
 802065c:	ea81 0e03 	eor.w	lr, r1, r3
 8020660:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020664:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8020668:	f000 8088 	beq.w	802077c <__aeabi_ddiv+0x144>
 802066c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020670:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8020674:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8020678:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 802067c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020680:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020684:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8020688:	ea4f 2600 	mov.w	r6, r0, lsl #8
 802068c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8020690:	429d      	cmp	r5, r3
 8020692:	bf08      	it	eq
 8020694:	4296      	cmpeq	r6, r2
 8020696:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 802069a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 802069e:	d202      	bcs.n	80206a6 <__aeabi_ddiv+0x6e>
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	1ab6      	subs	r6, r6, r2
 80206a8:	eb65 0503 	sbc.w	r5, r5, r3
 80206ac:	085b      	lsrs	r3, r3, #1
 80206ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80206b2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80206b6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80206ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80206be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c2:	bf22      	ittt	cs
 80206c4:	1ab6      	subcs	r6, r6, r2
 80206c6:	4675      	movcs	r5, lr
 80206c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80206cc:	085b      	lsrs	r3, r3, #1
 80206ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80206d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206da:	bf22      	ittt	cs
 80206dc:	1ab6      	subcs	r6, r6, r2
 80206de:	4675      	movcs	r5, lr
 80206e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206e4:	085b      	lsrs	r3, r3, #1
 80206e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80206ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206f2:	bf22      	ittt	cs
 80206f4:	1ab6      	subcs	r6, r6, r2
 80206f6:	4675      	movcs	r5, lr
 80206f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206fc:	085b      	lsrs	r3, r3, #1
 80206fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8020702:	ebb6 0e02 	subs.w	lr, r6, r2
 8020706:	eb75 0e03 	sbcs.w	lr, r5, r3
 802070a:	bf22      	ittt	cs
 802070c:	1ab6      	subcs	r6, r6, r2
 802070e:	4675      	movcs	r5, lr
 8020710:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020714:	ea55 0e06 	orrs.w	lr, r5, r6
 8020718:	d018      	beq.n	802074c <__aeabi_ddiv+0x114>
 802071a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 802071e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020722:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8020726:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802072a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 802072e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020732:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8020736:	d1c0      	bne.n	80206ba <__aeabi_ddiv+0x82>
 8020738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 802073c:	d10b      	bne.n	8020756 <__aeabi_ddiv+0x11e>
 802073e:	ea41 0100 	orr.w	r1, r1, r0
 8020742:	f04f 0000 	mov.w	r0, #0
 8020746:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802074a:	e7b6      	b.n	80206ba <__aeabi_ddiv+0x82>
 802074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8020750:	bf04      	itt	eq
 8020752:	4301      	orreq	r1, r0
 8020754:	2000      	moveq	r0, #0
 8020756:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 802075a:	bf88      	it	hi
 802075c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8020760:	f63f aeaf 	bhi.w	80204c2 <__aeabi_dmul+0xde>
 8020764:	ebb5 0c03 	subs.w	ip, r5, r3
 8020768:	bf04      	itt	eq
 802076a:	ebb6 0c02 	subseq.w	ip, r6, r2
 802076e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020772:	f150 0000 	adcs.w	r0, r0, #0
 8020776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802077a:	bd70      	pop	{r4, r5, r6, pc}
 802077c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8020780:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020784:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8020788:	bfc2      	ittt	gt
 802078a:	ebd4 050c 	rsbsgt	r5, r4, ip
 802078e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020792:	bd70      	popgt	{r4, r5, r6, pc}
 8020794:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8020798:	f04f 0e00 	mov.w	lr, #0
 802079c:	3c01      	subs	r4, #1
 802079e:	e690      	b.n	80204c2 <__aeabi_dmul+0xde>
 80207a0:	ea45 0e06 	orr.w	lr, r5, r6
 80207a4:	e68d      	b.n	80204c2 <__aeabi_dmul+0xde>
 80207a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207aa:	ea94 0f0c 	teq	r4, ip
 80207ae:	bf08      	it	eq
 80207b0:	ea95 0f0c 	teqeq	r5, ip
 80207b4:	f43f af3b 	beq.w	802062e <__aeabi_dmul+0x24a>
 80207b8:	ea94 0f0c 	teq	r4, ip
 80207bc:	d10a      	bne.n	80207d4 <__aeabi_ddiv+0x19c>
 80207be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80207c2:	f47f af34 	bne.w	802062e <__aeabi_dmul+0x24a>
 80207c6:	ea95 0f0c 	teq	r5, ip
 80207ca:	f47f af25 	bne.w	8020618 <__aeabi_dmul+0x234>
 80207ce:	4610      	mov	r0, r2
 80207d0:	4619      	mov	r1, r3
 80207d2:	e72c      	b.n	802062e <__aeabi_dmul+0x24a>
 80207d4:	ea95 0f0c 	teq	r5, ip
 80207d8:	d106      	bne.n	80207e8 <__aeabi_ddiv+0x1b0>
 80207da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207de:	f43f aefd 	beq.w	80205dc <__aeabi_dmul+0x1f8>
 80207e2:	4610      	mov	r0, r2
 80207e4:	4619      	mov	r1, r3
 80207e6:	e722      	b.n	802062e <__aeabi_dmul+0x24a>
 80207e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207ec:	bf18      	it	ne
 80207ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207f2:	f47f aec5 	bne.w	8020580 <__aeabi_dmul+0x19c>
 80207f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207fa:	f47f af0d 	bne.w	8020618 <__aeabi_dmul+0x234>
 80207fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020802:	f47f aeeb 	bne.w	80205dc <__aeabi_dmul+0x1f8>
 8020806:	e712      	b.n	802062e <__aeabi_dmul+0x24a>

08020808 <__gedf2>:
 8020808:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 802080c:	e006      	b.n	802081c <__cmpdf2+0x4>
 802080e:	bf00      	nop

08020810 <__ledf2>:
 8020810:	f04f 0c01 	mov.w	ip, #1
 8020814:	e002      	b.n	802081c <__cmpdf2+0x4>
 8020816:	bf00      	nop

08020818 <__cmpdf2>:
 8020818:	f04f 0c01 	mov.w	ip, #1
 802081c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020828:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802082c:	bf18      	it	ne
 802082e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020832:	d01b      	beq.n	802086c <__cmpdf2+0x54>
 8020834:	b001      	add	sp, #4
 8020836:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802083a:	bf0c      	ite	eq
 802083c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020840:	ea91 0f03 	teqne	r1, r3
 8020844:	bf02      	ittt	eq
 8020846:	ea90 0f02 	teqeq	r0, r2
 802084a:	2000      	moveq	r0, #0
 802084c:	4770      	bxeq	lr
 802084e:	f110 0f00 	cmn.w	r0, #0
 8020852:	ea91 0f03 	teq	r1, r3
 8020856:	bf58      	it	pl
 8020858:	4299      	cmppl	r1, r3
 802085a:	bf08      	it	eq
 802085c:	4290      	cmpeq	r0, r2
 802085e:	bf2c      	ite	cs
 8020860:	17d8      	asrcs	r0, r3, #31
 8020862:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020866:	f040 0001 	orr.w	r0, r0, #1
 802086a:	4770      	bx	lr
 802086c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020874:	d102      	bne.n	802087c <__cmpdf2+0x64>
 8020876:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802087a:	d107      	bne.n	802088c <__cmpdf2+0x74>
 802087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020884:	d1d6      	bne.n	8020834 <__cmpdf2+0x1c>
 8020886:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802088a:	d0d3      	beq.n	8020834 <__cmpdf2+0x1c>
 802088c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020890:	4770      	bx	lr
 8020892:	bf00      	nop

08020894 <__aeabi_cdrcmple>:
 8020894:	4684      	mov	ip, r0
 8020896:	4610      	mov	r0, r2
 8020898:	4662      	mov	r2, ip
 802089a:	468c      	mov	ip, r1
 802089c:	4619      	mov	r1, r3
 802089e:	4663      	mov	r3, ip
 80208a0:	e000      	b.n	80208a4 <__aeabi_cdcmpeq>
 80208a2:	bf00      	nop

080208a4 <__aeabi_cdcmpeq>:
 80208a4:	b501      	push	{r0, lr}
 80208a6:	f7ff ffb7 	bl	8020818 <__cmpdf2>
 80208aa:	2800      	cmp	r0, #0
 80208ac:	bf48      	it	mi
 80208ae:	f110 0f00 	cmnmi.w	r0, #0
 80208b2:	bd01      	pop	{r0, pc}

080208b4 <__aeabi_dcmpeq>:
 80208b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b8:	f7ff fff4 	bl	80208a4 <__aeabi_cdcmpeq>
 80208bc:	bf0c      	ite	eq
 80208be:	2001      	moveq	r0, #1
 80208c0:	2000      	movne	r0, #0
 80208c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c6:	bf00      	nop

080208c8 <__aeabi_dcmplt>:
 80208c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208cc:	f7ff ffea 	bl	80208a4 <__aeabi_cdcmpeq>
 80208d0:	bf34      	ite	cc
 80208d2:	2001      	movcc	r0, #1
 80208d4:	2000      	movcs	r0, #0
 80208d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208da:	bf00      	nop

080208dc <__aeabi_dcmple>:
 80208dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208e0:	f7ff ffe0 	bl	80208a4 <__aeabi_cdcmpeq>
 80208e4:	bf94      	ite	ls
 80208e6:	2001      	movls	r0, #1
 80208e8:	2000      	movhi	r0, #0
 80208ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ee:	bf00      	nop

080208f0 <__aeabi_dcmpge>:
 80208f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208f4:	f7ff ffce 	bl	8020894 <__aeabi_cdrcmple>
 80208f8:	bf94      	ite	ls
 80208fa:	2001      	movls	r0, #1
 80208fc:	2000      	movhi	r0, #0
 80208fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020902:	bf00      	nop

08020904 <__aeabi_dcmpgt>:
 8020904:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020908:	f7ff ffc4 	bl	8020894 <__aeabi_cdrcmple>
 802090c:	bf34      	ite	cc
 802090e:	2001      	movcc	r0, #1
 8020910:	2000      	movcs	r0, #0
 8020912:	f85d fb08 	ldr.w	pc, [sp], #8
 8020916:	bf00      	nop

08020918 <__aeabi_dcmpun>:
 8020918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020920:	d102      	bne.n	8020928 <__aeabi_dcmpun+0x10>
 8020922:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020926:	d10a      	bne.n	802093e <__aeabi_dcmpun+0x26>
 8020928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 802092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020930:	d102      	bne.n	8020938 <__aeabi_dcmpun+0x20>
 8020932:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020936:	d102      	bne.n	802093e <__aeabi_dcmpun+0x26>
 8020938:	f04f 0000 	mov.w	r0, #0
 802093c:	4770      	bx	lr
 802093e:	f04f 0001 	mov.w	r0, #1
 8020942:	4770      	bx	lr

08020944 <__aeabi_d2f>:
 8020944:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 802094c:	bf24      	itt	cs
 802094e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8020952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8020956:	d90d      	bls.n	8020974 <__aeabi_d2f+0x30>
 8020958:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 802095c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020964:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8020968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 802096c:	bf08      	it	eq
 802096e:	f020 0001 	biceq.w	r0, r0, #1
 8020972:	4770      	bx	lr
 8020974:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8020978:	d121      	bne.n	80209be <__aeabi_d2f+0x7a>
 802097a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 802097e:	bfbc      	itt	lt
 8020980:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8020984:	4770      	bxlt	lr
 8020986:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 802098a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 802098e:	f1c2 0218 	rsb	r2, r2, #24
 8020992:	f1c2 0c20 	rsb	ip, r2, #32
 8020996:	fa10 f30c 	lsls.w	r3, r0, ip
 802099a:	fa20 f002 	lsr.w	r0, r0, r2
 802099e:	bf18      	it	ne
 80209a0:	f040 0001 	orrne.w	r0, r0, #1
 80209a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209ac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209b0:	ea40 000c 	orr.w	r0, r0, ip
 80209b4:	fa23 f302 	lsr.w	r3, r3, r2
 80209b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80209bc:	e7cc      	b.n	8020958 <__aeabi_d2f+0x14>
 80209be:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80209c2:	d107      	bne.n	80209d4 <__aeabi_d2f+0x90>
 80209c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80209c8:	bf1e      	ittt	ne
 80209ca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80209ce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80209d2:	4770      	bxne	lr
 80209d4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80209d8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80209dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80209e0:	4770      	bx	lr
 80209e2:	bf00      	nop

080209e4 <updateC>:


//-------------------------- KALMAN STATE UPDATE -----------------------------//


float updateC(kalman_state* kstate, float measurement) {
 80209e4:	b480      	push	{r7}
 80209e6:	b089      	sub	sp, #36	@ 0x24
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	ed87 0a00 	vstr	s0, [r7]
	float temp_p = kstate->p + kstate->q;
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	edd3 7a00 	vldr	s15, [r3]
 80209fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a00:	edc7 7a07 	vstr	s15, [r7, #28]
	float temp_k = temp_p / (temp_p + kstate->r);
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	ed93 7a01 	vldr	s14, [r3, #4]
 8020a0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8020a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8020a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020a1a:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp_x = kstate->x + temp_k * (measurement - kstate->x);
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	ed93 7a02 	vldr	s14, [r3, #8]
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	edd3 7a02 	vldr	s15, [r3, #8]
 8020a2a:	edd7 6a00 	vldr	s13, [r7]
 8020a2e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8020a32:	edd7 7a06 	vldr	s15, [r7, #24]
 8020a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a3e:	edc7 7a05 	vstr	s15, [r7, #20]
	float temp_p_updated = (1 - temp_k) * temp_p;
 8020a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020a46:	edd7 7a06 	vldr	s15, [r7, #24]
 8020a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020a4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8020a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020a56:	edc7 7a04 	vstr	s15, [r7, #16]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8020a5a:	eef1 3a10 	vmrs	r3, fpscr

	// Step 2: Update kstate based on a condition
	// check for error
	uint32_t err =  __get_FPSCR();
 8020a5e:	60fb      	str	r3, [r7, #12]
	err = err & 0x0000000F;
 8020a60:	68fb      	ldr	r3, [r7, #12]
 8020a62:	f003 030f 	and.w	r3, r3, #15
 8020a66:	60fb      	str	r3, [r7, #12]
 8020a68:	2300      	movs	r3, #0
 8020a6a:	60bb      	str	r3, [r7, #8]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8020a6c:	68bb      	ldr	r3, [r7, #8]
 8020a6e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
#endif
#else
  (void)fpscr;
#endif
}
 8020a72:	bf00      	nop
	__set_FPSCR(0);

	if (err > 0) {
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d001      	beq.n	8020a7e <updateC+0x9a>
		return -1;
 8020a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8020aac <updateC+0xc8>)
 8020a7c:	e00d      	b.n	8020a9a <updateC+0xb6>
	}

	kstate->p = temp_p;
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	69fa      	ldr	r2, [r7, #28]
 8020a82:	60da      	str	r2, [r3, #12]
	kstate->k = temp_k;
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	69ba      	ldr	r2, [r7, #24]
 8020a88:	611a      	str	r2, [r3, #16]
	kstate->x = temp_x;
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	697a      	ldr	r2, [r7, #20]
 8020a8e:	609a      	str	r2, [r3, #8]
	kstate->p = temp_p_updated;
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	693a      	ldr	r2, [r7, #16]
 8020a94:	60da      	str	r2, [r3, #12]

	return kstate->x;
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	689b      	ldr	r3, [r3, #8]
}
 8020a9a:	ee07 3a90 	vmov	s15, r3
 8020a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8020aa2:	3724      	adds	r7, #36	@ 0x24
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aaa:	4770      	bx	lr
 8020aac:	bf800000 	.word	0xbf800000

08020ab0 <updateCMSIS>:

float updateCMSIS(kalman_state* kstate, float measurement) {
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b08a      	sub	sp, #40	@ 0x28
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
 8020ab8:	ed87 0a00 	vstr	s0, [r7]

    float32_t temp1, temp2, temp_p, temp_k, temp_x;
    float32_t k = 1.0f;
 8020abc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8020ac0:	60bb      	str	r3, [r7, #8]

	arm_add_f32(&kstate->p, &kstate->q, &temp_p, 1); // p = p + q
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	f103 000c 	add.w	r0, r3, #12
 8020ac8:	6879      	ldr	r1, [r7, #4]
 8020aca:	f107 0214 	add.w	r2, r7, #20
 8020ace:	2301      	movs	r3, #1
 8020ad0:	f002 fe2e 	bl	8023730 <arm_add_f32>
	arm_add_f32(&temp_p, &kstate->r, &temp1, 1); // temp1 = p + r
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	1d19      	adds	r1, r3, #4
 8020ad8:	f107 021c 	add.w	r2, r7, #28
 8020adc:	f107 0014 	add.w	r0, r7, #20
 8020ae0:	2301      	movs	r3, #1
 8020ae2:	f002 fe25 	bl	8023730 <arm_add_f32>
	temp_k = temp_p / temp1;  // k = p / (p + r)
 8020ae6:	edd7 6a05 	vldr	s13, [r7, #20]
 8020aea:	ed97 7a07 	vldr	s14, [r7, #28]
 8020aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020af2:	edc7 7a04 	vstr	s15, [r7, #16]
	arm_sub_f32(&measurement, &kstate->x, &temp1, 1); // temp1 = (measurement - x)
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	f103 0108 	add.w	r1, r3, #8
 8020afc:	f107 021c 	add.w	r2, r7, #28
 8020b00:	4638      	mov	r0, r7
 8020b02:	2301      	movs	r3, #1
 8020b04:	f002 fd60 	bl	80235c8 <arm_sub_f32>
	arm_mult_f32(&temp_k, &temp1, &temp2, 1); // temp2 = k * (measurement - x)
 8020b08:	f107 0218 	add.w	r2, r7, #24
 8020b0c:	f107 011c 	add.w	r1, r7, #28
 8020b10:	f107 0010 	add.w	r0, r7, #16
 8020b14:	2301      	movs	r3, #1
 8020b16:	f002 fdb1 	bl	802367c <arm_mult_f32>
	arm_add_f32(&kstate->x, &temp2, &temp_x, 1); // x = x + k * (measurement - x)
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	f103 0008 	add.w	r0, r3, #8
 8020b20:	f107 020c 	add.w	r2, r7, #12
 8020b24:	f107 0118 	add.w	r1, r7, #24
 8020b28:	2301      	movs	r3, #1
 8020b2a:	f002 fe01 	bl	8023730 <arm_add_f32>
	arm_sub_f32(&k, &temp_k, &temp1, 1); // temp1 = (1 - k)
 8020b2e:	f107 021c 	add.w	r2, r7, #28
 8020b32:	f107 0110 	add.w	r1, r7, #16
 8020b36:	f107 0008 	add.w	r0, r7, #8
 8020b3a:	2301      	movs	r3, #1
 8020b3c:	f002 fd44 	bl	80235c8 <arm_sub_f32>
	arm_mult_f32(&temp1, &temp_p, &temp_p, 1); // p = (1 - k) * p
 8020b40:	f107 0214 	add.w	r2, r7, #20
 8020b44:	f107 0114 	add.w	r1, r7, #20
 8020b48:	f107 001c 	add.w	r0, r7, #28
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	f002 fd95 	bl	802367c <arm_mult_f32>
  return __builtin_arm_get_fpscr();
 8020b52:	eef1 3a10 	vmrs	r3, fpscr

	// check for error
	uint32_t err =  __get_FPSCR();
 8020b56:	627b      	str	r3, [r7, #36]	@ 0x24
	err = err & 0x0000000F;
 8020b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b5a:	f003 030f 	and.w	r3, r3, #15
 8020b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020b60:	2300      	movs	r3, #0
 8020b62:	623b      	str	r3, [r7, #32]
  __builtin_arm_set_fpscr(fpscr);
 8020b64:	6a3b      	ldr	r3, [r7, #32]
 8020b66:	eee1 3a10 	vmsr	fpscr, r3
}
 8020b6a:	bf00      	nop
	__set_FPSCR(0);

	if (err > 0) {
 8020b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d001      	beq.n	8020b76 <updateCMSIS+0xc6>
		return -1;
 8020b72:	4b0b      	ldr	r3, [pc, #44]	@ (8020ba0 <updateCMSIS+0xf0>)
 8020b74:	e00d      	b.n	8020b92 <updateCMSIS+0xe2>
	}

	kstate->p = temp_p;
 8020b76:	697a      	ldr	r2, [r7, #20]
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	60da      	str	r2, [r3, #12]
	kstate->k = temp_k;
 8020b7c:	693a      	ldr	r2, [r7, #16]
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	611a      	str	r2, [r3, #16]
	kstate->x = temp_x;
 8020b82:	68fa      	ldr	r2, [r7, #12]
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	609a      	str	r2, [r3, #8]
	kstate->p = temp_p;
 8020b88:	697a      	ldr	r2, [r7, #20]
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	60da      	str	r2, [r3, #12]

    return kstate->x;
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	689b      	ldr	r3, [r3, #8]
}
 8020b92:	ee07 3a90 	vmov	s15, r3
 8020b96:	eeb0 0a67 	vmov.f32	s0, s15
 8020b9a:	3728      	adds	r7, #40	@ 0x28
 8020b9c:	46bd      	mov	sp, r7
 8020b9e:	bd80      	pop	{r7, pc}
 8020ba0:	bf800000 	.word	0xbf800000

08020ba4 <KalmanfilterARM>:


//---------------------------- KALMAN FILTERS -------------------------------//


int KalmanfilterARM(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8020ba4:	b590      	push	{r4, r7, lr}
 8020ba6:	b087      	sub	sp, #28
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	60f8      	str	r0, [r7, #12]
 8020bac:	60b9      	str	r1, [r7, #8]
 8020bae:	607a      	str	r2, [r7, #4]
 8020bb0:	603b      	str	r3, [r7, #0]
	for (int i=0; i<Length; i++) {
 8020bb2:	2300      	movs	r3, #0
 8020bb4:	617b      	str	r3, [r7, #20]
 8020bb6:	e01f      	b.n	8020bf8 <KalmanfilterARM+0x54>
		if (isnan(kstate->x) > 0)
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	edd3 7a02 	vldr	s15, [r3, #8]
 8020bbe:	eef4 7a67 	vcmp.f32	s15, s15
 8020bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bc6:	d701      	bvc.n	8020bcc <KalmanfilterARM+0x28>
			return 1;
 8020bc8:	2301      	movs	r3, #1
 8020bca:	e01a      	b.n	8020c02 <KalmanfilterARM+0x5e>
		OutputArray[i] = kalman(kstate, InputArray[i]); // change to kalman for .s function
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	009b      	lsls	r3, r3, #2
 8020bd0:	68fa      	ldr	r2, [r7, #12]
 8020bd2:	4413      	add	r3, r2
 8020bd4:	edd3 7a00 	vldr	s15, [r3]
 8020bd8:	697b      	ldr	r3, [r7, #20]
 8020bda:	009b      	lsls	r3, r3, #2
 8020bdc:	68ba      	ldr	r2, [r7, #8]
 8020bde:	18d4      	adds	r4, r2, r3
 8020be0:	eeb0 0a67 	vmov.f32	s0, s15
 8020be4:	6878      	ldr	r0, [r7, #4]
 8020be6:	f7ff fa0b 	bl	8020000 <kalman>
 8020bea:	eef0 7a40 	vmov.f32	s15, s0
 8020bee:	edc4 7a00 	vstr	s15, [r4]
	for (int i=0; i<Length; i++) {
 8020bf2:	697b      	ldr	r3, [r7, #20]
 8020bf4:	3301      	adds	r3, #1
 8020bf6:	617b      	str	r3, [r7, #20]
 8020bf8:	697a      	ldr	r2, [r7, #20]
 8020bfa:	683b      	ldr	r3, [r7, #0]
 8020bfc:	429a      	cmp	r2, r3
 8020bfe:	dbdb      	blt.n	8020bb8 <KalmanfilterARM+0x14>
	}
	return 0;
 8020c00:	2300      	movs	r3, #0
}
 8020c02:	4618      	mov	r0, r3
 8020c04:	371c      	adds	r7, #28
 8020c06:	46bd      	mov	sp, r7
 8020c08:	bd90      	pop	{r4, r7, pc}

08020c0a <KalmanfilterCMSIS>:

int KalmanfilterCMSIS(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8020c0a:	b590      	push	{r4, r7, lr}
 8020c0c:	b087      	sub	sp, #28
 8020c0e:	af00      	add	r7, sp, #0
 8020c10:	60f8      	str	r0, [r7, #12]
 8020c12:	60b9      	str	r1, [r7, #8]
 8020c14:	607a      	str	r2, [r7, #4]
 8020c16:	603b      	str	r3, [r7, #0]
	for (int i=0; i<Length; i++) {
 8020c18:	2300      	movs	r3, #0
 8020c1a:	617b      	str	r3, [r7, #20]
 8020c1c:	e01f      	b.n	8020c5e <KalmanfilterCMSIS+0x54>
		if (isnan(kstate->x) > 0)
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8020c24:	eef4 7a67 	vcmp.f32	s15, s15
 8020c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c2c:	d701      	bvc.n	8020c32 <KalmanfilterCMSIS+0x28>
			return 1;
 8020c2e:	2301      	movs	r3, #1
 8020c30:	e01a      	b.n	8020c68 <KalmanfilterCMSIS+0x5e>
		OutputArray[i] = updateCMSIS(kstate, InputArray[i]); // change to kalman for .s function
 8020c32:	697b      	ldr	r3, [r7, #20]
 8020c34:	009b      	lsls	r3, r3, #2
 8020c36:	68fa      	ldr	r2, [r7, #12]
 8020c38:	4413      	add	r3, r2
 8020c3a:	edd3 7a00 	vldr	s15, [r3]
 8020c3e:	697b      	ldr	r3, [r7, #20]
 8020c40:	009b      	lsls	r3, r3, #2
 8020c42:	68ba      	ldr	r2, [r7, #8]
 8020c44:	18d4      	adds	r4, r2, r3
 8020c46:	eeb0 0a67 	vmov.f32	s0, s15
 8020c4a:	6878      	ldr	r0, [r7, #4]
 8020c4c:	f7ff ff30 	bl	8020ab0 <updateCMSIS>
 8020c50:	eef0 7a40 	vmov.f32	s15, s0
 8020c54:	edc4 7a00 	vstr	s15, [r4]
	for (int i=0; i<Length; i++) {
 8020c58:	697b      	ldr	r3, [r7, #20]
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	617b      	str	r3, [r7, #20]
 8020c5e:	697a      	ldr	r2, [r7, #20]
 8020c60:	683b      	ldr	r3, [r7, #0]
 8020c62:	429a      	cmp	r2, r3
 8020c64:	dbdb      	blt.n	8020c1e <KalmanfilterCMSIS+0x14>
	}
	return 0;
 8020c66:	2300      	movs	r3, #0
}
 8020c68:	4618      	mov	r0, r3
 8020c6a:	371c      	adds	r7, #28
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	bd90      	pop	{r4, r7, pc}

08020c70 <KalmanfilterC>:

int KalmanfilterC(float* InputArray, float* OutputArray, kalman_state* kstate, int Length) {
 8020c70:	b590      	push	{r4, r7, lr}
 8020c72:	b087      	sub	sp, #28
 8020c74:	af00      	add	r7, sp, #0
 8020c76:	60f8      	str	r0, [r7, #12]
 8020c78:	60b9      	str	r1, [r7, #8]
 8020c7a:	607a      	str	r2, [r7, #4]
 8020c7c:	603b      	str	r3, [r7, #0]
	for (int i=0; i<Length; i++) {
 8020c7e:	2300      	movs	r3, #0
 8020c80:	617b      	str	r3, [r7, #20]
 8020c82:	e01f      	b.n	8020cc4 <KalmanfilterC+0x54>
		if (isnan(kstate->x) > 0)
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	edd3 7a02 	vldr	s15, [r3, #8]
 8020c8a:	eef4 7a67 	vcmp.f32	s15, s15
 8020c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c92:	d701      	bvc.n	8020c98 <KalmanfilterC+0x28>
			return 1;
 8020c94:	2301      	movs	r3, #1
 8020c96:	e01a      	b.n	8020cce <KalmanfilterC+0x5e>
		OutputArray[i] = updateC(kstate, InputArray[i]); // change to kalman for .s function
 8020c98:	697b      	ldr	r3, [r7, #20]
 8020c9a:	009b      	lsls	r3, r3, #2
 8020c9c:	68fa      	ldr	r2, [r7, #12]
 8020c9e:	4413      	add	r3, r2
 8020ca0:	edd3 7a00 	vldr	s15, [r3]
 8020ca4:	697b      	ldr	r3, [r7, #20]
 8020ca6:	009b      	lsls	r3, r3, #2
 8020ca8:	68ba      	ldr	r2, [r7, #8]
 8020caa:	18d4      	adds	r4, r2, r3
 8020cac:	eeb0 0a67 	vmov.f32	s0, s15
 8020cb0:	6878      	ldr	r0, [r7, #4]
 8020cb2:	f7ff fe97 	bl	80209e4 <updateC>
 8020cb6:	eef0 7a40 	vmov.f32	s15, s0
 8020cba:	edc4 7a00 	vstr	s15, [r4]
	for (int i=0; i<Length; i++) {
 8020cbe:	697b      	ldr	r3, [r7, #20]
 8020cc0:	3301      	adds	r3, #1
 8020cc2:	617b      	str	r3, [r7, #20]
 8020cc4:	697a      	ldr	r2, [r7, #20]
 8020cc6:	683b      	ldr	r3, [r7, #0]
 8020cc8:	429a      	cmp	r2, r3
 8020cca:	dbdb      	blt.n	8020c84 <KalmanfilterC+0x14>
	}
	return 0;
 8020ccc:	2300      	movs	r3, #0
}
 8020cce:	4618      	mov	r0, r3
 8020cd0:	371c      	adds	r7, #28
 8020cd2:	46bd      	mov	sp, r7
 8020cd4:	bd90      	pop	{r4, r7, pc}

08020cd6 <ComputeDifferenceArraysC>:

//------------------------- ANALYSIS FUNCTIONS ----------------------------//

void ComputeDifferenceArraysC(float* InputArray1, float* InputArray2, float* ResultArray, int Length) {
 8020cd6:	b480      	push	{r7}
 8020cd8:	b087      	sub	sp, #28
 8020cda:	af00      	add	r7, sp, #0
 8020cdc:	60f8      	str	r0, [r7, #12]
 8020cde:	60b9      	str	r1, [r7, #8]
 8020ce0:	607a      	str	r2, [r7, #4]
 8020ce2:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < Length; i++) {
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	617b      	str	r3, [r7, #20]
 8020ce8:	e016      	b.n	8020d18 <ComputeDifferenceArraysC+0x42>
        ResultArray[i] = InputArray1[i] - InputArray2[i];
 8020cea:	697b      	ldr	r3, [r7, #20]
 8020cec:	009b      	lsls	r3, r3, #2
 8020cee:	68fa      	ldr	r2, [r7, #12]
 8020cf0:	4413      	add	r3, r2
 8020cf2:	ed93 7a00 	vldr	s14, [r3]
 8020cf6:	697b      	ldr	r3, [r7, #20]
 8020cf8:	009b      	lsls	r3, r3, #2
 8020cfa:	68ba      	ldr	r2, [r7, #8]
 8020cfc:	4413      	add	r3, r2
 8020cfe:	edd3 7a00 	vldr	s15, [r3]
 8020d02:	697b      	ldr	r3, [r7, #20]
 8020d04:	009b      	lsls	r3, r3, #2
 8020d06:	687a      	ldr	r2, [r7, #4]
 8020d08:	4413      	add	r3, r2
 8020d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020d0e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < Length; i++) {
 8020d12:	697b      	ldr	r3, [r7, #20]
 8020d14:	3301      	adds	r3, #1
 8020d16:	617b      	str	r3, [r7, #20]
 8020d18:	697a      	ldr	r2, [r7, #20]
 8020d1a:	683b      	ldr	r3, [r7, #0]
 8020d1c:	429a      	cmp	r2, r3
 8020d1e:	dbe4      	blt.n	8020cea <ComputeDifferenceArraysC+0x14>
    }
}
 8020d20:	bf00      	nop
 8020d22:	bf00      	nop
 8020d24:	371c      	adds	r7, #28
 8020d26:	46bd      	mov	sp, r7
 8020d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d2c:	4770      	bx	lr

08020d2e <ComputeAverageAndStandardDeviationArrayC>:

void ComputeAverageAndStandardDeviationArrayC(float* InputArray, float* Average, float* StandardDeviation, int Length) {
 8020d2e:	b580      	push	{r7, lr}
 8020d30:	b088      	sub	sp, #32
 8020d32:	af00      	add	r7, sp, #0
 8020d34:	60f8      	str	r0, [r7, #12]
 8020d36:	60b9      	str	r1, [r7, #8]
 8020d38:	607a      	str	r2, [r7, #4]
 8020d3a:	603b      	str	r3, [r7, #0]
    float sum = 0.0, squaredSum = 0.0;
 8020d3c:	f04f 0300 	mov.w	r3, #0
 8020d40:	61fb      	str	r3, [r7, #28]
 8020d42:	f04f 0300 	mov.w	r3, #0
 8020d46:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < Length; i++) {
 8020d48:	2300      	movs	r3, #0
 8020d4a:	617b      	str	r3, [r7, #20]
 8020d4c:	e022      	b.n	8020d94 <ComputeAverageAndStandardDeviationArrayC+0x66>
        sum += InputArray[i];
 8020d4e:	697b      	ldr	r3, [r7, #20]
 8020d50:	009b      	lsls	r3, r3, #2
 8020d52:	68fa      	ldr	r2, [r7, #12]
 8020d54:	4413      	add	r3, r2
 8020d56:	edd3 7a00 	vldr	s15, [r3]
 8020d5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8020d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020d62:	edc7 7a07 	vstr	s15, [r7, #28]
        squaredSum += InputArray[i] * InputArray[i];
 8020d66:	697b      	ldr	r3, [r7, #20]
 8020d68:	009b      	lsls	r3, r3, #2
 8020d6a:	68fa      	ldr	r2, [r7, #12]
 8020d6c:	4413      	add	r3, r2
 8020d6e:	ed93 7a00 	vldr	s14, [r3]
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	009b      	lsls	r3, r3, #2
 8020d76:	68fa      	ldr	r2, [r7, #12]
 8020d78:	4413      	add	r3, r2
 8020d7a:	edd3 7a00 	vldr	s15, [r3]
 8020d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020d82:	ed97 7a06 	vldr	s14, [r7, #24]
 8020d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020d8a:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < Length; i++) {
 8020d8e:	697b      	ldr	r3, [r7, #20]
 8020d90:	3301      	adds	r3, #1
 8020d92:	617b      	str	r3, [r7, #20]
 8020d94:	697a      	ldr	r2, [r7, #20]
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	429a      	cmp	r2, r3
 8020d9a:	dbd8      	blt.n	8020d4e <ComputeAverageAndStandardDeviationArrayC+0x20>
    }
    *Average = sum / Length;
 8020d9c:	683b      	ldr	r3, [r7, #0]
 8020d9e:	ee07 3a90 	vmov	s15, r3
 8020da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8020daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020dae:	68bb      	ldr	r3, [r7, #8]
 8020db0:	edc3 7a00 	vstr	s15, [r3]
    *StandardDeviation = sqrt((squaredSum / Length) - (*Average) * (*Average));
 8020db4:	683b      	ldr	r3, [r7, #0]
 8020db6:	ee07 3a90 	vmov	s15, r3
 8020dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dbe:	edd7 6a06 	vldr	s13, [r7, #24]
 8020dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020dc6:	68bb      	ldr	r3, [r7, #8]
 8020dc8:	edd3 6a00 	vldr	s13, [r3]
 8020dcc:	68bb      	ldr	r3, [r7, #8]
 8020dce:	edd3 7a00 	vldr	s15, [r3]
 8020dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020dda:	ee17 0a90 	vmov	r0, s15
 8020dde:	f7ff faa9 	bl	8020334 <__aeabi_f2d>
 8020de2:	4602      	mov	r2, r0
 8020de4:	460b      	mov	r3, r1
 8020de6:	ec43 2b10 	vmov	d0, r2, r3
 8020dea:	f002 fd59 	bl	80238a0 <sqrt>
 8020dee:	ec53 2b10 	vmov	r2, r3, d0
 8020df2:	4610      	mov	r0, r2
 8020df4:	4619      	mov	r1, r3
 8020df6:	f7ff fda5 	bl	8020944 <__aeabi_d2f>
 8020dfa:	4602      	mov	r2, r0
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	601a      	str	r2, [r3, #0]
}
 8020e00:	bf00      	nop
 8020e02:	3720      	adds	r7, #32
 8020e04:	46bd      	mov	sp, r7
 8020e06:	bd80      	pop	{r7, pc}

08020e08 <ComputeConvolutionArraysC>:


void ComputeConvolutionArraysC(float* InputArray1, float* InputArray2, float* ResultArray, int Length) {
 8020e08:	b480      	push	{r7}
 8020e0a:	b087      	sub	sp, #28
 8020e0c:	af00      	add	r7, sp, #0
 8020e0e:	60f8      	str	r0, [r7, #12]
 8020e10:	60b9      	str	r1, [r7, #8]
 8020e12:	607a      	str	r2, [r7, #4]
 8020e14:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < (2*Length - 1); i++) {
 8020e16:	2300      	movs	r3, #0
 8020e18:	617b      	str	r3, [r7, #20]
 8020e1a:	e03c      	b.n	8020e96 <ComputeConvolutionArraysC+0x8e>
		ResultArray[i] = 0.0f;
 8020e1c:	697b      	ldr	r3, [r7, #20]
 8020e1e:	009b      	lsls	r3, r3, #2
 8020e20:	687a      	ldr	r2, [r7, #4]
 8020e22:	4413      	add	r3, r2
 8020e24:	f04f 0200 	mov.w	r2, #0
 8020e28:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < Length; j++) {
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	613b      	str	r3, [r7, #16]
 8020e2e:	e02b      	b.n	8020e88 <ComputeConvolutionArraysC+0x80>
        	if (i-j >= 0 && i-j < Length)
 8020e30:	697a      	ldr	r2, [r7, #20]
 8020e32:	693b      	ldr	r3, [r7, #16]
 8020e34:	1ad3      	subs	r3, r2, r3
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	db23      	blt.n	8020e82 <ComputeConvolutionArraysC+0x7a>
 8020e3a:	697a      	ldr	r2, [r7, #20]
 8020e3c:	693b      	ldr	r3, [r7, #16]
 8020e3e:	1ad3      	subs	r3, r2, r3
 8020e40:	683a      	ldr	r2, [r7, #0]
 8020e42:	429a      	cmp	r2, r3
 8020e44:	dd1d      	ble.n	8020e82 <ComputeConvolutionArraysC+0x7a>
        		ResultArray[i] += InputArray1[j] * InputArray2[i-j];
 8020e46:	697b      	ldr	r3, [r7, #20]
 8020e48:	009b      	lsls	r3, r3, #2
 8020e4a:	687a      	ldr	r2, [r7, #4]
 8020e4c:	4413      	add	r3, r2
 8020e4e:	ed93 7a00 	vldr	s14, [r3]
 8020e52:	693b      	ldr	r3, [r7, #16]
 8020e54:	009b      	lsls	r3, r3, #2
 8020e56:	68fa      	ldr	r2, [r7, #12]
 8020e58:	4413      	add	r3, r2
 8020e5a:	edd3 6a00 	vldr	s13, [r3]
 8020e5e:	697a      	ldr	r2, [r7, #20]
 8020e60:	693b      	ldr	r3, [r7, #16]
 8020e62:	1ad3      	subs	r3, r2, r3
 8020e64:	009b      	lsls	r3, r3, #2
 8020e66:	68ba      	ldr	r2, [r7, #8]
 8020e68:	4413      	add	r3, r2
 8020e6a:	edd3 7a00 	vldr	s15, [r3]
 8020e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8020e72:	697b      	ldr	r3, [r7, #20]
 8020e74:	009b      	lsls	r3, r3, #2
 8020e76:	687a      	ldr	r2, [r7, #4]
 8020e78:	4413      	add	r3, r2
 8020e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e7e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < Length; j++) {
 8020e82:	693b      	ldr	r3, [r7, #16]
 8020e84:	3301      	adds	r3, #1
 8020e86:	613b      	str	r3, [r7, #16]
 8020e88:	693a      	ldr	r2, [r7, #16]
 8020e8a:	683b      	ldr	r3, [r7, #0]
 8020e8c:	429a      	cmp	r2, r3
 8020e8e:	dbcf      	blt.n	8020e30 <ComputeConvolutionArraysC+0x28>
	for (int i = 0; i < (2*Length - 1); i++) {
 8020e90:	697b      	ldr	r3, [r7, #20]
 8020e92:	3301      	adds	r3, #1
 8020e94:	617b      	str	r3, [r7, #20]
 8020e96:	683b      	ldr	r3, [r7, #0]
 8020e98:	005b      	lsls	r3, r3, #1
 8020e9a:	3b01      	subs	r3, #1
 8020e9c:	697a      	ldr	r2, [r7, #20]
 8020e9e:	429a      	cmp	r2, r3
 8020ea0:	dbbc      	blt.n	8020e1c <ComputeConvolutionArraysC+0x14>
        }
    }
}
 8020ea2:	bf00      	nop
 8020ea4:	bf00      	nop
 8020ea6:	371c      	adds	r7, #28
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <ComputeCorrelationArraysC>:

void ComputeCorrelationArraysC(float* InputArray1, float* InputArray2, float* CorrArray, int Length) {
 8020eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020eb4:	b089      	sub	sp, #36	@ 0x24
 8020eb6:	af00      	add	r7, sp, #0
 8020eb8:	60f8      	str	r0, [r7, #12]
 8020eba:	60b9      	str	r1, [r7, #8]
 8020ebc:	607a      	str	r2, [r7, #4]
 8020ebe:	603b      	str	r3, [r7, #0]
 8020ec0:	466b      	mov	r3, sp
 8020ec2:	461e      	mov	r6, r3
	for (int i=0; i<(2*Length -1); i++) { //based on the documentation we have to intialize to 0
 8020ec4:	2300      	movs	r3, #0
 8020ec6:	61fb      	str	r3, [r7, #28]
 8020ec8:	e009      	b.n	8020ede <ComputeCorrelationArraysC+0x2e>
			CorrArray[i] = 0.0f;
 8020eca:	69fb      	ldr	r3, [r7, #28]
 8020ecc:	009b      	lsls	r3, r3, #2
 8020ece:	687a      	ldr	r2, [r7, #4]
 8020ed0:	4413      	add	r3, r2
 8020ed2:	f04f 0200 	mov.w	r2, #0
 8020ed6:	601a      	str	r2, [r3, #0]
	for (int i=0; i<(2*Length -1); i++) { //based on the documentation we have to intialize to 0
 8020ed8:	69fb      	ldr	r3, [r7, #28]
 8020eda:	3301      	adds	r3, #1
 8020edc:	61fb      	str	r3, [r7, #28]
 8020ede:	683b      	ldr	r3, [r7, #0]
 8020ee0:	005b      	lsls	r3, r3, #1
 8020ee2:	3b01      	subs	r3, #1
 8020ee4:	69fa      	ldr	r2, [r7, #28]
 8020ee6:	429a      	cmp	r2, r3
 8020ee8:	dbef      	blt.n	8020eca <ComputeCorrelationArraysC+0x1a>
	}

	float interArray[Length];
 8020eea:	6839      	ldr	r1, [r7, #0]
 8020eec:	1e4b      	subs	r3, r1, #1
 8020eee:	617b      	str	r3, [r7, #20]
 8020ef0:	460a      	mov	r2, r1
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	4690      	mov	r8, r2
 8020ef6:	4699      	mov	r9, r3
 8020ef8:	f04f 0200 	mov.w	r2, #0
 8020efc:	f04f 0300 	mov.w	r3, #0
 8020f00:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8020f04:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8020f08:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8020f0c:	460a      	mov	r2, r1
 8020f0e:	2300      	movs	r3, #0
 8020f10:	4614      	mov	r4, r2
 8020f12:	461d      	mov	r5, r3
 8020f14:	f04f 0200 	mov.w	r2, #0
 8020f18:	f04f 0300 	mov.w	r3, #0
 8020f1c:	016b      	lsls	r3, r5, #5
 8020f1e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8020f22:	0162      	lsls	r2, r4, #5
 8020f24:	460b      	mov	r3, r1
 8020f26:	009b      	lsls	r3, r3, #2
 8020f28:	3307      	adds	r3, #7
 8020f2a:	08db      	lsrs	r3, r3, #3
 8020f2c:	00db      	lsls	r3, r3, #3
 8020f2e:	ebad 0d03 	sub.w	sp, sp, r3
 8020f32:	466b      	mov	r3, sp
 8020f34:	3303      	adds	r3, #3
 8020f36:	089b      	lsrs	r3, r3, #2
 8020f38:	009b      	lsls	r3, r3, #2
 8020f3a:	613b      	str	r3, [r7, #16]

	for (int j = Length; j>=0; j--) {
 8020f3c:	683b      	ldr	r3, [r7, #0]
 8020f3e:	61bb      	str	r3, [r7, #24]
 8020f40:	e011      	b.n	8020f66 <ComputeCorrelationArraysC+0xb6>
		interArray[Length - j] = InputArray2[j-1];
 8020f42:	69bb      	ldr	r3, [r7, #24]
 8020f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8020f48:	3b01      	subs	r3, #1
 8020f4a:	009b      	lsls	r3, r3, #2
 8020f4c:	68ba      	ldr	r2, [r7, #8]
 8020f4e:	441a      	add	r2, r3
 8020f50:	6839      	ldr	r1, [r7, #0]
 8020f52:	69bb      	ldr	r3, [r7, #24]
 8020f54:	1acb      	subs	r3, r1, r3
 8020f56:	6812      	ldr	r2, [r2, #0]
 8020f58:	6939      	ldr	r1, [r7, #16]
 8020f5a:	009b      	lsls	r3, r3, #2
 8020f5c:	440b      	add	r3, r1
 8020f5e:	601a      	str	r2, [r3, #0]
	for (int j = Length; j>=0; j--) {
 8020f60:	69bb      	ldr	r3, [r7, #24]
 8020f62:	3b01      	subs	r3, #1
 8020f64:	61bb      	str	r3, [r7, #24]
 8020f66:	69bb      	ldr	r3, [r7, #24]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	daea      	bge.n	8020f42 <ComputeCorrelationArraysC+0x92>
	 *  input array convolved with the other array but reversed so that it is
	 *  done by calling the convolution function but first reversing the array
	 *  and placing it into an intermediate array
	 **/

	ComputeConvolutionArraysC(InputArray1, interArray, CorrArray, Length);
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	687a      	ldr	r2, [r7, #4]
 8020f70:	6939      	ldr	r1, [r7, #16]
 8020f72:	68f8      	ldr	r0, [r7, #12]
 8020f74:	f7ff ff48 	bl	8020e08 <ComputeConvolutionArraysC>
 8020f78:	46b5      	mov	sp, r6
}
 8020f7a:	bf00      	nop
 8020f7c:	3724      	adds	r7, #36	@ 0x24
 8020f7e:	46bd      	mov	sp, r7
 8020f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08020f84 <ComputeDifferenceArraysCMSIS>:

void ComputeDifferenceArraysCMSIS(float* InputArray1, float* InputArray2, float* ResultArray, int Length) {
 8020f84:	b580      	push	{r7, lr}
 8020f86:	b084      	sub	sp, #16
 8020f88:	af00      	add	r7, sp, #0
 8020f8a:	60f8      	str	r0, [r7, #12]
 8020f8c:	60b9      	str	r1, [r7, #8]
 8020f8e:	607a      	str	r2, [r7, #4]
 8020f90:	603b      	str	r3, [r7, #0]
	arm_sub_f32(InputArray1, InputArray2, ResultArray, Length);
 8020f92:	683b      	ldr	r3, [r7, #0]
 8020f94:	687a      	ldr	r2, [r7, #4]
 8020f96:	68b9      	ldr	r1, [r7, #8]
 8020f98:	68f8      	ldr	r0, [r7, #12]
 8020f9a:	f002 fb15 	bl	80235c8 <arm_sub_f32>
}
 8020f9e:	bf00      	nop
 8020fa0:	3710      	adds	r7, #16
 8020fa2:	46bd      	mov	sp, r7
 8020fa4:	bd80      	pop	{r7, pc}

08020fa6 <ComputeAverageAndStandardDeviationArrayCMSIS>:

void ComputeAverageAndStandardDeviationArrayCMSIS(float* InputArray, float* Average, float* StandardDeviation, int Length) {
 8020fa6:	b580      	push	{r7, lr}
 8020fa8:	b084      	sub	sp, #16
 8020faa:	af00      	add	r7, sp, #0
 8020fac:	60f8      	str	r0, [r7, #12]
 8020fae:	60b9      	str	r1, [r7, #8]
 8020fb0:	607a      	str	r2, [r7, #4]
 8020fb2:	603b      	str	r3, [r7, #0]
	arm_mean_f32(InputArray, Length, Average);
 8020fb4:	683b      	ldr	r3, [r7, #0]
 8020fb6:	68ba      	ldr	r2, [r7, #8]
 8020fb8:	4619      	mov	r1, r3
 8020fba:	68f8      	ldr	r0, [r7, #12]
 8020fbc:	f001 fd76 	bl	8022aac <arm_mean_f32>
	arm_std_f32(InputArray, Length, StandardDeviation);
 8020fc0:	683b      	ldr	r3, [r7, #0]
 8020fc2:	687a      	ldr	r2, [r7, #4]
 8020fc4:	4619      	mov	r1, r3
 8020fc6:	68f8      	ldr	r0, [r7, #12]
 8020fc8:	f001 fce6 	bl	8022998 <arm_std_f32>
}
 8020fcc:	bf00      	nop
 8020fce:	3710      	adds	r7, #16
 8020fd0:	46bd      	mov	sp, r7
 8020fd2:	bd80      	pop	{r7, pc}

08020fd4 <ComputeCorrelationArraysCMSIS>:


void ComputeCorrelationArraysCMSIS(float* InputArray1, float* InputArray2, float* CorrArray, int Length) {
 8020fd4:	b580      	push	{r7, lr}
 8020fd6:	b088      	sub	sp, #32
 8020fd8:	af02      	add	r7, sp, #8
 8020fda:	60f8      	str	r0, [r7, #12]
 8020fdc:	60b9      	str	r1, [r7, #8]
 8020fde:	607a      	str	r2, [r7, #4]
 8020fe0:	603b      	str	r3, [r7, #0]
	for (int i=0; i<(2*Length -1); i++) { //based on the documentation we have to intialize to 0
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	617b      	str	r3, [r7, #20]
 8020fe6:	e009      	b.n	8020ffc <ComputeCorrelationArraysCMSIS+0x28>
		CorrArray[i] = 0.0f;
 8020fe8:	697b      	ldr	r3, [r7, #20]
 8020fea:	009b      	lsls	r3, r3, #2
 8020fec:	687a      	ldr	r2, [r7, #4]
 8020fee:	4413      	add	r3, r2
 8020ff0:	f04f 0200 	mov.w	r2, #0
 8020ff4:	601a      	str	r2, [r3, #0]
	for (int i=0; i<(2*Length -1); i++) { //based on the documentation we have to intialize to 0
 8020ff6:	697b      	ldr	r3, [r7, #20]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	617b      	str	r3, [r7, #20]
 8020ffc:	683b      	ldr	r3, [r7, #0]
 8020ffe:	005b      	lsls	r3, r3, #1
 8021000:	3b01      	subs	r3, #1
 8021002:	697a      	ldr	r2, [r7, #20]
 8021004:	429a      	cmp	r2, r3
 8021006:	dbef      	blt.n	8020fe8 <ComputeCorrelationArraysCMSIS+0x14>
	}
	arm_correlate_f32(InputArray1, Length, InputArray2, Length, CorrArray);
 8021008:	6839      	ldr	r1, [r7, #0]
 802100a:	683a      	ldr	r2, [r7, #0]
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	9300      	str	r3, [sp, #0]
 8021010:	4613      	mov	r3, r2
 8021012:	68ba      	ldr	r2, [r7, #8]
 8021014:	68f8      	ldr	r0, [r7, #12]
 8021016:	f001 fd87 	bl	8022b28 <arm_correlate_f32>
}
 802101a:	bf00      	nop
 802101c:	3718      	adds	r7, #24
 802101e:	46bd      	mov	sp, r7
 8021020:	bd80      	pop	{r7, pc}

08021022 <ComputeConvolutionArraysCMSIS>:

void ComputeConvolutionArraysCMSIS(float* InputArray1, float* InputArray2, float* ResultArray, int Length) {
 8021022:	b580      	push	{r7, lr}
 8021024:	b086      	sub	sp, #24
 8021026:	af02      	add	r7, sp, #8
 8021028:	60f8      	str	r0, [r7, #12]
 802102a:	60b9      	str	r1, [r7, #8]
 802102c:	607a      	str	r2, [r7, #4]
 802102e:	603b      	str	r3, [r7, #0]
	arm_conv_f32(InputArray1, Length, InputArray2, Length, ResultArray);
 8021030:	6839      	ldr	r1, [r7, #0]
 8021032:	683a      	ldr	r2, [r7, #0]
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	9300      	str	r3, [sp, #0]
 8021038:	4613      	mov	r3, r2
 802103a:	68ba      	ldr	r2, [r7, #8]
 802103c:	68f8      	ldr	r0, [r7, #12]
 802103e:	f002 f829 	bl	8023094 <arm_conv_f32>
}
 8021042:	bf00      	nop
 8021044:	3710      	adds	r7, #16
 8021046:	46bd      	mov	sp, r7
 8021048:	bd80      	pop	{r7, pc}
	...

0802104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802104c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021050:	f5ad 7d2e 	sub.w	sp, sp, #696	@ 0x2b8
 8021054:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8021056:	f000 fbe0 	bl	802181a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 802105a:	f000 fad3 	bl	8021604 <SystemClock_Config>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 802105e:	f000 fb23 	bl	80216a8 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	// Input measurement array
	float InputArray[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8021062:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8021066:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 802106a:	4aee      	ldr	r2, [pc, #952]	@ (8021424 <main+0x3d8>)
 802106c:	4618      	mov	r0, r3
 802106e:	4611      	mov	r1, r2
 8021070:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8021074:	461a      	mov	r2, r3
 8021076:	f002 fbe7 	bl	8023848 <memcpy>
		9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
		10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
		9.5799256668};

	// Output Arrays
	int Length = sizeof(InputArray)/sizeof(float);
 802107a:	2365      	movs	r3, #101	@ 0x65
 802107c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
	float OutputArrayC[Length], OutputArrayCMSIS[Length], OutputArrayARM[Length];
 8021080:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 8021084:	1e4b      	subs	r3, r1, #1
 8021086:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 802108a:	460a      	mov	r2, r1
 802108c:	2300      	movs	r3, #0
 802108e:	4614      	mov	r4, r2
 8021090:	461d      	mov	r5, r3
 8021092:	f04f 0200 	mov.w	r2, #0
 8021096:	f04f 0300 	mov.w	r3, #0
 802109a:	016b      	lsls	r3, r5, #5
 802109c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80210a0:	0162      	lsls	r2, r4, #5
 80210a2:	460a      	mov	r2, r1
 80210a4:	2300      	movs	r3, #0
 80210a6:	4690      	mov	r8, r2
 80210a8:	4699      	mov	r9, r3
 80210aa:	f04f 0200 	mov.w	r2, #0
 80210ae:	f04f 0300 	mov.w	r3, #0
 80210b2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80210b6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80210ba:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80210be:	460b      	mov	r3, r1
 80210c0:	009b      	lsls	r3, r3, #2
 80210c2:	3307      	adds	r3, #7
 80210c4:	08db      	lsrs	r3, r3, #3
 80210c6:	00db      	lsls	r3, r3, #3
 80210c8:	ebad 0d03 	sub.w	sp, sp, r3
 80210cc:	466b      	mov	r3, sp
 80210ce:	3303      	adds	r3, #3
 80210d0:	089b      	lsrs	r3, r3, #2
 80210d2:	009b      	lsls	r3, r3, #2
 80210d4:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80210d8:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80210dc:	1e4b      	subs	r3, r1, #1
 80210de:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80210e2:	460a      	mov	r2, r1
 80210e4:	2300      	movs	r3, #0
 80210e6:	4692      	mov	sl, r2
 80210e8:	469b      	mov	fp, r3
 80210ea:	f04f 0200 	mov.w	r2, #0
 80210ee:	f04f 0300 	mov.w	r3, #0
 80210f2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80210f6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80210fa:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80210fe:	460a      	mov	r2, r1
 8021100:	2300      	movs	r3, #0
 8021102:	673a      	str	r2, [r7, #112]	@ 0x70
 8021104:	677b      	str	r3, [r7, #116]	@ 0x74
 8021106:	f04f 0200 	mov.w	r2, #0
 802110a:	f04f 0300 	mov.w	r3, #0
 802110e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8021112:	4628      	mov	r0, r5
 8021114:	0143      	lsls	r3, r0, #5
 8021116:	4620      	mov	r0, r4
 8021118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802111c:	4620      	mov	r0, r4
 802111e:	0142      	lsls	r2, r0, #5
 8021120:	460b      	mov	r3, r1
 8021122:	009b      	lsls	r3, r3, #2
 8021124:	3307      	adds	r3, #7
 8021126:	08db      	lsrs	r3, r3, #3
 8021128:	00db      	lsls	r3, r3, #3
 802112a:	ebad 0d03 	sub.w	sp, sp, r3
 802112e:	466b      	mov	r3, sp
 8021130:	3303      	adds	r3, #3
 8021132:	089b      	lsrs	r3, r3, #2
 8021134:	009b      	lsls	r3, r3, #2
 8021136:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 802113a:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 802113e:	1e4b      	subs	r3, r1, #1
 8021140:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8021144:	460a      	mov	r2, r1
 8021146:	2300      	movs	r3, #0
 8021148:	66ba      	str	r2, [r7, #104]	@ 0x68
 802114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802114c:	f04f 0200 	mov.w	r2, #0
 8021150:	f04f 0300 	mov.w	r3, #0
 8021154:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8021158:	4628      	mov	r0, r5
 802115a:	0143      	lsls	r3, r0, #5
 802115c:	4620      	mov	r0, r4
 802115e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021162:	4620      	mov	r0, r4
 8021164:	0142      	lsls	r2, r0, #5
 8021166:	460a      	mov	r2, r1
 8021168:	2300      	movs	r3, #0
 802116a:	663a      	str	r2, [r7, #96]	@ 0x60
 802116c:	667b      	str	r3, [r7, #100]	@ 0x64
 802116e:	f04f 0200 	mov.w	r2, #0
 8021172:	f04f 0300 	mov.w	r3, #0
 8021176:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 802117a:	4628      	mov	r0, r5
 802117c:	0143      	lsls	r3, r0, #5
 802117e:	4620      	mov	r0, r4
 8021180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021184:	4620      	mov	r0, r4
 8021186:	0142      	lsls	r2, r0, #5
 8021188:	460b      	mov	r3, r1
 802118a:	009b      	lsls	r3, r3, #2
 802118c:	3307      	adds	r3, #7
 802118e:	08db      	lsrs	r3, r3, #3
 8021190:	00db      	lsls	r3, r3, #3
 8021192:	ebad 0d03 	sub.w	sp, sp, r3
 8021196:	466b      	mov	r3, sp
 8021198:	3303      	adds	r3, #3
 802119a:	089b      	lsrs	r3, r3, #2
 802119c:	009b      	lsls	r3, r3, #2
 802119e:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288



	// Arrays and float for comparing the outputs between implementations for upcoming subroutines
	float Difference_C[Length], Difference_CMSIS[Length];
 80211a2:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80211a6:	1e4b      	subs	r3, r1, #1
 80211a8:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80211ac:	460a      	mov	r2, r1
 80211ae:	2300      	movs	r3, #0
 80211b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80211b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80211b4:	f04f 0200 	mov.w	r2, #0
 80211b8:	f04f 0300 	mov.w	r3, #0
 80211bc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80211c0:	4628      	mov	r0, r5
 80211c2:	0143      	lsls	r3, r0, #5
 80211c4:	4620      	mov	r0, r4
 80211c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80211ca:	4620      	mov	r0, r4
 80211cc:	0142      	lsls	r2, r0, #5
 80211ce:	460a      	mov	r2, r1
 80211d0:	2300      	movs	r3, #0
 80211d2:	653a      	str	r2, [r7, #80]	@ 0x50
 80211d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80211d6:	f04f 0200 	mov.w	r2, #0
 80211da:	f04f 0300 	mov.w	r3, #0
 80211de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80211e2:	4628      	mov	r0, r5
 80211e4:	0143      	lsls	r3, r0, #5
 80211e6:	4620      	mov	r0, r4
 80211e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80211ec:	4620      	mov	r0, r4
 80211ee:	0142      	lsls	r2, r0, #5
 80211f0:	460b      	mov	r3, r1
 80211f2:	009b      	lsls	r3, r3, #2
 80211f4:	3307      	adds	r3, #7
 80211f6:	08db      	lsrs	r3, r3, #3
 80211f8:	00db      	lsls	r3, r3, #3
 80211fa:	ebad 0d03 	sub.w	sp, sp, r3
 80211fe:	466b      	mov	r3, sp
 8021200:	3303      	adds	r3, #3
 8021202:	089b      	lsrs	r3, r3, #2
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 802120a:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 802120e:	1e4b      	subs	r3, r1, #1
 8021210:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8021214:	460a      	mov	r2, r1
 8021216:	2300      	movs	r3, #0
 8021218:	64ba      	str	r2, [r7, #72]	@ 0x48
 802121a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802121c:	f04f 0200 	mov.w	r2, #0
 8021220:	f04f 0300 	mov.w	r3, #0
 8021224:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8021228:	4628      	mov	r0, r5
 802122a:	0143      	lsls	r3, r0, #5
 802122c:	4620      	mov	r0, r4
 802122e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021232:	4620      	mov	r0, r4
 8021234:	0142      	lsls	r2, r0, #5
 8021236:	460a      	mov	r2, r1
 8021238:	2300      	movs	r3, #0
 802123a:	643a      	str	r2, [r7, #64]	@ 0x40
 802123c:	647b      	str	r3, [r7, #68]	@ 0x44
 802123e:	f04f 0200 	mov.w	r2, #0
 8021242:	f04f 0300 	mov.w	r3, #0
 8021246:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 802124a:	4628      	mov	r0, r5
 802124c:	0143      	lsls	r3, r0, #5
 802124e:	4620      	mov	r0, r4
 8021250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021254:	4620      	mov	r0, r4
 8021256:	0142      	lsls	r2, r0, #5
 8021258:	460b      	mov	r3, r1
 802125a:	009b      	lsls	r3, r3, #2
 802125c:	3307      	adds	r3, #7
 802125e:	08db      	lsrs	r3, r3, #3
 8021260:	00db      	lsls	r3, r3, #3
 8021262:	ebad 0d03 	sub.w	sp, sp, r3
 8021266:	466b      	mov	r3, sp
 8021268:	3303      	adds	r3, #3
 802126a:	089b      	lsrs	r3, r3, #2
 802126c:	009b      	lsls	r3, r3, #2
 802126e:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
	float Correlation_C[(2 * Length - 1)], Correlation_CMSIS[(2 * Length - 1)];
 8021272:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8021276:	005b      	lsls	r3, r3, #1
 8021278:	1e59      	subs	r1, r3, #1
 802127a:	1e4b      	subs	r3, r1, #1
 802127c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8021280:	460a      	mov	r2, r1
 8021282:	2300      	movs	r3, #0
 8021284:	63ba      	str	r2, [r7, #56]	@ 0x38
 8021286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021288:	f04f 0200 	mov.w	r2, #0
 802128c:	f04f 0300 	mov.w	r3, #0
 8021290:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8021294:	4628      	mov	r0, r5
 8021296:	0143      	lsls	r3, r0, #5
 8021298:	4620      	mov	r0, r4
 802129a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802129e:	4620      	mov	r0, r4
 80212a0:	0142      	lsls	r2, r0, #5
 80212a2:	460a      	mov	r2, r1
 80212a4:	2300      	movs	r3, #0
 80212a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80212a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80212aa:	f04f 0200 	mov.w	r2, #0
 80212ae:	f04f 0300 	mov.w	r3, #0
 80212b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80212b6:	4628      	mov	r0, r5
 80212b8:	0143      	lsls	r3, r0, #5
 80212ba:	4620      	mov	r0, r4
 80212bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80212c0:	4620      	mov	r0, r4
 80212c2:	0142      	lsls	r2, r0, #5
 80212c4:	460b      	mov	r3, r1
 80212c6:	009b      	lsls	r3, r3, #2
 80212c8:	3307      	adds	r3, #7
 80212ca:	08db      	lsrs	r3, r3, #3
 80212cc:	00db      	lsls	r3, r3, #3
 80212ce:	ebad 0d03 	sub.w	sp, sp, r3
 80212d2:	466b      	mov	r3, sp
 80212d4:	3303      	adds	r3, #3
 80212d6:	089b      	lsrs	r3, r3, #2
 80212d8:	009b      	lsls	r3, r3, #2
 80212da:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80212de:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80212e2:	005b      	lsls	r3, r3, #1
 80212e4:	1e59      	subs	r1, r3, #1
 80212e6:	1e4b      	subs	r3, r1, #1
 80212e8:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 80212ec:	460a      	mov	r2, r1
 80212ee:	2300      	movs	r3, #0
 80212f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80212f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80212f4:	f04f 0200 	mov.w	r2, #0
 80212f8:	f04f 0300 	mov.w	r3, #0
 80212fc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8021300:	4628      	mov	r0, r5
 8021302:	0143      	lsls	r3, r0, #5
 8021304:	4620      	mov	r0, r4
 8021306:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802130a:	4620      	mov	r0, r4
 802130c:	0142      	lsls	r2, r0, #5
 802130e:	460a      	mov	r2, r1
 8021310:	2300      	movs	r3, #0
 8021312:	623a      	str	r2, [r7, #32]
 8021314:	627b      	str	r3, [r7, #36]	@ 0x24
 8021316:	f04f 0200 	mov.w	r2, #0
 802131a:	f04f 0300 	mov.w	r3, #0
 802131e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8021322:	4628      	mov	r0, r5
 8021324:	0143      	lsls	r3, r0, #5
 8021326:	4620      	mov	r0, r4
 8021328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802132c:	4620      	mov	r0, r4
 802132e:	0142      	lsls	r2, r0, #5
 8021330:	460b      	mov	r3, r1
 8021332:	009b      	lsls	r3, r3, #2
 8021334:	3307      	adds	r3, #7
 8021336:	08db      	lsrs	r3, r3, #3
 8021338:	00db      	lsls	r3, r3, #3
 802133a:	ebad 0d03 	sub.w	sp, sp, r3
 802133e:	466b      	mov	r3, sp
 8021340:	3303      	adds	r3, #3
 8021342:	089b      	lsrs	r3, r3, #2
 8021344:	009b      	lsls	r3, r3, #2
 8021346:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
	float Convolution_C[(2 * Length - 1)], Convolution_CMSIS[(2 * Length - 1)];
 802134a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 802134e:	005b      	lsls	r3, r3, #1
 8021350:	1e59      	subs	r1, r3, #1
 8021352:	1e4b      	subs	r3, r1, #1
 8021354:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8021358:	460a      	mov	r2, r1
 802135a:	2300      	movs	r3, #0
 802135c:	61ba      	str	r2, [r7, #24]
 802135e:	61fb      	str	r3, [r7, #28]
 8021360:	f04f 0200 	mov.w	r2, #0
 8021364:	f04f 0300 	mov.w	r3, #0
 8021368:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 802136c:	4628      	mov	r0, r5
 802136e:	0143      	lsls	r3, r0, #5
 8021370:	4620      	mov	r0, r4
 8021372:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021376:	4620      	mov	r0, r4
 8021378:	0142      	lsls	r2, r0, #5
 802137a:	460a      	mov	r2, r1
 802137c:	2300      	movs	r3, #0
 802137e:	613a      	str	r2, [r7, #16]
 8021380:	617b      	str	r3, [r7, #20]
 8021382:	f04f 0200 	mov.w	r2, #0
 8021386:	f04f 0300 	mov.w	r3, #0
 802138a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 802138e:	4628      	mov	r0, r5
 8021390:	0143      	lsls	r3, r0, #5
 8021392:	4620      	mov	r0, r4
 8021394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021398:	4620      	mov	r0, r4
 802139a:	0142      	lsls	r2, r0, #5
 802139c:	460b      	mov	r3, r1
 802139e:	009b      	lsls	r3, r3, #2
 80213a0:	3307      	adds	r3, #7
 80213a2:	08db      	lsrs	r3, r3, #3
 80213a4:	00db      	lsls	r3, r3, #3
 80213a6:	ebad 0d03 	sub.w	sp, sp, r3
 80213aa:	466b      	mov	r3, sp
 80213ac:	3303      	adds	r3, #3
 80213ae:	089b      	lsrs	r3, r3, #2
 80213b0:	009b      	lsls	r3, r3, #2
 80213b2:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80213b6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80213ba:	005b      	lsls	r3, r3, #1
 80213bc:	1e59      	subs	r1, r3, #1
 80213be:	1e4b      	subs	r3, r1, #1
 80213c0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80213c4:	460a      	mov	r2, r1
 80213c6:	2300      	movs	r3, #0
 80213c8:	60ba      	str	r2, [r7, #8]
 80213ca:	60fb      	str	r3, [r7, #12]
 80213cc:	f04f 0200 	mov.w	r2, #0
 80213d0:	f04f 0300 	mov.w	r3, #0
 80213d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80213d8:	4628      	mov	r0, r5
 80213da:	0143      	lsls	r3, r0, #5
 80213dc:	4620      	mov	r0, r4
 80213de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80213e2:	4620      	mov	r0, r4
 80213e4:	0142      	lsls	r2, r0, #5
 80213e6:	460a      	mov	r2, r1
 80213e8:	2300      	movs	r3, #0
 80213ea:	603a      	str	r2, [r7, #0]
 80213ec:	607b      	str	r3, [r7, #4]
 80213ee:	f04f 0200 	mov.w	r2, #0
 80213f2:	f04f 0300 	mov.w	r3, #0
 80213f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80213fa:	4628      	mov	r0, r5
 80213fc:	0143      	lsls	r3, r0, #5
 80213fe:	4620      	mov	r0, r4
 8021400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021404:	4620      	mov	r0, r4
 8021406:	0142      	lsls	r2, r0, #5
 8021408:	460b      	mov	r3, r1
 802140a:	009b      	lsls	r3, r3, #2
 802140c:	3307      	adds	r3, #7
 802140e:	08db      	lsrs	r3, r3, #3
 8021410:	00db      	lsls	r3, r3, #3
 8021412:	ebad 0d03 	sub.w	sp, sp, r3
 8021416:	466b      	mov	r3, sp
 8021418:	3303      	adds	r3, #3
 802141a:	089b      	lsrs	r3, r3, #2
 802141c:	009b      	lsls	r3, r3, #2
 802141e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8021422:	e001      	b.n	8021428 <main+0x3dc>
 8021424:	08023acc 	.word	0x08023acc
	float StdDev_C, Avg_C;
	float StdDev_CMSIS, Avg_CMSIS;

	ITM_Port32(31) = 1;
 8021428:	4b74      	ldr	r3, [pc, #464]	@ (80215fc <main+0x5b0>)
 802142a:	2201      	movs	r2, #1
 802142c:	601a      	str	r2, [r3, #0]

	// To record the average run time of the C Kalman Filter
	for (int i=0;  i<1000; i++) {
 802142e:	2300      	movs	r3, #0
 8021430:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8021434:	e019      	b.n	802146a <main+0x41e>
		kalman_state ksC = {0.1f, 0.1f, 5.0f, 0.1f, 0.0f};
 8021436:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 802143a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 802143e:	4a70      	ldr	r2, [pc, #448]	@ (8021600 <main+0x5b4>)
 8021440:	461c      	mov	r4, r3
 8021442:	4615      	mov	r5, r2
 8021444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021448:	682b      	ldr	r3, [r5, #0]
 802144a:	6023      	str	r3, [r4, #0]
		KalmanfilterC(InputArray, OutputArrayC, &ksC, Length);
 802144c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8021450:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8021454:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8021458:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 802145c:	f7ff fc08 	bl	8020c70 <KalmanfilterC>
	for (int i=0;  i<1000; i++) {
 8021460:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8021464:	3301      	adds	r3, #1
 8021466:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 802146a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 802146e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021472:	dbe0      	blt.n	8021436 <main+0x3ea>
	}
	ITM_Port32(31) = 2;
 8021474:	4b61      	ldr	r3, [pc, #388]	@ (80215fc <main+0x5b0>)
 8021476:	2202      	movs	r2, #2
 8021478:	601a      	str	r2, [r3, #0]

	// To record the average run time of the C Kalman Filter
	for (int i=0;  i<1000; i++) {
 802147a:	2300      	movs	r3, #0
 802147c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8021480:	e019      	b.n	80214b6 <main+0x46a>
		kalman_state ksCMSIS = {0.1f, 0.1f, 5.0f, 0.1f, 0.0f};
 8021482:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8021486:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 802148a:	4a5d      	ldr	r2, [pc, #372]	@ (8021600 <main+0x5b4>)
 802148c:	461c      	mov	r4, r3
 802148e:	4615      	mov	r5, r2
 8021490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021494:	682b      	ldr	r3, [r5, #0]
 8021496:	6023      	str	r3, [r4, #0]
		KalmanfilterCMSIS(InputArray, OutputArrayCMSIS, &ksCMSIS, Length);
 8021498:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 802149c:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80214a0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80214a4:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 80214a8:	f7ff fbaf 	bl	8020c0a <KalmanfilterCMSIS>
	for (int i=0;  i<1000; i++) {
 80214ac:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80214b0:	3301      	adds	r3, #1
 80214b2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80214b6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80214ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80214be:	dbe0      	blt.n	8021482 <main+0x436>
	}
	ITM_Port32(31) = 3;
 80214c0:	4b4e      	ldr	r3, [pc, #312]	@ (80215fc <main+0x5b0>)
 80214c2:	2203      	movs	r2, #3
 80214c4:	601a      	str	r2, [r3, #0]

	// To record the average run time of the ARM Kalman Filter
	for (int i=0;  i<1000; i++) {
 80214c6:	2300      	movs	r3, #0
 80214c8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80214cc:	e019      	b.n	8021502 <main+0x4b6>
		kalman_state ksARM = {0.1f, 0.1f, 5.0f, 0.1f, 0.0f};
 80214ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80214d2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80214d6:	4a4a      	ldr	r2, [pc, #296]	@ (8021600 <main+0x5b4>)
 80214d8:	461c      	mov	r4, r3
 80214da:	4615      	mov	r5, r2
 80214dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80214de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80214e0:	682b      	ldr	r3, [r5, #0]
 80214e2:	6023      	str	r3, [r4, #0]
		KalmanfilterARM(InputArray, OutputArrayARM, &ksARM, Length);
 80214e4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80214e8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80214ec:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80214f0:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 80214f4:	f7ff fb56 	bl	8020ba4 <KalmanfilterARM>
	for (int i=0;  i<1000; i++) {
 80214f8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80214fc:	3301      	adds	r3, #1
 80214fe:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8021502:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8021506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802150a:	dbe0      	blt.n	80214ce <main+0x482>
	}
	ITM_Port32(31) = 4;
 802150c:	4b3b      	ldr	r3, [pc, #236]	@ (80215fc <main+0x5b0>)
 802150e:	2204      	movs	r2, #4
 8021510:	601a      	str	r2, [r3, #0]

	// Use SWV Trace Log to compute subroutine times

	for (int i=0;  i<1000; i++) {
 8021512:	2300      	movs	r3, #0
 8021514:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8021518:	e02c      	b.n	8021574 <main+0x528>
		ComputeDifferenceArraysC(InputArray, OutputArrayC, Difference_C, Length);
 802151a:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 802151e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8021522:	f8d7 2280 	ldr.w	r2, [r7, #640]	@ 0x280
 8021526:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 802152a:	f7ff fbd4 	bl	8020cd6 <ComputeDifferenceArraysC>
		ComputeAverageAndStandardDeviationArrayC(Difference_C, &Avg_C, &StdDev_C, Length);
 802152e:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8021532:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8021536:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 802153a:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 802153e:	f7ff fbf6 	bl	8020d2e <ComputeAverageAndStandardDeviationArrayC>
		ComputeCorrelationArraysC(InputArray, OutputArrayC, Correlation_C, Length);
 8021542:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8021546:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 802154a:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 802154e:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 8021552:	f7ff fcad 	bl	8020eb0 <ComputeCorrelationArraysC>
		ComputeConvolutionArraysC(InputArray, OutputArrayC, Convolution_C, Length);
 8021556:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 802155a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 802155e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8021562:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 8021566:	f7ff fc4f 	bl	8020e08 <ComputeConvolutionArraysC>
	for (int i=0;  i<1000; i++) {
 802156a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 802156e:	3301      	adds	r3, #1
 8021570:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8021574:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8021578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802157c:	dbcd      	blt.n	802151a <main+0x4ce>
	}
	ITM_Port32(31) = 5;
 802157e:	4b1f      	ldr	r3, [pc, #124]	@ (80215fc <main+0x5b0>)
 8021580:	2205      	movs	r2, #5
 8021582:	601a      	str	r2, [r3, #0]


	for (int i=0;  i<1000; i++) {
 8021584:	2300      	movs	r3, #0
 8021586:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 802158a:	e02c      	b.n	80215e6 <main+0x59a>
		ComputeDifferenceArraysCMSIS(InputArray, OutputArrayCMSIS, Difference_CMSIS, Length);
 802158c:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8021590:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8021594:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8021598:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 802159c:	f7ff fcf2 	bl	8020f84 <ComputeDifferenceArraysCMSIS>
		ComputeAverageAndStandardDeviationArrayCMSIS(Difference_CMSIS, &Avg_CMSIS, &StdDev_CMSIS, Length);
 80215a0:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 80215a4:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 80215a8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80215ac:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 80215b0:	f7ff fcf9 	bl	8020fa6 <ComputeAverageAndStandardDeviationArrayCMSIS>
		ComputeCorrelationArraysCMSIS(InputArray, OutputArrayCMSIS, Correlation_CMSIS, Length);
 80215b4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80215b8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80215bc:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80215c0:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 80215c4:	f7ff fd06 	bl	8020fd4 <ComputeCorrelationArraysCMSIS>
		ComputeConvolutionArraysCMSIS(InputArray, OutputArrayCMSIS, Convolution_CMSIS, Length);
 80215c8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80215cc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80215d0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80215d4:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 80215d8:	f7ff fd23 	bl	8021022 <ComputeConvolutionArraysCMSIS>
	for (int i=0;  i<1000; i++) {
 80215dc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80215e0:	3301      	adds	r3, #1
 80215e2:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80215e6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80215ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80215ee:	dbcd      	blt.n	802158c <main+0x540>
	}
	ITM_Port32(31) = 6;
 80215f0:	4b02      	ldr	r3, [pc, #8]	@ (80215fc <main+0x5b0>)
 80215f2:	2206      	movs	r2, #6
 80215f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80215f6:	bf00      	nop
 80215f8:	e7fd      	b.n	80215f6 <main+0x5aa>
 80215fa:	bf00      	nop
 80215fc:	e000007c 	.word	0xe000007c
 8021600:	08023c60 	.word	0x08023c60

08021604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021604:	b580      	push	{r7, lr}
 8021606:	b096      	sub	sp, #88	@ 0x58
 8021608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802160a:	f107 0314 	add.w	r3, r7, #20
 802160e:	2244      	movs	r2, #68	@ 0x44
 8021610:	2100      	movs	r1, #0
 8021612:	4618      	mov	r0, r3
 8021614:	f002 f8e6 	bl	80237e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021618:	463b      	mov	r3, r7
 802161a:	2200      	movs	r2, #0
 802161c:	601a      	str	r2, [r3, #0]
 802161e:	605a      	str	r2, [r3, #4]
 8021620:	609a      	str	r2, [r3, #8]
 8021622:	60da      	str	r2, [r3, #12]
 8021624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8021626:	2000      	movs	r0, #0
 8021628:	f000 fa72 	bl	8021b10 <HAL_PWREx_ControlVoltageScaling>
 802162c:	4603      	mov	r3, r0
 802162e:	2b00      	cmp	r3, #0
 8021630:	d001      	beq.n	8021636 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8021632:	f000 f85d 	bl	80216f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8021636:	2310      	movs	r3, #16
 8021638:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 802163a:	2301      	movs	r3, #1
 802163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 802163e:	2300      	movs	r3, #0
 8021640:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8021642:	2360      	movs	r3, #96	@ 0x60
 8021644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021646:	2302      	movs	r3, #2
 8021648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 802164a:	2301      	movs	r3, #1
 802164c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 802164e:	2301      	movs	r3, #1
 8021650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8021652:	233c      	movs	r3, #60	@ 0x3c
 8021654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021656:	2302      	movs	r3, #2
 8021658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 802165a:	2302      	movs	r3, #2
 802165c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 802165e:	2302      	movs	r3, #2
 8021660:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021662:	f107 0314 	add.w	r3, r7, #20
 8021666:	4618      	mov	r0, r3
 8021668:	f000 faf6 	bl	8021c58 <HAL_RCC_OscConfig>
 802166c:	4603      	mov	r3, r0
 802166e:	2b00      	cmp	r3, #0
 8021670:	d001      	beq.n	8021676 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8021672:	f000 f83d 	bl	80216f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021676:	230f      	movs	r3, #15
 8021678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802167a:	2303      	movs	r3, #3
 802167c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802167e:	2300      	movs	r3, #0
 8021680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8021682:	2300      	movs	r3, #0
 8021684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021686:	2300      	movs	r3, #0
 8021688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802168a:	463b      	mov	r3, r7
 802168c:	2105      	movs	r1, #5
 802168e:	4618      	mov	r0, r3
 8021690:	f000 fefc 	bl	802248c <HAL_RCC_ClockConfig>
 8021694:	4603      	mov	r3, r0
 8021696:	2b00      	cmp	r3, #0
 8021698:	d001      	beq.n	802169e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802169a:	f000 f829 	bl	80216f0 <Error_Handler>
  }
}
 802169e:	bf00      	nop
 80216a0:	3758      	adds	r7, #88	@ 0x58
 80216a2:	46bd      	mov	sp, r7
 80216a4:	bd80      	pop	{r7, pc}
	...

080216a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80216a8:	b480      	push	{r7}
 80216aa:	b083      	sub	sp, #12
 80216ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80216ae:	4b0f      	ldr	r3, [pc, #60]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216b2:	4a0e      	ldr	r2, [pc, #56]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216b4:	f043 0301 	orr.w	r3, r3, #1
 80216b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80216ba:	4b0c      	ldr	r3, [pc, #48]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216be:	f003 0301 	and.w	r3, r3, #1
 80216c2:	607b      	str	r3, [r7, #4]
 80216c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80216c6:	4b09      	ldr	r3, [pc, #36]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216ca:	4a08      	ldr	r2, [pc, #32]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216cc:	f043 0302 	orr.w	r3, r3, #2
 80216d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80216d2:	4b06      	ldr	r3, [pc, #24]	@ (80216ec <MX_GPIO_Init+0x44>)
 80216d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216d6:	f003 0302 	and.w	r3, r3, #2
 80216da:	603b      	str	r3, [r7, #0]
 80216dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80216de:	bf00      	nop
 80216e0:	370c      	adds	r7, #12
 80216e2:	46bd      	mov	sp, r7
 80216e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216e8:	4770      	bx	lr
 80216ea:	bf00      	nop
 80216ec:	40021000 	.word	0x40021000

080216f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80216f0:	b480      	push	{r7}
 80216f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80216f4:	b672      	cpsid	i
}
 80216f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80216f8:	bf00      	nop
 80216fa:	e7fd      	b.n	80216f8 <Error_Handler+0x8>

080216fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80216fc:	b480      	push	{r7}
 80216fe:	b083      	sub	sp, #12
 8021700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021702:	4b0f      	ldr	r3, [pc, #60]	@ (8021740 <HAL_MspInit+0x44>)
 8021704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021706:	4a0e      	ldr	r2, [pc, #56]	@ (8021740 <HAL_MspInit+0x44>)
 8021708:	f043 0301 	orr.w	r3, r3, #1
 802170c:	6613      	str	r3, [r2, #96]	@ 0x60
 802170e:	4b0c      	ldr	r3, [pc, #48]	@ (8021740 <HAL_MspInit+0x44>)
 8021710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021712:	f003 0301 	and.w	r3, r3, #1
 8021716:	607b      	str	r3, [r7, #4]
 8021718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802171a:	4b09      	ldr	r3, [pc, #36]	@ (8021740 <HAL_MspInit+0x44>)
 802171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802171e:	4a08      	ldr	r2, [pc, #32]	@ (8021740 <HAL_MspInit+0x44>)
 8021720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021724:	6593      	str	r3, [r2, #88]	@ 0x58
 8021726:	4b06      	ldr	r3, [pc, #24]	@ (8021740 <HAL_MspInit+0x44>)
 8021728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802172e:	603b      	str	r3, [r7, #0]
 8021730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021732:	bf00      	nop
 8021734:	370c      	adds	r7, #12
 8021736:	46bd      	mov	sp, r7
 8021738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802173c:	4770      	bx	lr
 802173e:	bf00      	nop
 8021740:	40021000 	.word	0x40021000

08021744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021744:	b480      	push	{r7}
 8021746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8021748:	bf00      	nop
 802174a:	e7fd      	b.n	8021748 <NMI_Handler+0x4>

0802174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802174c:	b480      	push	{r7}
 802174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021750:	bf00      	nop
 8021752:	e7fd      	b.n	8021750 <HardFault_Handler+0x4>

08021754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021754:	b480      	push	{r7}
 8021756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021758:	bf00      	nop
 802175a:	e7fd      	b.n	8021758 <MemManage_Handler+0x4>

0802175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802175c:	b480      	push	{r7}
 802175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021760:	bf00      	nop
 8021762:	e7fd      	b.n	8021760 <BusFault_Handler+0x4>

08021764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021764:	b480      	push	{r7}
 8021766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021768:	bf00      	nop
 802176a:	e7fd      	b.n	8021768 <UsageFault_Handler+0x4>

0802176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802176c:	b480      	push	{r7}
 802176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021770:	bf00      	nop
 8021772:	46bd      	mov	sp, r7
 8021774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021778:	4770      	bx	lr

0802177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802177a:	b480      	push	{r7}
 802177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802177e:	bf00      	nop
 8021780:	46bd      	mov	sp, r7
 8021782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021786:	4770      	bx	lr

08021788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021788:	b480      	push	{r7}
 802178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802178c:	bf00      	nop
 802178e:	46bd      	mov	sp, r7
 8021790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021794:	4770      	bx	lr

08021796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021796:	b580      	push	{r7, lr}
 8021798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802179a:	f000 f893 	bl	80218c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802179e:	bf00      	nop
 80217a0:	bd80      	pop	{r7, pc}
	...

080217a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80217a4:	b480      	push	{r7}
 80217a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80217a8:	4b06      	ldr	r3, [pc, #24]	@ (80217c4 <SystemInit+0x20>)
 80217aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80217ae:	4a05      	ldr	r2, [pc, #20]	@ (80217c4 <SystemInit+0x20>)
 80217b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80217b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80217b8:	bf00      	nop
 80217ba:	46bd      	mov	sp, r7
 80217bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c0:	4770      	bx	lr
 80217c2:	bf00      	nop
 80217c4:	e000ed00 	.word	0xe000ed00

080217c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80217c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8021800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80217cc:	f7ff ffea 	bl	80217a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80217d0:	480c      	ldr	r0, [pc, #48]	@ (8021804 <LoopForever+0x6>)
  ldr r1, =_edata
 80217d2:	490d      	ldr	r1, [pc, #52]	@ (8021808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80217d4:	4a0d      	ldr	r2, [pc, #52]	@ (802180c <LoopForever+0xe>)
  movs r3, #0
 80217d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80217d8:	e002      	b.n	80217e0 <LoopCopyDataInit>

080217da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80217da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80217dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80217de:	3304      	adds	r3, #4

080217e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80217e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80217e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80217e4:	d3f9      	bcc.n	80217da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80217e6:	4a0a      	ldr	r2, [pc, #40]	@ (8021810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80217e8:	4c0a      	ldr	r4, [pc, #40]	@ (8021814 <LoopForever+0x16>)
  movs r3, #0
 80217ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80217ec:	e001      	b.n	80217f2 <LoopFillZerobss>

080217ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80217ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80217f0:	3204      	adds	r2, #4

080217f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80217f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80217f4:	d3fb      	bcc.n	80217ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80217f6:	f002 f803 	bl	8023800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80217fa:	f7ff fc27 	bl	802104c <main>

080217fe <LoopForever>:

LoopForever:
    b LoopForever
 80217fe:	e7fe      	b.n	80217fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8021800:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8021804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021808:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 802180c:	08023cbc 	.word	0x08023cbc
  ldr r2, =_sbss
 8021810:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8021814:	200001c8 	.word	0x200001c8

08021818 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8021818:	e7fe      	b.n	8021818 <ADC1_IRQHandler>

0802181a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802181a:	b580      	push	{r7, lr}
 802181c:	b082      	sub	sp, #8
 802181e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8021820:	2300      	movs	r3, #0
 8021822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021824:	2003      	movs	r0, #3
 8021826:	f000 f91f 	bl	8021a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802182a:	2000      	movs	r0, #0
 802182c:	f000 f80e 	bl	802184c <HAL_InitTick>
 8021830:	4603      	mov	r3, r0
 8021832:	2b00      	cmp	r3, #0
 8021834:	d002      	beq.n	802183c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8021836:	2301      	movs	r3, #1
 8021838:	71fb      	strb	r3, [r7, #7]
 802183a:	e001      	b.n	8021840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 802183c:	f7ff ff5e 	bl	80216fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8021840:	79fb      	ldrb	r3, [r7, #7]
}
 8021842:	4618      	mov	r0, r3
 8021844:	3708      	adds	r7, #8
 8021846:	46bd      	mov	sp, r7
 8021848:	bd80      	pop	{r7, pc}
	...

0802184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b084      	sub	sp, #16
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8021854:	2300      	movs	r3, #0
 8021856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8021858:	4b17      	ldr	r3, [pc, #92]	@ (80218b8 <HAL_InitTick+0x6c>)
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	2b00      	cmp	r3, #0
 802185e:	d023      	beq.n	80218a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8021860:	4b16      	ldr	r3, [pc, #88]	@ (80218bc <HAL_InitTick+0x70>)
 8021862:	681a      	ldr	r2, [r3, #0]
 8021864:	4b14      	ldr	r3, [pc, #80]	@ (80218b8 <HAL_InitTick+0x6c>)
 8021866:	781b      	ldrb	r3, [r3, #0]
 8021868:	4619      	mov	r1, r3
 802186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8021872:	fbb2 f3f3 	udiv	r3, r2, r3
 8021876:	4618      	mov	r0, r3
 8021878:	f000 f91d 	bl	8021ab6 <HAL_SYSTICK_Config>
 802187c:	4603      	mov	r3, r0
 802187e:	2b00      	cmp	r3, #0
 8021880:	d10f      	bne.n	80218a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	2b0f      	cmp	r3, #15
 8021886:	d809      	bhi.n	802189c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021888:	2200      	movs	r2, #0
 802188a:	6879      	ldr	r1, [r7, #4]
 802188c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021890:	f000 f8f5 	bl	8021a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021894:	4a0a      	ldr	r2, [pc, #40]	@ (80218c0 <HAL_InitTick+0x74>)
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	6013      	str	r3, [r2, #0]
 802189a:	e007      	b.n	80218ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 802189c:	2301      	movs	r3, #1
 802189e:	73fb      	strb	r3, [r7, #15]
 80218a0:	e004      	b.n	80218ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80218a2:	2301      	movs	r3, #1
 80218a4:	73fb      	strb	r3, [r7, #15]
 80218a6:	e001      	b.n	80218ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80218a8:	2301      	movs	r3, #1
 80218aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80218ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80218ae:	4618      	mov	r0, r3
 80218b0:	3710      	adds	r7, #16
 80218b2:	46bd      	mov	sp, r7
 80218b4:	bd80      	pop	{r7, pc}
 80218b6:	bf00      	nop
 80218b8:	20000008 	.word	0x20000008
 80218bc:	20000000 	.word	0x20000000
 80218c0:	20000004 	.word	0x20000004

080218c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80218c4:	b480      	push	{r7}
 80218c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80218c8:	4b06      	ldr	r3, [pc, #24]	@ (80218e4 <HAL_IncTick+0x20>)
 80218ca:	781b      	ldrb	r3, [r3, #0]
 80218cc:	461a      	mov	r2, r3
 80218ce:	4b06      	ldr	r3, [pc, #24]	@ (80218e8 <HAL_IncTick+0x24>)
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	4413      	add	r3, r2
 80218d4:	4a04      	ldr	r2, [pc, #16]	@ (80218e8 <HAL_IncTick+0x24>)
 80218d6:	6013      	str	r3, [r2, #0]
}
 80218d8:	bf00      	nop
 80218da:	46bd      	mov	sp, r7
 80218dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e0:	4770      	bx	lr
 80218e2:	bf00      	nop
 80218e4:	20000008 	.word	0x20000008
 80218e8:	2000008c 	.word	0x2000008c

080218ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80218ec:	b480      	push	{r7}
 80218ee:	af00      	add	r7, sp, #0
  return uwTick;
 80218f0:	4b03      	ldr	r3, [pc, #12]	@ (8021900 <HAL_GetTick+0x14>)
 80218f2:	681b      	ldr	r3, [r3, #0]
}
 80218f4:	4618      	mov	r0, r3
 80218f6:	46bd      	mov	sp, r7
 80218f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218fc:	4770      	bx	lr
 80218fe:	bf00      	nop
 8021900:	2000008c 	.word	0x2000008c

08021904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021904:	b480      	push	{r7}
 8021906:	b085      	sub	sp, #20
 8021908:	af00      	add	r7, sp, #0
 802190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802190c:	687b      	ldr	r3, [r7, #4]
 802190e:	f003 0307 	and.w	r3, r3, #7
 8021912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021914:	4b0c      	ldr	r3, [pc, #48]	@ (8021948 <__NVIC_SetPriorityGrouping+0x44>)
 8021916:	68db      	ldr	r3, [r3, #12]
 8021918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802191a:	68ba      	ldr	r2, [r7, #8]
 802191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8021920:	4013      	ands	r3, r2
 8021922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021928:	68bb      	ldr	r3, [r7, #8]
 802192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8021930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8021934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021936:	4a04      	ldr	r2, [pc, #16]	@ (8021948 <__NVIC_SetPriorityGrouping+0x44>)
 8021938:	68bb      	ldr	r3, [r7, #8]
 802193a:	60d3      	str	r3, [r2, #12]
}
 802193c:	bf00      	nop
 802193e:	3714      	adds	r7, #20
 8021940:	46bd      	mov	sp, r7
 8021942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021946:	4770      	bx	lr
 8021948:	e000ed00 	.word	0xe000ed00

0802194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802194c:	b480      	push	{r7}
 802194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021950:	4b04      	ldr	r3, [pc, #16]	@ (8021964 <__NVIC_GetPriorityGrouping+0x18>)
 8021952:	68db      	ldr	r3, [r3, #12]
 8021954:	0a1b      	lsrs	r3, r3, #8
 8021956:	f003 0307 	and.w	r3, r3, #7
}
 802195a:	4618      	mov	r0, r3
 802195c:	46bd      	mov	sp, r7
 802195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021962:	4770      	bx	lr
 8021964:	e000ed00 	.word	0xe000ed00

08021968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021968:	b480      	push	{r7}
 802196a:	b083      	sub	sp, #12
 802196c:	af00      	add	r7, sp, #0
 802196e:	4603      	mov	r3, r0
 8021970:	6039      	str	r1, [r7, #0]
 8021972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021978:	2b00      	cmp	r3, #0
 802197a:	db0a      	blt.n	8021992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802197c:	683b      	ldr	r3, [r7, #0]
 802197e:	b2da      	uxtb	r2, r3
 8021980:	490c      	ldr	r1, [pc, #48]	@ (80219b4 <__NVIC_SetPriority+0x4c>)
 8021982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021986:	0112      	lsls	r2, r2, #4
 8021988:	b2d2      	uxtb	r2, r2
 802198a:	440b      	add	r3, r1
 802198c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021990:	e00a      	b.n	80219a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021992:	683b      	ldr	r3, [r7, #0]
 8021994:	b2da      	uxtb	r2, r3
 8021996:	4908      	ldr	r1, [pc, #32]	@ (80219b8 <__NVIC_SetPriority+0x50>)
 8021998:	79fb      	ldrb	r3, [r7, #7]
 802199a:	f003 030f 	and.w	r3, r3, #15
 802199e:	3b04      	subs	r3, #4
 80219a0:	0112      	lsls	r2, r2, #4
 80219a2:	b2d2      	uxtb	r2, r2
 80219a4:	440b      	add	r3, r1
 80219a6:	761a      	strb	r2, [r3, #24]
}
 80219a8:	bf00      	nop
 80219aa:	370c      	adds	r7, #12
 80219ac:	46bd      	mov	sp, r7
 80219ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b2:	4770      	bx	lr
 80219b4:	e000e100 	.word	0xe000e100
 80219b8:	e000ed00 	.word	0xe000ed00

080219bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80219bc:	b480      	push	{r7}
 80219be:	b089      	sub	sp, #36	@ 0x24
 80219c0:	af00      	add	r7, sp, #0
 80219c2:	60f8      	str	r0, [r7, #12]
 80219c4:	60b9      	str	r1, [r7, #8]
 80219c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	f003 0307 	and.w	r3, r3, #7
 80219ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80219d0:	69fb      	ldr	r3, [r7, #28]
 80219d2:	f1c3 0307 	rsb	r3, r3, #7
 80219d6:	2b04      	cmp	r3, #4
 80219d8:	bf28      	it	cs
 80219da:	2304      	movcs	r3, #4
 80219dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80219de:	69fb      	ldr	r3, [r7, #28]
 80219e0:	3304      	adds	r3, #4
 80219e2:	2b06      	cmp	r3, #6
 80219e4:	d902      	bls.n	80219ec <NVIC_EncodePriority+0x30>
 80219e6:	69fb      	ldr	r3, [r7, #28]
 80219e8:	3b03      	subs	r3, #3
 80219ea:	e000      	b.n	80219ee <NVIC_EncodePriority+0x32>
 80219ec:	2300      	movs	r3, #0
 80219ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80219f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80219f4:	69bb      	ldr	r3, [r7, #24]
 80219f6:	fa02 f303 	lsl.w	r3, r2, r3
 80219fa:	43da      	mvns	r2, r3
 80219fc:	68bb      	ldr	r3, [r7, #8]
 80219fe:	401a      	ands	r2, r3
 8021a00:	697b      	ldr	r3, [r7, #20]
 8021a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8021a08:	697b      	ldr	r3, [r7, #20]
 8021a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8021a0e:	43d9      	mvns	r1, r3
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021a14:	4313      	orrs	r3, r2
         );
}
 8021a16:	4618      	mov	r0, r3
 8021a18:	3724      	adds	r7, #36	@ 0x24
 8021a1a:	46bd      	mov	sp, r7
 8021a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a20:	4770      	bx	lr
	...

08021a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b082      	sub	sp, #8
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	3b01      	subs	r3, #1
 8021a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021a34:	d301      	bcc.n	8021a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021a36:	2301      	movs	r3, #1
 8021a38:	e00f      	b.n	8021a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8021a64 <SysTick_Config+0x40>)
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	3b01      	subs	r3, #1
 8021a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021a42:	210f      	movs	r1, #15
 8021a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a48:	f7ff ff8e 	bl	8021968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021a4c:	4b05      	ldr	r3, [pc, #20]	@ (8021a64 <SysTick_Config+0x40>)
 8021a4e:	2200      	movs	r2, #0
 8021a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021a52:	4b04      	ldr	r3, [pc, #16]	@ (8021a64 <SysTick_Config+0x40>)
 8021a54:	2207      	movs	r2, #7
 8021a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021a58:	2300      	movs	r3, #0
}
 8021a5a:	4618      	mov	r0, r3
 8021a5c:	3708      	adds	r7, #8
 8021a5e:	46bd      	mov	sp, r7
 8021a60:	bd80      	pop	{r7, pc}
 8021a62:	bf00      	nop
 8021a64:	e000e010 	.word	0xe000e010

08021a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021a68:	b580      	push	{r7, lr}
 8021a6a:	b082      	sub	sp, #8
 8021a6c:	af00      	add	r7, sp, #0
 8021a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021a70:	6878      	ldr	r0, [r7, #4]
 8021a72:	f7ff ff47 	bl	8021904 <__NVIC_SetPriorityGrouping>
}
 8021a76:	bf00      	nop
 8021a78:	3708      	adds	r7, #8
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	bd80      	pop	{r7, pc}

08021a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021a7e:	b580      	push	{r7, lr}
 8021a80:	b086      	sub	sp, #24
 8021a82:	af00      	add	r7, sp, #0
 8021a84:	4603      	mov	r3, r0
 8021a86:	60b9      	str	r1, [r7, #8]
 8021a88:	607a      	str	r2, [r7, #4]
 8021a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8021a90:	f7ff ff5c 	bl	802194c <__NVIC_GetPriorityGrouping>
 8021a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021a96:	687a      	ldr	r2, [r7, #4]
 8021a98:	68b9      	ldr	r1, [r7, #8]
 8021a9a:	6978      	ldr	r0, [r7, #20]
 8021a9c:	f7ff ff8e 	bl	80219bc <NVIC_EncodePriority>
 8021aa0:	4602      	mov	r2, r0
 8021aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021aa6:	4611      	mov	r1, r2
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	f7ff ff5d 	bl	8021968 <__NVIC_SetPriority>
}
 8021aae:	bf00      	nop
 8021ab0:	3718      	adds	r7, #24
 8021ab2:	46bd      	mov	sp, r7
 8021ab4:	bd80      	pop	{r7, pc}

08021ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8021ab6:	b580      	push	{r7, lr}
 8021ab8:	b082      	sub	sp, #8
 8021aba:	af00      	add	r7, sp, #0
 8021abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	f7ff ffb0 	bl	8021a24 <SysTick_Config>
 8021ac4:	4603      	mov	r3, r0
}
 8021ac6:	4618      	mov	r0, r3
 8021ac8:	3708      	adds	r7, #8
 8021aca:	46bd      	mov	sp, r7
 8021acc:	bd80      	pop	{r7, pc}
	...

08021ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8021ad0:	b480      	push	{r7}
 8021ad2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8021b0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8021ad6:	681b      	ldr	r3, [r3, #0]
 8021ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021ae0:	d102      	bne.n	8021ae8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8021ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021ae6:	e00b      	b.n	8021b00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8021ae8:	4b08      	ldr	r3, [pc, #32]	@ (8021b0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8021aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021af6:	d102      	bne.n	8021afe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8021af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021afc:	e000      	b.n	8021b00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8021afe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8021b00:	4618      	mov	r0, r3
 8021b02:	46bd      	mov	sp, r7
 8021b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b08:	4770      	bx	lr
 8021b0a:	bf00      	nop
 8021b0c:	40007000 	.word	0x40007000

08021b10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8021b10:	b480      	push	{r7}
 8021b12:	b085      	sub	sp, #20
 8021b14:	af00      	add	r7, sp, #0
 8021b16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d141      	bne.n	8021ba2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b2a:	d131      	bne.n	8021b90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021b2c:	4b47      	ldr	r3, [pc, #284]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021b32:	4a46      	ldr	r2, [pc, #280]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021b38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021b3c:	4b43      	ldr	r3, [pc, #268]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021b44:	4a41      	ldr	r2, [pc, #260]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021b4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021b4c:	4b40      	ldr	r3, [pc, #256]	@ (8021c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021b4e:	681b      	ldr	r3, [r3, #0]
 8021b50:	2232      	movs	r2, #50	@ 0x32
 8021b52:	fb02 f303 	mul.w	r3, r2, r3
 8021b56:	4a3f      	ldr	r2, [pc, #252]	@ (8021c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021b58:	fba2 2303 	umull	r2, r3, r2, r3
 8021b5c:	0c9b      	lsrs	r3, r3, #18
 8021b5e:	3301      	adds	r3, #1
 8021b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021b62:	e002      	b.n	8021b6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8021b64:	68fb      	ldr	r3, [r7, #12]
 8021b66:	3b01      	subs	r3, #1
 8021b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021b6a:	4b38      	ldr	r3, [pc, #224]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b6c:	695b      	ldr	r3, [r3, #20]
 8021b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b76:	d102      	bne.n	8021b7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d1f2      	bne.n	8021b64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021b7e:	4b33      	ldr	r3, [pc, #204]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b80:	695b      	ldr	r3, [r3, #20]
 8021b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021b8a:	d158      	bne.n	8021c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021b8c:	2303      	movs	r3, #3
 8021b8e:	e057      	b.n	8021c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021b90:	4b2e      	ldr	r3, [pc, #184]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021b96:	4a2d      	ldr	r2, [pc, #180]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8021ba0:	e04d      	b.n	8021c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021ba8:	d141      	bne.n	8021c2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8021baa:	4b28      	ldr	r3, [pc, #160]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8021bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021bb6:	d131      	bne.n	8021c1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021bb8:	4b24      	ldr	r3, [pc, #144]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021bbe:	4a23      	ldr	r2, [pc, #140]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8021bc8:	4b20      	ldr	r3, [pc, #128]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bca:	681b      	ldr	r3, [r3, #0]
 8021bcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8021bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8021bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8021c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8021bda:	681b      	ldr	r3, [r3, #0]
 8021bdc:	2232      	movs	r2, #50	@ 0x32
 8021bde:	fb02 f303 	mul.w	r3, r2, r3
 8021be2:	4a1c      	ldr	r2, [pc, #112]	@ (8021c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8021be4:	fba2 2303 	umull	r2, r3, r2, r3
 8021be8:	0c9b      	lsrs	r3, r3, #18
 8021bea:	3301      	adds	r3, #1
 8021bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021bee:	e002      	b.n	8021bf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8021bf0:	68fb      	ldr	r3, [r7, #12]
 8021bf2:	3b01      	subs	r3, #1
 8021bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8021bf6:	4b15      	ldr	r3, [pc, #84]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021bf8:	695b      	ldr	r3, [r3, #20]
 8021bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021c02:	d102      	bne.n	8021c0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8021c04:	68fb      	ldr	r3, [r7, #12]
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	d1f2      	bne.n	8021bf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8021c0a:	4b10      	ldr	r3, [pc, #64]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c0c:	695b      	ldr	r3, [r3, #20]
 8021c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021c16:	d112      	bne.n	8021c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8021c18:	2303      	movs	r3, #3
 8021c1a:	e011      	b.n	8021c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8021c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8021c22:	4a0a      	ldr	r2, [pc, #40]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8021c2c:	e007      	b.n	8021c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8021c2e:	4b07      	ldr	r3, [pc, #28]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c30:	681b      	ldr	r3, [r3, #0]
 8021c32:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8021c36:	4a05      	ldr	r2, [pc, #20]	@ (8021c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8021c38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8021c3c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8021c3e:	2300      	movs	r3, #0
}
 8021c40:	4618      	mov	r0, r3
 8021c42:	3714      	adds	r7, #20
 8021c44:	46bd      	mov	sp, r7
 8021c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c4a:	4770      	bx	lr
 8021c4c:	40007000 	.word	0x40007000
 8021c50:	20000000 	.word	0x20000000
 8021c54:	431bde83 	.word	0x431bde83

08021c58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021c58:	b580      	push	{r7, lr}
 8021c5a:	b088      	sub	sp, #32
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d102      	bne.n	8021c6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8021c66:	2301      	movs	r3, #1
 8021c68:	f000 bc08 	b.w	802247c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021c6c:	4b96      	ldr	r3, [pc, #600]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021c6e:	689b      	ldr	r3, [r3, #8]
 8021c70:	f003 030c 	and.w	r3, r3, #12
 8021c74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021c76:	4b94      	ldr	r3, [pc, #592]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021c78:	68db      	ldr	r3, [r3, #12]
 8021c7a:	f003 0303 	and.w	r3, r3, #3
 8021c7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	f003 0310 	and.w	r3, r3, #16
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	f000 80e4 	beq.w	8021e56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8021c8e:	69bb      	ldr	r3, [r7, #24]
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d007      	beq.n	8021ca4 <HAL_RCC_OscConfig+0x4c>
 8021c94:	69bb      	ldr	r3, [r7, #24]
 8021c96:	2b0c      	cmp	r3, #12
 8021c98:	f040 808b 	bne.w	8021db2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8021c9c:	697b      	ldr	r3, [r7, #20]
 8021c9e:	2b01      	cmp	r3, #1
 8021ca0:	f040 8087 	bne.w	8021db2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021ca4:	4b88      	ldr	r3, [pc, #544]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021ca6:	681b      	ldr	r3, [r3, #0]
 8021ca8:	f003 0302 	and.w	r3, r3, #2
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d005      	beq.n	8021cbc <HAL_RCC_OscConfig+0x64>
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	699b      	ldr	r3, [r3, #24]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d101      	bne.n	8021cbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8021cb8:	2301      	movs	r3, #1
 8021cba:	e3df      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	6a1a      	ldr	r2, [r3, #32]
 8021cc0:	4b81      	ldr	r3, [pc, #516]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	f003 0308 	and.w	r3, r3, #8
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d004      	beq.n	8021cd6 <HAL_RCC_OscConfig+0x7e>
 8021ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021cce:	681b      	ldr	r3, [r3, #0]
 8021cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021cd4:	e005      	b.n	8021ce2 <HAL_RCC_OscConfig+0x8a>
 8021cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021cdc:	091b      	lsrs	r3, r3, #4
 8021cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021ce2:	4293      	cmp	r3, r2
 8021ce4:	d223      	bcs.n	8021d2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	6a1b      	ldr	r3, [r3, #32]
 8021cea:	4618      	mov	r0, r3
 8021cec:	f000 fd94 	bl	8022818 <RCC_SetFlashLatencyFromMSIRange>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d001      	beq.n	8021cfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8021cf6:	2301      	movs	r3, #1
 8021cf8:	e3c0      	b.n	802247c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021cfa:	4b73      	ldr	r3, [pc, #460]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	4a72      	ldr	r2, [pc, #456]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d00:	f043 0308 	orr.w	r3, r3, #8
 8021d04:	6013      	str	r3, [r2, #0]
 8021d06:	4b70      	ldr	r3, [pc, #448]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	6a1b      	ldr	r3, [r3, #32]
 8021d12:	496d      	ldr	r1, [pc, #436]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d14:	4313      	orrs	r3, r2
 8021d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d18:	4b6b      	ldr	r3, [pc, #428]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d1a:	685b      	ldr	r3, [r3, #4]
 8021d1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	69db      	ldr	r3, [r3, #28]
 8021d24:	021b      	lsls	r3, r3, #8
 8021d26:	4968      	ldr	r1, [pc, #416]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d28:	4313      	orrs	r3, r2
 8021d2a:	604b      	str	r3, [r1, #4]
 8021d2c:	e025      	b.n	8021d7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021d2e:	4b66      	ldr	r3, [pc, #408]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	4a65      	ldr	r2, [pc, #404]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d34:	f043 0308 	orr.w	r3, r3, #8
 8021d38:	6013      	str	r3, [r2, #0]
 8021d3a:	4b63      	ldr	r3, [pc, #396]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	6a1b      	ldr	r3, [r3, #32]
 8021d46:	4960      	ldr	r1, [pc, #384]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d48:	4313      	orrs	r3, r2
 8021d4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d4e:	685b      	ldr	r3, [r3, #4]
 8021d50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	69db      	ldr	r3, [r3, #28]
 8021d58:	021b      	lsls	r3, r3, #8
 8021d5a:	495b      	ldr	r1, [pc, #364]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d5c:	4313      	orrs	r3, r2
 8021d5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8021d60:	69bb      	ldr	r3, [r7, #24]
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d109      	bne.n	8021d7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	6a1b      	ldr	r3, [r3, #32]
 8021d6a:	4618      	mov	r0, r3
 8021d6c:	f000 fd54 	bl	8022818 <RCC_SetFlashLatencyFromMSIRange>
 8021d70:	4603      	mov	r3, r0
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d001      	beq.n	8021d7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8021d76:	2301      	movs	r3, #1
 8021d78:	e380      	b.n	802247c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8021d7a:	f000 fcc1 	bl	8022700 <HAL_RCC_GetSysClockFreq>
 8021d7e:	4602      	mov	r2, r0
 8021d80:	4b51      	ldr	r3, [pc, #324]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021d82:	689b      	ldr	r3, [r3, #8]
 8021d84:	091b      	lsrs	r3, r3, #4
 8021d86:	f003 030f 	and.w	r3, r3, #15
 8021d8a:	4950      	ldr	r1, [pc, #320]	@ (8021ecc <HAL_RCC_OscConfig+0x274>)
 8021d8c:	5ccb      	ldrb	r3, [r1, r3]
 8021d8e:	f003 031f 	and.w	r3, r3, #31
 8021d92:	fa22 f303 	lsr.w	r3, r2, r3
 8021d96:	4a4e      	ldr	r2, [pc, #312]	@ (8021ed0 <HAL_RCC_OscConfig+0x278>)
 8021d98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8021d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8021ed4 <HAL_RCC_OscConfig+0x27c>)
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	4618      	mov	r0, r3
 8021da0:	f7ff fd54 	bl	802184c <HAL_InitTick>
 8021da4:	4603      	mov	r3, r0
 8021da6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8021da8:	7bfb      	ldrb	r3, [r7, #15]
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	d052      	beq.n	8021e54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8021dae:	7bfb      	ldrb	r3, [r7, #15]
 8021db0:	e364      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	699b      	ldr	r3, [r3, #24]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d032      	beq.n	8021e20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021dba:	4b43      	ldr	r3, [pc, #268]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	4a42      	ldr	r2, [pc, #264]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021dc0:	f043 0301 	orr.w	r3, r3, #1
 8021dc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021dc6:	f7ff fd91 	bl	80218ec <HAL_GetTick>
 8021dca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021dcc:	e008      	b.n	8021de0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021dce:	f7ff fd8d 	bl	80218ec <HAL_GetTick>
 8021dd2:	4602      	mov	r2, r0
 8021dd4:	693b      	ldr	r3, [r7, #16]
 8021dd6:	1ad3      	subs	r3, r2, r3
 8021dd8:	2b02      	cmp	r3, #2
 8021dda:	d901      	bls.n	8021de0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8021ddc:	2303      	movs	r3, #3
 8021dde:	e34d      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8021de0:	4b39      	ldr	r3, [pc, #228]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021de2:	681b      	ldr	r3, [r3, #0]
 8021de4:	f003 0302 	and.w	r3, r3, #2
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d0f0      	beq.n	8021dce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021dec:	4b36      	ldr	r3, [pc, #216]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	4a35      	ldr	r2, [pc, #212]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021df2:	f043 0308 	orr.w	r3, r3, #8
 8021df6:	6013      	str	r3, [r2, #0]
 8021df8:	4b33      	ldr	r3, [pc, #204]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	6a1b      	ldr	r3, [r3, #32]
 8021e04:	4930      	ldr	r1, [pc, #192]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e06:	4313      	orrs	r3, r2
 8021e08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e0c:	685b      	ldr	r3, [r3, #4]
 8021e0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	69db      	ldr	r3, [r3, #28]
 8021e16:	021b      	lsls	r3, r3, #8
 8021e18:	492b      	ldr	r1, [pc, #172]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e1a:	4313      	orrs	r3, r2
 8021e1c:	604b      	str	r3, [r1, #4]
 8021e1e:	e01a      	b.n	8021e56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021e20:	4b29      	ldr	r3, [pc, #164]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	4a28      	ldr	r2, [pc, #160]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e26:	f023 0301 	bic.w	r3, r3, #1
 8021e2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021e2c:	f7ff fd5e 	bl	80218ec <HAL_GetTick>
 8021e30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021e32:	e008      	b.n	8021e46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021e34:	f7ff fd5a 	bl	80218ec <HAL_GetTick>
 8021e38:	4602      	mov	r2, r0
 8021e3a:	693b      	ldr	r3, [r7, #16]
 8021e3c:	1ad3      	subs	r3, r2, r3
 8021e3e:	2b02      	cmp	r3, #2
 8021e40:	d901      	bls.n	8021e46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8021e42:	2303      	movs	r3, #3
 8021e44:	e31a      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8021e46:	4b20      	ldr	r3, [pc, #128]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	f003 0302 	and.w	r3, r3, #2
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d1f0      	bne.n	8021e34 <HAL_RCC_OscConfig+0x1dc>
 8021e52:	e000      	b.n	8021e56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8021e54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	f003 0301 	and.w	r3, r3, #1
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d073      	beq.n	8021f4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8021e62:	69bb      	ldr	r3, [r7, #24]
 8021e64:	2b08      	cmp	r3, #8
 8021e66:	d005      	beq.n	8021e74 <HAL_RCC_OscConfig+0x21c>
 8021e68:	69bb      	ldr	r3, [r7, #24]
 8021e6a:	2b0c      	cmp	r3, #12
 8021e6c:	d10e      	bne.n	8021e8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021e6e:	697b      	ldr	r3, [r7, #20]
 8021e70:	2b03      	cmp	r3, #3
 8021e72:	d10b      	bne.n	8021e8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021e74:	4b14      	ldr	r3, [pc, #80]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e76:	681b      	ldr	r3, [r3, #0]
 8021e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d063      	beq.n	8021f48 <HAL_RCC_OscConfig+0x2f0>
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	685b      	ldr	r3, [r3, #4]
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d15f      	bne.n	8021f48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8021e88:	2301      	movs	r3, #1
 8021e8a:	e2f7      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	685b      	ldr	r3, [r3, #4]
 8021e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021e94:	d106      	bne.n	8021ea4 <HAL_RCC_OscConfig+0x24c>
 8021e96:	4b0c      	ldr	r3, [pc, #48]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021ea0:	6013      	str	r3, [r2, #0]
 8021ea2:	e025      	b.n	8021ef0 <HAL_RCC_OscConfig+0x298>
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	685b      	ldr	r3, [r3, #4]
 8021ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021eac:	d114      	bne.n	8021ed8 <HAL_RCC_OscConfig+0x280>
 8021eae:	4b06      	ldr	r3, [pc, #24]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	4a05      	ldr	r2, [pc, #20]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021eb8:	6013      	str	r3, [r2, #0]
 8021eba:	4b03      	ldr	r3, [pc, #12]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	4a02      	ldr	r2, [pc, #8]	@ (8021ec8 <HAL_RCC_OscConfig+0x270>)
 8021ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021ec4:	6013      	str	r3, [r2, #0]
 8021ec6:	e013      	b.n	8021ef0 <HAL_RCC_OscConfig+0x298>
 8021ec8:	40021000 	.word	0x40021000
 8021ecc:	08023c74 	.word	0x08023c74
 8021ed0:	20000000 	.word	0x20000000
 8021ed4:	20000004 	.word	0x20000004
 8021ed8:	4ba0      	ldr	r3, [pc, #640]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	4a9f      	ldr	r2, [pc, #636]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021ee2:	6013      	str	r3, [r2, #0]
 8021ee4:	4b9d      	ldr	r3, [pc, #628]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	4a9c      	ldr	r2, [pc, #624]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	685b      	ldr	r3, [r3, #4]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d013      	beq.n	8021f20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ef8:	f7ff fcf8 	bl	80218ec <HAL_GetTick>
 8021efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021efe:	e008      	b.n	8021f12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f00:	f7ff fcf4 	bl	80218ec <HAL_GetTick>
 8021f04:	4602      	mov	r2, r0
 8021f06:	693b      	ldr	r3, [r7, #16]
 8021f08:	1ad3      	subs	r3, r2, r3
 8021f0a:	2b64      	cmp	r3, #100	@ 0x64
 8021f0c:	d901      	bls.n	8021f12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8021f0e:	2303      	movs	r3, #3
 8021f10:	e2b4      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8021f12:	4b92      	ldr	r3, [pc, #584]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d0f0      	beq.n	8021f00 <HAL_RCC_OscConfig+0x2a8>
 8021f1e:	e014      	b.n	8021f4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f20:	f7ff fce4 	bl	80218ec <HAL_GetTick>
 8021f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021f26:	e008      	b.n	8021f3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f28:	f7ff fce0 	bl	80218ec <HAL_GetTick>
 8021f2c:	4602      	mov	r2, r0
 8021f2e:	693b      	ldr	r3, [r7, #16]
 8021f30:	1ad3      	subs	r3, r2, r3
 8021f32:	2b64      	cmp	r3, #100	@ 0x64
 8021f34:	d901      	bls.n	8021f3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8021f36:	2303      	movs	r3, #3
 8021f38:	e2a0      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8021f3a:	4b88      	ldr	r3, [pc, #544]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d1f0      	bne.n	8021f28 <HAL_RCC_OscConfig+0x2d0>
 8021f46:	e000      	b.n	8021f4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	f003 0302 	and.w	r3, r3, #2
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d060      	beq.n	8022018 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8021f56:	69bb      	ldr	r3, [r7, #24]
 8021f58:	2b04      	cmp	r3, #4
 8021f5a:	d005      	beq.n	8021f68 <HAL_RCC_OscConfig+0x310>
 8021f5c:	69bb      	ldr	r3, [r7, #24]
 8021f5e:	2b0c      	cmp	r3, #12
 8021f60:	d119      	bne.n	8021f96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021f62:	697b      	ldr	r3, [r7, #20]
 8021f64:	2b02      	cmp	r3, #2
 8021f66:	d116      	bne.n	8021f96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021f68:	4b7c      	ldr	r3, [pc, #496]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	d005      	beq.n	8021f80 <HAL_RCC_OscConfig+0x328>
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	68db      	ldr	r3, [r3, #12]
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d101      	bne.n	8021f80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8021f7c:	2301      	movs	r3, #1
 8021f7e:	e27d      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021f80:	4b76      	ldr	r3, [pc, #472]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021f82:	685b      	ldr	r3, [r3, #4]
 8021f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	691b      	ldr	r3, [r3, #16]
 8021f8c:	061b      	lsls	r3, r3, #24
 8021f8e:	4973      	ldr	r1, [pc, #460]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021f90:	4313      	orrs	r3, r2
 8021f92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021f94:	e040      	b.n	8022018 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	68db      	ldr	r3, [r3, #12]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d023      	beq.n	8021fe6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021f9e:	4b6f      	ldr	r3, [pc, #444]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	4a6e      	ldr	r2, [pc, #440]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8021fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021faa:	f7ff fc9f 	bl	80218ec <HAL_GetTick>
 8021fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021fb0:	e008      	b.n	8021fc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021fb2:	f7ff fc9b 	bl	80218ec <HAL_GetTick>
 8021fb6:	4602      	mov	r2, r0
 8021fb8:	693b      	ldr	r3, [r7, #16]
 8021fba:	1ad3      	subs	r3, r2, r3
 8021fbc:	2b02      	cmp	r3, #2
 8021fbe:	d901      	bls.n	8021fc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8021fc0:	2303      	movs	r3, #3
 8021fc2:	e25b      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8021fc4:	4b65      	ldr	r3, [pc, #404]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d0f0      	beq.n	8021fb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021fd0:	4b62      	ldr	r3, [pc, #392]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fd2:	685b      	ldr	r3, [r3, #4]
 8021fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021fd8:	687b      	ldr	r3, [r7, #4]
 8021fda:	691b      	ldr	r3, [r3, #16]
 8021fdc:	061b      	lsls	r3, r3, #24
 8021fde:	495f      	ldr	r1, [pc, #380]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fe0:	4313      	orrs	r3, r2
 8021fe2:	604b      	str	r3, [r1, #4]
 8021fe4:	e018      	b.n	8022018 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021fe6:	4b5d      	ldr	r3, [pc, #372]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fe8:	681b      	ldr	r3, [r3, #0]
 8021fea:	4a5c      	ldr	r2, [pc, #368]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8021fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ff2:	f7ff fc7b 	bl	80218ec <HAL_GetTick>
 8021ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8021ff8:	e008      	b.n	802200c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021ffa:	f7ff fc77 	bl	80218ec <HAL_GetTick>
 8021ffe:	4602      	mov	r2, r0
 8022000:	693b      	ldr	r3, [r7, #16]
 8022002:	1ad3      	subs	r3, r2, r3
 8022004:	2b02      	cmp	r3, #2
 8022006:	d901      	bls.n	802200c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8022008:	2303      	movs	r3, #3
 802200a:	e237      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 802200c:	4b53      	ldr	r3, [pc, #332]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 802200e:	681b      	ldr	r3, [r3, #0]
 8022010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8022014:	2b00      	cmp	r3, #0
 8022016:	d1f0      	bne.n	8021ffa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	f003 0308 	and.w	r3, r3, #8
 8022020:	2b00      	cmp	r3, #0
 8022022:	d03c      	beq.n	802209e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	695b      	ldr	r3, [r3, #20]
 8022028:	2b00      	cmp	r3, #0
 802202a:	d01c      	beq.n	8022066 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802202c:	4b4b      	ldr	r3, [pc, #300]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 802202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022032:	4a4a      	ldr	r2, [pc, #296]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022034:	f043 0301 	orr.w	r3, r3, #1
 8022038:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802203c:	f7ff fc56 	bl	80218ec <HAL_GetTick>
 8022040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8022042:	e008      	b.n	8022056 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022044:	f7ff fc52 	bl	80218ec <HAL_GetTick>
 8022048:	4602      	mov	r2, r0
 802204a:	693b      	ldr	r3, [r7, #16]
 802204c:	1ad3      	subs	r3, r2, r3
 802204e:	2b02      	cmp	r3, #2
 8022050:	d901      	bls.n	8022056 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8022052:	2303      	movs	r3, #3
 8022054:	e212      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8022056:	4b41      	ldr	r3, [pc, #260]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802205c:	f003 0302 	and.w	r3, r3, #2
 8022060:	2b00      	cmp	r3, #0
 8022062:	d0ef      	beq.n	8022044 <HAL_RCC_OscConfig+0x3ec>
 8022064:	e01b      	b.n	802209e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022066:	4b3d      	ldr	r3, [pc, #244]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802206c:	4a3b      	ldr	r2, [pc, #236]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 802206e:	f023 0301 	bic.w	r3, r3, #1
 8022072:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022076:	f7ff fc39 	bl	80218ec <HAL_GetTick>
 802207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 802207c:	e008      	b.n	8022090 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802207e:	f7ff fc35 	bl	80218ec <HAL_GetTick>
 8022082:	4602      	mov	r2, r0
 8022084:	693b      	ldr	r3, [r7, #16]
 8022086:	1ad3      	subs	r3, r2, r3
 8022088:	2b02      	cmp	r3, #2
 802208a:	d901      	bls.n	8022090 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 802208c:	2303      	movs	r3, #3
 802208e:	e1f5      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8022090:	4b32      	ldr	r3, [pc, #200]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022096:	f003 0302 	and.w	r3, r3, #2
 802209a:	2b00      	cmp	r3, #0
 802209c:	d1ef      	bne.n	802207e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	f003 0304 	and.w	r3, r3, #4
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	f000 80a6 	beq.w	80221f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80220ac:	2300      	movs	r3, #0
 80220ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80220b0:	4b2a      	ldr	r3, [pc, #168]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 80220b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80220b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d10d      	bne.n	80220d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80220bc:	4b27      	ldr	r3, [pc, #156]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 80220be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80220c0:	4a26      	ldr	r2, [pc, #152]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 80220c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80220c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80220c8:	4b24      	ldr	r3, [pc, #144]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 80220ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80220cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80220d0:	60bb      	str	r3, [r7, #8]
 80220d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80220d4:	2301      	movs	r3, #1
 80220d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80220d8:	4b21      	ldr	r3, [pc, #132]	@ (8022160 <HAL_RCC_OscConfig+0x508>)
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d118      	bne.n	8022116 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80220e4:	4b1e      	ldr	r3, [pc, #120]	@ (8022160 <HAL_RCC_OscConfig+0x508>)
 80220e6:	681b      	ldr	r3, [r3, #0]
 80220e8:	4a1d      	ldr	r2, [pc, #116]	@ (8022160 <HAL_RCC_OscConfig+0x508>)
 80220ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80220ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80220f0:	f7ff fbfc 	bl	80218ec <HAL_GetTick>
 80220f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80220f6:	e008      	b.n	802210a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80220f8:	f7ff fbf8 	bl	80218ec <HAL_GetTick>
 80220fc:	4602      	mov	r2, r0
 80220fe:	693b      	ldr	r3, [r7, #16]
 8022100:	1ad3      	subs	r3, r2, r3
 8022102:	2b02      	cmp	r3, #2
 8022104:	d901      	bls.n	802210a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8022106:	2303      	movs	r3, #3
 8022108:	e1b8      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802210a:	4b15      	ldr	r3, [pc, #84]	@ (8022160 <HAL_RCC_OscConfig+0x508>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022112:	2b00      	cmp	r3, #0
 8022114:	d0f0      	beq.n	80220f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	689b      	ldr	r3, [r3, #8]
 802211a:	2b01      	cmp	r3, #1
 802211c:	d108      	bne.n	8022130 <HAL_RCC_OscConfig+0x4d8>
 802211e:	4b0f      	ldr	r3, [pc, #60]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022124:	4a0d      	ldr	r2, [pc, #52]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022126:	f043 0301 	orr.w	r3, r3, #1
 802212a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 802212e:	e029      	b.n	8022184 <HAL_RCC_OscConfig+0x52c>
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	689b      	ldr	r3, [r3, #8]
 8022134:	2b05      	cmp	r3, #5
 8022136:	d115      	bne.n	8022164 <HAL_RCC_OscConfig+0x50c>
 8022138:	4b08      	ldr	r3, [pc, #32]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 802213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802213e:	4a07      	ldr	r2, [pc, #28]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022140:	f043 0304 	orr.w	r3, r3, #4
 8022144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022148:	4b04      	ldr	r3, [pc, #16]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 802214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802214e:	4a03      	ldr	r2, [pc, #12]	@ (802215c <HAL_RCC_OscConfig+0x504>)
 8022150:	f043 0301 	orr.w	r3, r3, #1
 8022154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022158:	e014      	b.n	8022184 <HAL_RCC_OscConfig+0x52c>
 802215a:	bf00      	nop
 802215c:	40021000 	.word	0x40021000
 8022160:	40007000 	.word	0x40007000
 8022164:	4b9d      	ldr	r3, [pc, #628]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802216a:	4a9c      	ldr	r2, [pc, #624]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802216c:	f023 0301 	bic.w	r3, r3, #1
 8022170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8022174:	4b99      	ldr	r3, [pc, #612]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802217a:	4a98      	ldr	r2, [pc, #608]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802217c:	f023 0304 	bic.w	r3, r3, #4
 8022180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	689b      	ldr	r3, [r3, #8]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d016      	beq.n	80221ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802218c:	f7ff fbae 	bl	80218ec <HAL_GetTick>
 8022190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8022192:	e00a      	b.n	80221aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022194:	f7ff fbaa 	bl	80218ec <HAL_GetTick>
 8022198:	4602      	mov	r2, r0
 802219a:	693b      	ldr	r3, [r7, #16]
 802219c:	1ad3      	subs	r3, r2, r3
 802219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80221a2:	4293      	cmp	r3, r2
 80221a4:	d901      	bls.n	80221aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80221a6:	2303      	movs	r3, #3
 80221a8:	e168      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80221aa:	4b8c      	ldr	r3, [pc, #560]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80221ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80221b0:	f003 0302 	and.w	r3, r3, #2
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d0ed      	beq.n	8022194 <HAL_RCC_OscConfig+0x53c>
 80221b8:	e015      	b.n	80221e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80221ba:	f7ff fb97 	bl	80218ec <HAL_GetTick>
 80221be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80221c0:	e00a      	b.n	80221d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80221c2:	f7ff fb93 	bl	80218ec <HAL_GetTick>
 80221c6:	4602      	mov	r2, r0
 80221c8:	693b      	ldr	r3, [r7, #16]
 80221ca:	1ad3      	subs	r3, r2, r3
 80221cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80221d0:	4293      	cmp	r3, r2
 80221d2:	d901      	bls.n	80221d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80221d4:	2303      	movs	r3, #3
 80221d6:	e151      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80221d8:	4b80      	ldr	r3, [pc, #512]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80221da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80221de:	f003 0302 	and.w	r3, r3, #2
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d1ed      	bne.n	80221c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80221e6:	7ffb      	ldrb	r3, [r7, #31]
 80221e8:	2b01      	cmp	r3, #1
 80221ea:	d105      	bne.n	80221f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80221ec:	4b7b      	ldr	r3, [pc, #492]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80221ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80221f0:	4a7a      	ldr	r2, [pc, #488]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80221f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80221f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	f003 0320 	and.w	r3, r3, #32
 8022200:	2b00      	cmp	r3, #0
 8022202:	d03c      	beq.n	802227e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022208:	2b00      	cmp	r3, #0
 802220a:	d01c      	beq.n	8022246 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 802220c:	4b73      	ldr	r3, [pc, #460]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802220e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8022212:	4a72      	ldr	r2, [pc, #456]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022214:	f043 0301 	orr.w	r3, r3, #1
 8022218:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802221c:	f7ff fb66 	bl	80218ec <HAL_GetTick>
 8022220:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8022222:	e008      	b.n	8022236 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022224:	f7ff fb62 	bl	80218ec <HAL_GetTick>
 8022228:	4602      	mov	r2, r0
 802222a:	693b      	ldr	r3, [r7, #16]
 802222c:	1ad3      	subs	r3, r2, r3
 802222e:	2b02      	cmp	r3, #2
 8022230:	d901      	bls.n	8022236 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8022232:	2303      	movs	r3, #3
 8022234:	e122      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8022236:	4b69      	ldr	r3, [pc, #420]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802223c:	f003 0302 	and.w	r3, r3, #2
 8022240:	2b00      	cmp	r3, #0
 8022242:	d0ef      	beq.n	8022224 <HAL_RCC_OscConfig+0x5cc>
 8022244:	e01b      	b.n	802227e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8022246:	4b65      	ldr	r3, [pc, #404]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802224c:	4a63      	ldr	r2, [pc, #396]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802224e:	f023 0301 	bic.w	r3, r3, #1
 8022252:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022256:	f7ff fb49 	bl	80218ec <HAL_GetTick>
 802225a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 802225c:	e008      	b.n	8022270 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802225e:	f7ff fb45 	bl	80218ec <HAL_GetTick>
 8022262:	4602      	mov	r2, r0
 8022264:	693b      	ldr	r3, [r7, #16]
 8022266:	1ad3      	subs	r3, r2, r3
 8022268:	2b02      	cmp	r3, #2
 802226a:	d901      	bls.n	8022270 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 802226c:	2303      	movs	r3, #3
 802226e:	e105      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8022270:	4b5a      	ldr	r3, [pc, #360]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8022276:	f003 0302 	and.w	r3, r3, #2
 802227a:	2b00      	cmp	r3, #0
 802227c:	d1ef      	bne.n	802225e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022282:	2b00      	cmp	r3, #0
 8022284:	f000 80f9 	beq.w	802247a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802228c:	2b02      	cmp	r3, #2
 802228e:	f040 80cf 	bne.w	8022430 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8022292:	4b52      	ldr	r3, [pc, #328]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022294:	68db      	ldr	r3, [r3, #12]
 8022296:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8022298:	697b      	ldr	r3, [r7, #20]
 802229a:	f003 0203 	and.w	r2, r3, #3
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222a2:	429a      	cmp	r2, r3
 80222a4:	d12c      	bne.n	8022300 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80222a6:	697b      	ldr	r3, [r7, #20]
 80222a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80222b0:	3b01      	subs	r3, #1
 80222b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80222b4:	429a      	cmp	r2, r3
 80222b6:	d123      	bne.n	8022300 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80222b8:	697b      	ldr	r3, [r7, #20]
 80222ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80222c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80222c4:	429a      	cmp	r2, r3
 80222c6:	d11b      	bne.n	8022300 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80222c8:	697b      	ldr	r3, [r7, #20]
 80222ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80222d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80222d4:	429a      	cmp	r2, r3
 80222d6:	d113      	bne.n	8022300 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80222d8:	697b      	ldr	r3, [r7, #20]
 80222da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80222e2:	085b      	lsrs	r3, r3, #1
 80222e4:	3b01      	subs	r3, #1
 80222e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80222e8:	429a      	cmp	r2, r3
 80222ea:	d109      	bne.n	8022300 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80222ec:	697b      	ldr	r3, [r7, #20]
 80222ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80222f6:	085b      	lsrs	r3, r3, #1
 80222f8:	3b01      	subs	r3, #1
 80222fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80222fc:	429a      	cmp	r2, r3
 80222fe:	d071      	beq.n	80223e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022300:	69bb      	ldr	r3, [r7, #24]
 8022302:	2b0c      	cmp	r3, #12
 8022304:	d068      	beq.n	80223d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8022306:	4b35      	ldr	r3, [pc, #212]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022308:	681b      	ldr	r3, [r3, #0]
 802230a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802230e:	2b00      	cmp	r3, #0
 8022310:	d105      	bne.n	802231e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8022312:	4b32      	ldr	r3, [pc, #200]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802231a:	2b00      	cmp	r3, #0
 802231c:	d001      	beq.n	8022322 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 802231e:	2301      	movs	r3, #1
 8022320:	e0ac      	b.n	802247c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8022322:	4b2e      	ldr	r3, [pc, #184]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	4a2d      	ldr	r2, [pc, #180]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 802232c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 802232e:	f7ff fadd 	bl	80218ec <HAL_GetTick>
 8022332:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022334:	e008      	b.n	8022348 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022336:	f7ff fad9 	bl	80218ec <HAL_GetTick>
 802233a:	4602      	mov	r2, r0
 802233c:	693b      	ldr	r3, [r7, #16]
 802233e:	1ad3      	subs	r3, r2, r3
 8022340:	2b02      	cmp	r3, #2
 8022342:	d901      	bls.n	8022348 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8022344:	2303      	movs	r3, #3
 8022346:	e099      	b.n	802247c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022348:	4b24      	ldr	r3, [pc, #144]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802234a:	681b      	ldr	r3, [r3, #0]
 802234c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022350:	2b00      	cmp	r3, #0
 8022352:	d1f0      	bne.n	8022336 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022354:	4b21      	ldr	r3, [pc, #132]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022356:	68da      	ldr	r2, [r3, #12]
 8022358:	4b21      	ldr	r3, [pc, #132]	@ (80223e0 <HAL_RCC_OscConfig+0x788>)
 802235a:	4013      	ands	r3, r2
 802235c:	687a      	ldr	r2, [r7, #4]
 802235e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8022360:	687a      	ldr	r2, [r7, #4]
 8022362:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8022364:	3a01      	subs	r2, #1
 8022366:	0112      	lsls	r2, r2, #4
 8022368:	4311      	orrs	r1, r2
 802236a:	687a      	ldr	r2, [r7, #4]
 802236c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802236e:	0212      	lsls	r2, r2, #8
 8022370:	4311      	orrs	r1, r2
 8022372:	687a      	ldr	r2, [r7, #4]
 8022374:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8022376:	0852      	lsrs	r2, r2, #1
 8022378:	3a01      	subs	r2, #1
 802237a:	0552      	lsls	r2, r2, #21
 802237c:	4311      	orrs	r1, r2
 802237e:	687a      	ldr	r2, [r7, #4]
 8022380:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8022382:	0852      	lsrs	r2, r2, #1
 8022384:	3a01      	subs	r2, #1
 8022386:	0652      	lsls	r2, r2, #25
 8022388:	4311      	orrs	r1, r2
 802238a:	687a      	ldr	r2, [r7, #4]
 802238c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 802238e:	06d2      	lsls	r2, r2, #27
 8022390:	430a      	orrs	r2, r1
 8022392:	4912      	ldr	r1, [pc, #72]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 8022394:	4313      	orrs	r3, r2
 8022396:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8022398:	4b10      	ldr	r3, [pc, #64]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802239a:	681b      	ldr	r3, [r3, #0]
 802239c:	4a0f      	ldr	r2, [pc, #60]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 802239e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80223a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80223a4:	4b0d      	ldr	r3, [pc, #52]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80223a6:	68db      	ldr	r3, [r3, #12]
 80223a8:	4a0c      	ldr	r2, [pc, #48]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80223aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80223ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80223b0:	f7ff fa9c 	bl	80218ec <HAL_GetTick>
 80223b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223b6:	e008      	b.n	80223ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80223b8:	f7ff fa98 	bl	80218ec <HAL_GetTick>
 80223bc:	4602      	mov	r2, r0
 80223be:	693b      	ldr	r3, [r7, #16]
 80223c0:	1ad3      	subs	r3, r2, r3
 80223c2:	2b02      	cmp	r3, #2
 80223c4:	d901      	bls.n	80223ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80223c6:	2303      	movs	r3, #3
 80223c8:	e058      	b.n	802247c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223ca:	4b04      	ldr	r3, [pc, #16]	@ (80223dc <HAL_RCC_OscConfig+0x784>)
 80223cc:	681b      	ldr	r3, [r3, #0]
 80223ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d0f0      	beq.n	80223b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80223d6:	e050      	b.n	802247a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80223d8:	2301      	movs	r3, #1
 80223da:	e04f      	b.n	802247c <HAL_RCC_OscConfig+0x824>
 80223dc:	40021000 	.word	0x40021000
 80223e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80223e4:	4b27      	ldr	r3, [pc, #156]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 80223e6:	681b      	ldr	r3, [r3, #0]
 80223e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d144      	bne.n	802247a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80223f0:	4b24      	ldr	r3, [pc, #144]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	4a23      	ldr	r2, [pc, #140]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 80223f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80223fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80223fc:	4b21      	ldr	r3, [pc, #132]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 80223fe:	68db      	ldr	r3, [r3, #12]
 8022400:	4a20      	ldr	r2, [pc, #128]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 8022402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022406:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8022408:	f7ff fa70 	bl	80218ec <HAL_GetTick>
 802240c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802240e:	e008      	b.n	8022422 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022410:	f7ff fa6c 	bl	80218ec <HAL_GetTick>
 8022414:	4602      	mov	r2, r0
 8022416:	693b      	ldr	r3, [r7, #16]
 8022418:	1ad3      	subs	r3, r2, r3
 802241a:	2b02      	cmp	r3, #2
 802241c:	d901      	bls.n	8022422 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 802241e:	2303      	movs	r3, #3
 8022420:	e02c      	b.n	802247c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022422:	4b18      	ldr	r3, [pc, #96]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802242a:	2b00      	cmp	r3, #0
 802242c:	d0f0      	beq.n	8022410 <HAL_RCC_OscConfig+0x7b8>
 802242e:	e024      	b.n	802247a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8022430:	69bb      	ldr	r3, [r7, #24]
 8022432:	2b0c      	cmp	r3, #12
 8022434:	d01f      	beq.n	8022476 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022436:	4b13      	ldr	r3, [pc, #76]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	4a12      	ldr	r2, [pc, #72]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 802243c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8022440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022442:	f7ff fa53 	bl	80218ec <HAL_GetTick>
 8022446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8022448:	e008      	b.n	802245c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802244a:	f7ff fa4f 	bl	80218ec <HAL_GetTick>
 802244e:	4602      	mov	r2, r0
 8022450:	693b      	ldr	r3, [r7, #16]
 8022452:	1ad3      	subs	r3, r2, r3
 8022454:	2b02      	cmp	r3, #2
 8022456:	d901      	bls.n	802245c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8022458:	2303      	movs	r3, #3
 802245a:	e00f      	b.n	802247c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 802245c:	4b09      	ldr	r3, [pc, #36]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022464:	2b00      	cmp	r3, #0
 8022466:	d1f0      	bne.n	802244a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8022468:	4b06      	ldr	r3, [pc, #24]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 802246a:	68da      	ldr	r2, [r3, #12]
 802246c:	4905      	ldr	r1, [pc, #20]	@ (8022484 <HAL_RCC_OscConfig+0x82c>)
 802246e:	4b06      	ldr	r3, [pc, #24]	@ (8022488 <HAL_RCC_OscConfig+0x830>)
 8022470:	4013      	ands	r3, r2
 8022472:	60cb      	str	r3, [r1, #12]
 8022474:	e001      	b.n	802247a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8022476:	2301      	movs	r3, #1
 8022478:	e000      	b.n	802247c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 802247a:	2300      	movs	r3, #0
}
 802247c:	4618      	mov	r0, r3
 802247e:	3720      	adds	r7, #32
 8022480:	46bd      	mov	sp, r7
 8022482:	bd80      	pop	{r7, pc}
 8022484:	40021000 	.word	0x40021000
 8022488:	feeefffc 	.word	0xfeeefffc

0802248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802248c:	b580      	push	{r7, lr}
 802248e:	b086      	sub	sp, #24
 8022490:	af00      	add	r7, sp, #0
 8022492:	6078      	str	r0, [r7, #4]
 8022494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8022496:	2300      	movs	r3, #0
 8022498:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	2b00      	cmp	r3, #0
 802249e:	d101      	bne.n	80224a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80224a0:	2301      	movs	r3, #1
 80224a2:	e11d      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80224a4:	4b90      	ldr	r3, [pc, #576]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	f003 030f 	and.w	r3, r3, #15
 80224ac:	683a      	ldr	r2, [r7, #0]
 80224ae:	429a      	cmp	r2, r3
 80224b0:	d910      	bls.n	80224d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80224b2:	4b8d      	ldr	r3, [pc, #564]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 80224b4:	681b      	ldr	r3, [r3, #0]
 80224b6:	f023 020f 	bic.w	r2, r3, #15
 80224ba:	498b      	ldr	r1, [pc, #556]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 80224bc:	683b      	ldr	r3, [r7, #0]
 80224be:	4313      	orrs	r3, r2
 80224c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80224c2:	4b89      	ldr	r3, [pc, #548]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	f003 030f 	and.w	r3, r3, #15
 80224ca:	683a      	ldr	r2, [r7, #0]
 80224cc:	429a      	cmp	r2, r3
 80224ce:	d001      	beq.n	80224d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80224d0:	2301      	movs	r3, #1
 80224d2:	e105      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	f003 0302 	and.w	r3, r3, #2
 80224dc:	2b00      	cmp	r3, #0
 80224de:	d010      	beq.n	8022502 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	689a      	ldr	r2, [r3, #8]
 80224e4:	4b81      	ldr	r3, [pc, #516]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80224e6:	689b      	ldr	r3, [r3, #8]
 80224e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80224ec:	429a      	cmp	r2, r3
 80224ee:	d908      	bls.n	8022502 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80224f0:	4b7e      	ldr	r3, [pc, #504]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80224f2:	689b      	ldr	r3, [r3, #8]
 80224f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	689b      	ldr	r3, [r3, #8]
 80224fc:	497b      	ldr	r1, [pc, #492]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80224fe:	4313      	orrs	r3, r2
 8022500:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	f003 0301 	and.w	r3, r3, #1
 802250a:	2b00      	cmp	r3, #0
 802250c:	d079      	beq.n	8022602 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	685b      	ldr	r3, [r3, #4]
 8022512:	2b03      	cmp	r3, #3
 8022514:	d11e      	bne.n	8022554 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022516:	4b75      	ldr	r3, [pc, #468]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802251e:	2b00      	cmp	r3, #0
 8022520:	d101      	bne.n	8022526 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8022522:	2301      	movs	r3, #1
 8022524:	e0dc      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8022526:	f000 f9d1 	bl	80228cc <RCC_GetSysClockFreqFromPLLSource>
 802252a:	4603      	mov	r3, r0
 802252c:	4a70      	ldr	r2, [pc, #448]	@ (80226f0 <HAL_RCC_ClockConfig+0x264>)
 802252e:	4293      	cmp	r3, r2
 8022530:	d946      	bls.n	80225c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8022532:	4b6e      	ldr	r3, [pc, #440]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022534:	689b      	ldr	r3, [r3, #8]
 8022536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802253a:	2b00      	cmp	r3, #0
 802253c:	d140      	bne.n	80225c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 802253e:	4b6b      	ldr	r3, [pc, #428]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022540:	689b      	ldr	r3, [r3, #8]
 8022542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022546:	4a69      	ldr	r2, [pc, #420]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802254c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 802254e:	2380      	movs	r3, #128	@ 0x80
 8022550:	617b      	str	r3, [r7, #20]
 8022552:	e035      	b.n	80225c0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	685b      	ldr	r3, [r3, #4]
 8022558:	2b02      	cmp	r3, #2
 802255a:	d107      	bne.n	802256c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802255c:	4b63      	ldr	r3, [pc, #396]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802255e:	681b      	ldr	r3, [r3, #0]
 8022560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022564:	2b00      	cmp	r3, #0
 8022566:	d115      	bne.n	8022594 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022568:	2301      	movs	r3, #1
 802256a:	e0b9      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	685b      	ldr	r3, [r3, #4]
 8022570:	2b00      	cmp	r3, #0
 8022572:	d107      	bne.n	8022584 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8022574:	4b5d      	ldr	r3, [pc, #372]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	f003 0302 	and.w	r3, r3, #2
 802257c:	2b00      	cmp	r3, #0
 802257e:	d109      	bne.n	8022594 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022580:	2301      	movs	r3, #1
 8022582:	e0ad      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8022584:	4b59      	ldr	r3, [pc, #356]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802258c:	2b00      	cmp	r3, #0
 802258e:	d101      	bne.n	8022594 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8022590:	2301      	movs	r3, #1
 8022592:	e0a5      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8022594:	f000 f8b4 	bl	8022700 <HAL_RCC_GetSysClockFreq>
 8022598:	4603      	mov	r3, r0
 802259a:	4a55      	ldr	r2, [pc, #340]	@ (80226f0 <HAL_RCC_ClockConfig+0x264>)
 802259c:	4293      	cmp	r3, r2
 802259e:	d90f      	bls.n	80225c0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80225a0:	4b52      	ldr	r3, [pc, #328]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225a2:	689b      	ldr	r3, [r3, #8]
 80225a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d109      	bne.n	80225c0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80225ac:	4b4f      	ldr	r3, [pc, #316]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225ae:	689b      	ldr	r3, [r3, #8]
 80225b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80225b4:	4a4d      	ldr	r2, [pc, #308]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80225ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80225bc:	2380      	movs	r3, #128	@ 0x80
 80225be:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80225c0:	4b4a      	ldr	r3, [pc, #296]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225c2:	689b      	ldr	r3, [r3, #8]
 80225c4:	f023 0203 	bic.w	r2, r3, #3
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	685b      	ldr	r3, [r3, #4]
 80225cc:	4947      	ldr	r1, [pc, #284]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225ce:	4313      	orrs	r3, r2
 80225d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80225d2:	f7ff f98b 	bl	80218ec <HAL_GetTick>
 80225d6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80225d8:	e00a      	b.n	80225f0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80225da:	f7ff f987 	bl	80218ec <HAL_GetTick>
 80225de:	4602      	mov	r2, r0
 80225e0:	693b      	ldr	r3, [r7, #16]
 80225e2:	1ad3      	subs	r3, r2, r3
 80225e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80225e8:	4293      	cmp	r3, r2
 80225ea:	d901      	bls.n	80225f0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80225ec:	2303      	movs	r3, #3
 80225ee:	e077      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80225f0:	4b3e      	ldr	r3, [pc, #248]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80225f2:	689b      	ldr	r3, [r3, #8]
 80225f4:	f003 020c 	and.w	r2, r3, #12
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	685b      	ldr	r3, [r3, #4]
 80225fc:	009b      	lsls	r3, r3, #2
 80225fe:	429a      	cmp	r2, r3
 8022600:	d1eb      	bne.n	80225da <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8022602:	697b      	ldr	r3, [r7, #20]
 8022604:	2b80      	cmp	r3, #128	@ 0x80
 8022606:	d105      	bne.n	8022614 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8022608:	4b38      	ldr	r3, [pc, #224]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802260a:	689b      	ldr	r3, [r3, #8]
 802260c:	4a37      	ldr	r2, [pc, #220]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802260e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8022612:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	f003 0302 	and.w	r3, r3, #2
 802261c:	2b00      	cmp	r3, #0
 802261e:	d010      	beq.n	8022642 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	689a      	ldr	r2, [r3, #8]
 8022624:	4b31      	ldr	r3, [pc, #196]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022626:	689b      	ldr	r3, [r3, #8]
 8022628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 802262c:	429a      	cmp	r2, r3
 802262e:	d208      	bcs.n	8022642 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022630:	4b2e      	ldr	r3, [pc, #184]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022632:	689b      	ldr	r3, [r3, #8]
 8022634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	689b      	ldr	r3, [r3, #8]
 802263c:	492b      	ldr	r1, [pc, #172]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802263e:	4313      	orrs	r3, r2
 8022640:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022642:	4b29      	ldr	r3, [pc, #164]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	f003 030f 	and.w	r3, r3, #15
 802264a:	683a      	ldr	r2, [r7, #0]
 802264c:	429a      	cmp	r2, r3
 802264e:	d210      	bcs.n	8022672 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022650:	4b25      	ldr	r3, [pc, #148]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 8022652:	681b      	ldr	r3, [r3, #0]
 8022654:	f023 020f 	bic.w	r2, r3, #15
 8022658:	4923      	ldr	r1, [pc, #140]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 802265a:	683b      	ldr	r3, [r7, #0]
 802265c:	4313      	orrs	r3, r2
 802265e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022660:	4b21      	ldr	r3, [pc, #132]	@ (80226e8 <HAL_RCC_ClockConfig+0x25c>)
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	f003 030f 	and.w	r3, r3, #15
 8022668:	683a      	ldr	r2, [r7, #0]
 802266a:	429a      	cmp	r2, r3
 802266c:	d001      	beq.n	8022672 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 802266e:	2301      	movs	r3, #1
 8022670:	e036      	b.n	80226e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	681b      	ldr	r3, [r3, #0]
 8022676:	f003 0304 	and.w	r3, r3, #4
 802267a:	2b00      	cmp	r3, #0
 802267c:	d008      	beq.n	8022690 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802267e:	4b1b      	ldr	r3, [pc, #108]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 8022680:	689b      	ldr	r3, [r3, #8]
 8022682:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	68db      	ldr	r3, [r3, #12]
 802268a:	4918      	ldr	r1, [pc, #96]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802268c:	4313      	orrs	r3, r2
 802268e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	f003 0308 	and.w	r3, r3, #8
 8022698:	2b00      	cmp	r3, #0
 802269a:	d009      	beq.n	80226b0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802269c:	4b13      	ldr	r3, [pc, #76]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 802269e:	689b      	ldr	r3, [r3, #8]
 80226a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	691b      	ldr	r3, [r3, #16]
 80226a8:	00db      	lsls	r3, r3, #3
 80226aa:	4910      	ldr	r1, [pc, #64]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80226ac:	4313      	orrs	r3, r2
 80226ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80226b0:	f000 f826 	bl	8022700 <HAL_RCC_GetSysClockFreq>
 80226b4:	4602      	mov	r2, r0
 80226b6:	4b0d      	ldr	r3, [pc, #52]	@ (80226ec <HAL_RCC_ClockConfig+0x260>)
 80226b8:	689b      	ldr	r3, [r3, #8]
 80226ba:	091b      	lsrs	r3, r3, #4
 80226bc:	f003 030f 	and.w	r3, r3, #15
 80226c0:	490c      	ldr	r1, [pc, #48]	@ (80226f4 <HAL_RCC_ClockConfig+0x268>)
 80226c2:	5ccb      	ldrb	r3, [r1, r3]
 80226c4:	f003 031f 	and.w	r3, r3, #31
 80226c8:	fa22 f303 	lsr.w	r3, r2, r3
 80226cc:	4a0a      	ldr	r2, [pc, #40]	@ (80226f8 <HAL_RCC_ClockConfig+0x26c>)
 80226ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80226d0:	4b0a      	ldr	r3, [pc, #40]	@ (80226fc <HAL_RCC_ClockConfig+0x270>)
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	4618      	mov	r0, r3
 80226d6:	f7ff f8b9 	bl	802184c <HAL_InitTick>
 80226da:	4603      	mov	r3, r0
 80226dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80226de:	7bfb      	ldrb	r3, [r7, #15]
}
 80226e0:	4618      	mov	r0, r3
 80226e2:	3718      	adds	r7, #24
 80226e4:	46bd      	mov	sp, r7
 80226e6:	bd80      	pop	{r7, pc}
 80226e8:	40022000 	.word	0x40022000
 80226ec:	40021000 	.word	0x40021000
 80226f0:	04c4b400 	.word	0x04c4b400
 80226f4:	08023c74 	.word	0x08023c74
 80226f8:	20000000 	.word	0x20000000
 80226fc:	20000004 	.word	0x20000004

08022700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022700:	b480      	push	{r7}
 8022702:	b089      	sub	sp, #36	@ 0x24
 8022704:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8022706:	2300      	movs	r3, #0
 8022708:	61fb      	str	r3, [r7, #28]
 802270a:	2300      	movs	r3, #0
 802270c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 802270e:	4b3e      	ldr	r3, [pc, #248]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 8022710:	689b      	ldr	r3, [r3, #8]
 8022712:	f003 030c 	and.w	r3, r3, #12
 8022716:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8022718:	4b3b      	ldr	r3, [pc, #236]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 802271a:	68db      	ldr	r3, [r3, #12]
 802271c:	f003 0303 	and.w	r3, r3, #3
 8022720:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8022722:	693b      	ldr	r3, [r7, #16]
 8022724:	2b00      	cmp	r3, #0
 8022726:	d005      	beq.n	8022734 <HAL_RCC_GetSysClockFreq+0x34>
 8022728:	693b      	ldr	r3, [r7, #16]
 802272a:	2b0c      	cmp	r3, #12
 802272c:	d121      	bne.n	8022772 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	2b01      	cmp	r3, #1
 8022732:	d11e      	bne.n	8022772 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022734:	4b34      	ldr	r3, [pc, #208]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 8022736:	681b      	ldr	r3, [r3, #0]
 8022738:	f003 0308 	and.w	r3, r3, #8
 802273c:	2b00      	cmp	r3, #0
 802273e:	d107      	bne.n	8022750 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8022740:	4b31      	ldr	r3, [pc, #196]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 8022742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022746:	0a1b      	lsrs	r3, r3, #8
 8022748:	f003 030f 	and.w	r3, r3, #15
 802274c:	61fb      	str	r3, [r7, #28]
 802274e:	e005      	b.n	802275c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8022750:	4b2d      	ldr	r3, [pc, #180]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	091b      	lsrs	r3, r3, #4
 8022756:	f003 030f 	and.w	r3, r3, #15
 802275a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 802275c:	4a2b      	ldr	r2, [pc, #172]	@ (802280c <HAL_RCC_GetSysClockFreq+0x10c>)
 802275e:	69fb      	ldr	r3, [r7, #28]
 8022760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022764:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022766:	693b      	ldr	r3, [r7, #16]
 8022768:	2b00      	cmp	r3, #0
 802276a:	d10d      	bne.n	8022788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 802276c:	69fb      	ldr	r3, [r7, #28]
 802276e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8022770:	e00a      	b.n	8022788 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8022772:	693b      	ldr	r3, [r7, #16]
 8022774:	2b04      	cmp	r3, #4
 8022776:	d102      	bne.n	802277e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8022778:	4b25      	ldr	r3, [pc, #148]	@ (8022810 <HAL_RCC_GetSysClockFreq+0x110>)
 802277a:	61bb      	str	r3, [r7, #24]
 802277c:	e004      	b.n	8022788 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 802277e:	693b      	ldr	r3, [r7, #16]
 8022780:	2b08      	cmp	r3, #8
 8022782:	d101      	bne.n	8022788 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8022784:	4b23      	ldr	r3, [pc, #140]	@ (8022814 <HAL_RCC_GetSysClockFreq+0x114>)
 8022786:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8022788:	693b      	ldr	r3, [r7, #16]
 802278a:	2b0c      	cmp	r3, #12
 802278c:	d134      	bne.n	80227f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 802278e:	4b1e      	ldr	r3, [pc, #120]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 8022790:	68db      	ldr	r3, [r3, #12]
 8022792:	f003 0303 	and.w	r3, r3, #3
 8022796:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8022798:	68bb      	ldr	r3, [r7, #8]
 802279a:	2b02      	cmp	r3, #2
 802279c:	d003      	beq.n	80227a6 <HAL_RCC_GetSysClockFreq+0xa6>
 802279e:	68bb      	ldr	r3, [r7, #8]
 80227a0:	2b03      	cmp	r3, #3
 80227a2:	d003      	beq.n	80227ac <HAL_RCC_GetSysClockFreq+0xac>
 80227a4:	e005      	b.n	80227b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80227a6:	4b1a      	ldr	r3, [pc, #104]	@ (8022810 <HAL_RCC_GetSysClockFreq+0x110>)
 80227a8:	617b      	str	r3, [r7, #20]
      break;
 80227aa:	e005      	b.n	80227b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80227ac:	4b19      	ldr	r3, [pc, #100]	@ (8022814 <HAL_RCC_GetSysClockFreq+0x114>)
 80227ae:	617b      	str	r3, [r7, #20]
      break;
 80227b0:	e002      	b.n	80227b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80227b2:	69fb      	ldr	r3, [r7, #28]
 80227b4:	617b      	str	r3, [r7, #20]
      break;
 80227b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80227b8:	4b13      	ldr	r3, [pc, #76]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 80227ba:	68db      	ldr	r3, [r3, #12]
 80227bc:	091b      	lsrs	r3, r3, #4
 80227be:	f003 030f 	and.w	r3, r3, #15
 80227c2:	3301      	adds	r3, #1
 80227c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80227c6:	4b10      	ldr	r3, [pc, #64]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 80227c8:	68db      	ldr	r3, [r3, #12]
 80227ca:	0a1b      	lsrs	r3, r3, #8
 80227cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80227d0:	697a      	ldr	r2, [r7, #20]
 80227d2:	fb03 f202 	mul.w	r2, r3, r2
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80227dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80227de:	4b0a      	ldr	r3, [pc, #40]	@ (8022808 <HAL_RCC_GetSysClockFreq+0x108>)
 80227e0:	68db      	ldr	r3, [r3, #12]
 80227e2:	0e5b      	lsrs	r3, r3, #25
 80227e4:	f003 0303 	and.w	r3, r3, #3
 80227e8:	3301      	adds	r3, #1
 80227ea:	005b      	lsls	r3, r3, #1
 80227ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80227ee:	697a      	ldr	r2, [r7, #20]
 80227f0:	683b      	ldr	r3, [r7, #0]
 80227f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80227f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80227f8:	69bb      	ldr	r3, [r7, #24]
}
 80227fa:	4618      	mov	r0, r3
 80227fc:	3724      	adds	r7, #36	@ 0x24
 80227fe:	46bd      	mov	sp, r7
 8022800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022804:	4770      	bx	lr
 8022806:	bf00      	nop
 8022808:	40021000 	.word	0x40021000
 802280c:	08023c84 	.word	0x08023c84
 8022810:	00f42400 	.word	0x00f42400
 8022814:	007a1200 	.word	0x007a1200

08022818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8022818:	b580      	push	{r7, lr}
 802281a:	b086      	sub	sp, #24
 802281c:	af00      	add	r7, sp, #0
 802281e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8022820:	2300      	movs	r3, #0
 8022822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8022824:	4b27      	ldr	r3, [pc, #156]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802282c:	2b00      	cmp	r3, #0
 802282e:	d003      	beq.n	8022838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8022830:	f7ff f94e 	bl	8021ad0 <HAL_PWREx_GetVoltageRange>
 8022834:	6178      	str	r0, [r7, #20]
 8022836:	e014      	b.n	8022862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8022838:	4b22      	ldr	r3, [pc, #136]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802283c:	4a21      	ldr	r2, [pc, #132]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802283e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022842:	6593      	str	r3, [r2, #88]	@ 0x58
 8022844:	4b1f      	ldr	r3, [pc, #124]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802284c:	60fb      	str	r3, [r7, #12]
 802284e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8022850:	f7ff f93e 	bl	8021ad0 <HAL_PWREx_GetVoltageRange>
 8022854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8022856:	4b1b      	ldr	r3, [pc, #108]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8022858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802285a:	4a1a      	ldr	r2, [pc, #104]	@ (80228c4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 802285c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022860:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8022862:	697b      	ldr	r3, [r7, #20]
 8022864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022868:	d10b      	bne.n	8022882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	2b80      	cmp	r3, #128	@ 0x80
 802286e:	d913      	bls.n	8022898 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	2ba0      	cmp	r3, #160	@ 0xa0
 8022874:	d902      	bls.n	802287c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8022876:	2302      	movs	r3, #2
 8022878:	613b      	str	r3, [r7, #16]
 802287a:	e00d      	b.n	8022898 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 802287c:	2301      	movs	r3, #1
 802287e:	613b      	str	r3, [r7, #16]
 8022880:	e00a      	b.n	8022898 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	2b7f      	cmp	r3, #127	@ 0x7f
 8022886:	d902      	bls.n	802288e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8022888:	2302      	movs	r3, #2
 802288a:	613b      	str	r3, [r7, #16]
 802288c:	e004      	b.n	8022898 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	2b70      	cmp	r3, #112	@ 0x70
 8022892:	d101      	bne.n	8022898 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8022894:	2301      	movs	r3, #1
 8022896:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8022898:	4b0b      	ldr	r3, [pc, #44]	@ (80228c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	f023 020f 	bic.w	r2, r3, #15
 80228a0:	4909      	ldr	r1, [pc, #36]	@ (80228c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80228a2:	693b      	ldr	r3, [r7, #16]
 80228a4:	4313      	orrs	r3, r2
 80228a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80228a8:	4b07      	ldr	r3, [pc, #28]	@ (80228c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	f003 030f 	and.w	r3, r3, #15
 80228b0:	693a      	ldr	r2, [r7, #16]
 80228b2:	429a      	cmp	r2, r3
 80228b4:	d001      	beq.n	80228ba <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80228b6:	2301      	movs	r3, #1
 80228b8:	e000      	b.n	80228bc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80228ba:	2300      	movs	r3, #0
}
 80228bc:	4618      	mov	r0, r3
 80228be:	3718      	adds	r7, #24
 80228c0:	46bd      	mov	sp, r7
 80228c2:	bd80      	pop	{r7, pc}
 80228c4:	40021000 	.word	0x40021000
 80228c8:	40022000 	.word	0x40022000

080228cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80228cc:	b480      	push	{r7}
 80228ce:	b087      	sub	sp, #28
 80228d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80228d2:	4b2d      	ldr	r3, [pc, #180]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80228d4:	68db      	ldr	r3, [r3, #12]
 80228d6:	f003 0303 	and.w	r3, r3, #3
 80228da:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80228dc:	68fb      	ldr	r3, [r7, #12]
 80228de:	2b03      	cmp	r3, #3
 80228e0:	d00b      	beq.n	80228fa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	2b03      	cmp	r3, #3
 80228e6:	d825      	bhi.n	8022934 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	2b01      	cmp	r3, #1
 80228ec:	d008      	beq.n	8022900 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	2b02      	cmp	r3, #2
 80228f2:	d11f      	bne.n	8022934 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80228f4:	4b25      	ldr	r3, [pc, #148]	@ (802298c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80228f6:	613b      	str	r3, [r7, #16]
    break;
 80228f8:	e01f      	b.n	802293a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80228fa:	4b25      	ldr	r3, [pc, #148]	@ (8022990 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80228fc:	613b      	str	r3, [r7, #16]
    break;
 80228fe:	e01c      	b.n	802293a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8022900:	4b21      	ldr	r3, [pc, #132]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022902:	681b      	ldr	r3, [r3, #0]
 8022904:	f003 0308 	and.w	r3, r3, #8
 8022908:	2b00      	cmp	r3, #0
 802290a:	d107      	bne.n	802291c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 802290c:	4b1e      	ldr	r3, [pc, #120]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8022912:	0a1b      	lsrs	r3, r3, #8
 8022914:	f003 030f 	and.w	r3, r3, #15
 8022918:	617b      	str	r3, [r7, #20]
 802291a:	e005      	b.n	8022928 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 802291c:	4b1a      	ldr	r3, [pc, #104]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802291e:	681b      	ldr	r3, [r3, #0]
 8022920:	091b      	lsrs	r3, r3, #4
 8022922:	f003 030f 	and.w	r3, r3, #15
 8022926:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8022928:	4a1a      	ldr	r2, [pc, #104]	@ (8022994 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 802292a:	697b      	ldr	r3, [r7, #20]
 802292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022930:	613b      	str	r3, [r7, #16]
    break;
 8022932:	e002      	b.n	802293a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8022934:	2300      	movs	r3, #0
 8022936:	613b      	str	r3, [r7, #16]
    break;
 8022938:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 802293a:	4b13      	ldr	r3, [pc, #76]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802293c:	68db      	ldr	r3, [r3, #12]
 802293e:	091b      	lsrs	r3, r3, #4
 8022940:	f003 030f 	and.w	r3, r3, #15
 8022944:	3301      	adds	r3, #1
 8022946:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8022948:	4b0f      	ldr	r3, [pc, #60]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 802294a:	68db      	ldr	r3, [r3, #12]
 802294c:	0a1b      	lsrs	r3, r3, #8
 802294e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022952:	693a      	ldr	r2, [r7, #16]
 8022954:	fb03 f202 	mul.w	r2, r3, r2
 8022958:	68bb      	ldr	r3, [r7, #8]
 802295a:	fbb2 f3f3 	udiv	r3, r2, r3
 802295e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8022960:	4b09      	ldr	r3, [pc, #36]	@ (8022988 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8022962:	68db      	ldr	r3, [r3, #12]
 8022964:	0e5b      	lsrs	r3, r3, #25
 8022966:	f003 0303 	and.w	r3, r3, #3
 802296a:	3301      	adds	r3, #1
 802296c:	005b      	lsls	r3, r3, #1
 802296e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8022970:	693a      	ldr	r2, [r7, #16]
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	fbb2 f3f3 	udiv	r3, r2, r3
 8022978:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 802297a:	683b      	ldr	r3, [r7, #0]
}
 802297c:	4618      	mov	r0, r3
 802297e:	371c      	adds	r7, #28
 8022980:	46bd      	mov	sp, r7
 8022982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022986:	4770      	bx	lr
 8022988:	40021000 	.word	0x40021000
 802298c:	00f42400 	.word	0x00f42400
 8022990:	007a1200 	.word	0x007a1200
 8022994:	08023c84 	.word	0x08023c84

08022998 <arm_std_f32>:
 8022998:	2901      	cmp	r1, #1
 802299a:	d97d      	bls.n	8022a98 <arm_std_f32+0x100>
 802299c:	b530      	push	{r4, r5, lr}
 802299e:	ed2d 8b02 	vpush	{d8}
 80229a2:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8022aa8 <arm_std_f32+0x110>
 80229a6:	088d      	lsrs	r5, r1, #2
 80229a8:	b083      	sub	sp, #12
 80229aa:	eef0 4a47 	vmov.f32	s9, s14
 80229ae:	d028      	beq.n	8022a02 <arm_std_f32+0x6a>
 80229b0:	f100 0310 	add.w	r3, r0, #16
 80229b4:	462c      	mov	r4, r5
 80229b6:	ed53 7a04 	vldr	s15, [r3, #-16]
 80229ba:	ed13 5a03 	vldr	s10, [r3, #-12]
 80229be:	ed53 5a02 	vldr	s11, [r3, #-8]
 80229c2:	ed13 6a01 	vldr	s12, [r3, #-4]
 80229c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80229ca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80229ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80229d2:	ee65 6a05 	vmul.f32	s13, s10, s10
 80229d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80229da:	ee76 6a87 	vadd.f32	s13, s13, s14
 80229de:	ee25 7aa5 	vmul.f32	s14, s11, s11
 80229e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80229e6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80229ea:	ee26 7a06 	vmul.f32	s14, s12, s12
 80229ee:	3c01      	subs	r4, #1
 80229f0:	ee77 4a86 	vadd.f32	s9, s15, s12
 80229f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80229f8:	f103 0310 	add.w	r3, r3, #16
 80229fc:	d1db      	bne.n	80229b6 <arm_std_f32+0x1e>
 80229fe:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8022a02:	f011 0303 	ands.w	r3, r1, #3
 8022a06:	d01b      	beq.n	8022a40 <arm_std_f32+0xa8>
 8022a08:	edd0 7a00 	vldr	s15, [r0]
 8022a0c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a10:	3b01      	subs	r3, #1
 8022a12:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a16:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a1a:	d011      	beq.n	8022a40 <arm_std_f32+0xa8>
 8022a1c:	edd0 7a01 	vldr	s15, [r0, #4]
 8022a20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a24:	2b01      	cmp	r3, #1
 8022a26:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a2a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a2e:	d007      	beq.n	8022a40 <arm_std_f32+0xa8>
 8022a30:	edd0 7a02 	vldr	s15, [r0, #8]
 8022a34:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a38:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022a3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022a40:	ee07 1a90 	vmov	s15, r1
 8022a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a48:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8022a4c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8022a50:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8022a54:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8022a58:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8022a5c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8022a60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8022a64:	ee30 0a66 	vsub.f32	s0, s0, s13
 8022a68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a70:	db0c      	blt.n	8022a8c <arm_std_f32+0xf4>
 8022a72:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a7a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8022a7e:	d40e      	bmi.n	8022a9e <arm_std_f32+0x106>
 8022a80:	ed82 8a00 	vstr	s16, [r2]
 8022a84:	b003      	add	sp, #12
 8022a86:	ecbd 8b02 	vpop	{d8}
 8022a8a:	bd30      	pop	{r4, r5, pc}
 8022a8c:	2300      	movs	r3, #0
 8022a8e:	6013      	str	r3, [r2, #0]
 8022a90:	b003      	add	sp, #12
 8022a92:	ecbd 8b02 	vpop	{d8}
 8022a96:	bd30      	pop	{r4, r5, pc}
 8022a98:	2300      	movs	r3, #0
 8022a9a:	6013      	str	r3, [r2, #0]
 8022a9c:	4770      	bx	lr
 8022a9e:	9201      	str	r2, [sp, #4]
 8022aa0:	f000 fee0 	bl	8023864 <sqrtf>
 8022aa4:	9a01      	ldr	r2, [sp, #4]
 8022aa6:	e7eb      	b.n	8022a80 <arm_std_f32+0xe8>
 8022aa8:	00000000 	.word	0x00000000

08022aac <arm_mean_f32>:
 8022aac:	b430      	push	{r4, r5}
 8022aae:	088d      	lsrs	r5, r1, #2
 8022ab0:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8022b24 <arm_mean_f32+0x78>
 8022ab4:	d018      	beq.n	8022ae8 <arm_mean_f32+0x3c>
 8022ab6:	f100 0310 	add.w	r3, r0, #16
 8022aba:	462c      	mov	r4, r5
 8022abc:	ed53 5a04 	vldr	s11, [r3, #-16]
 8022ac0:	ed13 6a03 	vldr	s12, [r3, #-12]
 8022ac4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8022ac8:	ed13 7a01 	vldr	s14, [r3, #-4]
 8022acc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8022ad0:	3c01      	subs	r4, #1
 8022ad2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8022ad6:	f103 0310 	add.w	r3, r3, #16
 8022ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ae2:	d1eb      	bne.n	8022abc <arm_mean_f32+0x10>
 8022ae4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8022ae8:	f011 0303 	ands.w	r3, r1, #3
 8022aec:	d00f      	beq.n	8022b0e <arm_mean_f32+0x62>
 8022aee:	ed90 7a00 	vldr	s14, [r0]
 8022af2:	3b01      	subs	r3, #1
 8022af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022af8:	d009      	beq.n	8022b0e <arm_mean_f32+0x62>
 8022afa:	ed90 7a01 	vldr	s14, [r0, #4]
 8022afe:	2b01      	cmp	r3, #1
 8022b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b04:	bf1c      	itt	ne
 8022b06:	ed90 7a02 	vldrne	s14, [r0, #8]
 8022b0a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8022b0e:	ee07 1a10 	vmov	s14, r1
 8022b12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8022b16:	bc30      	pop	{r4, r5}
 8022b18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8022b1c:	edc2 6a00 	vstr	s13, [r2]
 8022b20:	4770      	bx	lr
 8022b22:	bf00      	nop
 8022b24:	00000000 	.word	0x00000000

08022b28 <arm_correlate_f32>:
 8022b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b2c:	4299      	cmp	r1, r3
 8022b2e:	b08d      	sub	sp, #52	@ 0x34
 8022b30:	f0c0 824c 	bcc.w	8022fcc <arm_correlate_f32+0x4a4>
 8022b34:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022b36:	eba1 0c03 	sub.w	ip, r1, r3
 8022b3a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8022b3e:	f04f 0e04 	mov.w	lr, #4
 8022b42:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8022b46:	3101      	adds	r1, #1
 8022b48:	1ac9      	subs	r1, r1, r3
 8022b4a:	3c01      	subs	r4, #1
 8022b4c:	1e5e      	subs	r6, r3, #1
 8022b4e:	9102      	str	r1, [sp, #8]
 8022b50:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8022b54:	f000 8294 	beq.w	8023080 <arm_correlate_f32+0x558>
 8022b58:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022b5c:	f1a1 0804 	sub.w	r8, r1, #4
 8022b60:	46e1      	mov	r9, ip
 8022b62:	4605      	mov	r5, r0
 8022b64:	2401      	movs	r4, #1
 8022b66:	f014 0703 	ands.w	r7, r4, #3
 8022b6a:	d01b      	beq.n	8022ba4 <arm_correlate_f32+0x7c>
 8022b6c:	ed91 7a00 	vldr	s14, [r1]
 8022b70:	edd5 6a00 	vldr	s13, [r5]
 8022b74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022b78:	3f01      	subs	r7, #1
 8022b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b7e:	d011      	beq.n	8022ba4 <arm_correlate_f32+0x7c>
 8022b80:	ed91 7a01 	vldr	s14, [r1, #4]
 8022b84:	edd5 6a01 	vldr	s13, [r5, #4]
 8022b88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022b8c:	2f01      	cmp	r7, #1
 8022b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b92:	d007      	beq.n	8022ba4 <arm_correlate_f32+0x7c>
 8022b94:	ed95 7a02 	vldr	s14, [r5, #8]
 8022b98:	edd1 6a02 	vldr	s13, [r1, #8]
 8022b9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ba4:	1c67      	adds	r7, r4, #1
 8022ba6:	42bb      	cmp	r3, r7
 8022ba8:	edc9 7a00 	vstr	s15, [r9]
 8022bac:	4641      	mov	r1, r8
 8022bae:	44f1      	add	r9, lr
 8022bb0:	d03a      	beq.n	8022c28 <arm_correlate_f32+0x100>
 8022bb2:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8022bb6:	f000 8267 	beq.w	8023088 <arm_correlate_f32+0x560>
 8022bba:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8022bbe:	f100 0110 	add.w	r1, r0, #16
 8022bc2:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022bc6:	eb01 050a 	add.w	r5, r1, sl
 8022bca:	f108 0410 	add.w	r4, r8, #16
 8022bce:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022bd2:	ed54 3a04 	vldr	s7, [r4, #-16]
 8022bd6:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022bda:	ed14 4a03 	vldr	s8, [r4, #-12]
 8022bde:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022be2:	ed54 4a02 	vldr	s9, [r4, #-8]
 8022be6:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022bea:	ed14 5a01 	vldr	s10, [r4, #-4]
 8022bee:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022bf2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022bfa:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022bfe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022c02:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022c0a:	3110      	adds	r1, #16
 8022c0c:	428d      	cmp	r5, r1
 8022c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022c12:	f104 0410 	add.w	r4, r4, #16
 8022c16:	d1da      	bne.n	8022bce <arm_correlate_f32+0xa6>
 8022c18:	eb00 050a 	add.w	r5, r0, sl
 8022c1c:	eb08 010a 	add.w	r1, r8, sl
 8022c20:	f1a8 0804 	sub.w	r8, r8, #4
 8022c24:	463c      	mov	r4, r7
 8022c26:	e79e      	b.n	8022b66 <arm_correlate_f32+0x3e>
 8022c28:	2b03      	cmp	r3, #3
 8022c2a:	fb0e cc04 	mla	ip, lr, r4, ip
 8022c2e:	f240 81dd 	bls.w	8022fec <arm_correlate_f32+0x4c4>
 8022c32:	9b02      	ldr	r3, [sp, #8]
 8022c34:	0899      	lsrs	r1, r3, #2
 8022c36:	9103      	str	r1, [sp, #12]
 8022c38:	f000 8220 	beq.w	802307c <arm_correlate_f32+0x554>
 8022c3c:	08bb      	lsrs	r3, r7, #2
 8022c3e:	f007 0403 	and.w	r4, r7, #3
 8022c42:	9300      	str	r3, [sp, #0]
 8022c44:	011b      	lsls	r3, r3, #4
 8022c46:	f103 0b0c 	add.w	fp, r3, #12
 8022c4a:	18d5      	adds	r5, r2, r3
 8022c4c:	1e63      	subs	r3, r4, #1
 8022c4e:	0109      	lsls	r1, r1, #4
 8022c50:	9306      	str	r3, [sp, #24]
 8022c52:	f100 080c 	add.w	r8, r0, #12
 8022c56:	9401      	str	r4, [sp, #4]
 8022c58:	9104      	str	r1, [sp, #16]
 8022c5a:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8022c5e:	4441      	add	r1, r8
 8022c60:	f102 0310 	add.w	r3, r2, #16
 8022c64:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 8022c68:	9e06      	ldr	r6, [sp, #24]
 8022c6a:	9405      	str	r4, [sp, #20]
 8022c6c:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8022c70:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8022c74:	46e1      	mov	r9, ip
 8022c76:	4483      	add	fp, r0
 8022c78:	460f      	mov	r7, r1
 8022c7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022c7c:	469c      	mov	ip, r3
 8022c7e:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022c82:	ed58 1a03 	vldr	s3, [r8, #-12]
 8022c86:	ed18 2a02 	vldr	s4, [r8, #-8]
 8022c8a:	ed58 2a01 	vldr	s5, [r8, #-4]
 8022c8e:	ed98 0a00 	vldr	s0, [r8]
 8022c92:	9900      	ldr	r1, [sp, #0]
 8022c94:	eef0 5a46 	vmov.f32	s11, s12
 8022c98:	eeb0 5a46 	vmov.f32	s10, s12
 8022c9c:	eef0 4a46 	vmov.f32	s9, s12
 8022ca0:	4663      	mov	r3, ip
 8022ca2:	4642      	mov	r2, r8
 8022ca4:	e005      	b.n	8022cb2 <arm_correlate_f32+0x18a>
 8022ca6:	bf00      	nop
 8022ca8:	00000000 	.word	0x00000000
 8022cac:	ed90 0a04 	vldr	s0, [r0, #16]
 8022cb0:	3210      	adds	r2, #16
 8022cb2:	ed53 6a04 	vldr	s13, [r3, #-16]
 8022cb6:	ed13 7a03 	vldr	s14, [r3, #-12]
 8022cba:	ed53 7a02 	vldr	s15, [r3, #-8]
 8022cbe:	ed13 1a01 	vldr	s2, [r3, #-4]
 8022cc2:	ee62 3a26 	vmul.f32	s7, s4, s13
 8022cc6:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8022cca:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8022cce:	edd2 1a01 	vldr	s3, [r2, #4]
 8022cd2:	ee66 6a80 	vmul.f32	s13, s13, s0
 8022cd6:	ee22 3a07 	vmul.f32	s6, s4, s14
 8022cda:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022cde:	ee74 5a25 	vadd.f32	s11, s8, s11
 8022ce2:	ee62 3a87 	vmul.f32	s7, s5, s14
 8022ce6:	ee20 4a07 	vmul.f32	s8, s0, s14
 8022cea:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8022cee:	ee36 6a86 	vadd.f32	s12, s13, s12
 8022cf2:	ed92 2a02 	vldr	s4, [r2, #8]
 8022cf6:	ee27 7a21 	vmul.f32	s14, s14, s3
 8022cfa:	ee73 3a85 	vadd.f32	s7, s7, s10
 8022cfe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8022d02:	ee20 5a27 	vmul.f32	s10, s0, s15
 8022d06:	ee33 3a24 	vadd.f32	s6, s6, s9
 8022d0a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8022d0e:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8022d12:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8022d16:	edd2 2a03 	vldr	s5, [r2, #12]
 8022d1a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8022d1e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022d22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d26:	ee74 4a83 	vadd.f32	s9, s9, s6
 8022d2a:	ee20 0a01 	vmul.f32	s0, s0, s2
 8022d2e:	ee61 3a81 	vmul.f32	s7, s3, s2
 8022d32:	ee75 5a84 	vadd.f32	s11, s11, s8
 8022d36:	ee22 7a01 	vmul.f32	s14, s4, s2
 8022d3a:	ee21 6a22 	vmul.f32	s12, s2, s5
 8022d3e:	3901      	subs	r1, #1
 8022d40:	f103 0310 	add.w	r3, r3, #16
 8022d44:	ee70 4a24 	vadd.f32	s9, s0, s9
 8022d48:	ee33 5a85 	vadd.f32	s10, s7, s10
 8022d4c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8022d50:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022d54:	4610      	mov	r0, r2
 8022d56:	d1a9      	bne.n	8022cac <arm_correlate_f32+0x184>
 8022d58:	9b01      	ldr	r3, [sp, #4]
 8022d5a:	b3f3      	cbz	r3, 8022dda <arm_correlate_f32+0x2b2>
 8022d5c:	edd5 7a00 	vldr	s15, [r5]
 8022d60:	ed9b 4a00 	vldr	s8, [fp]
 8022d64:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8022d68:	ee62 3a27 	vmul.f32	s7, s4, s15
 8022d6c:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8022d70:	ee64 7a27 	vmul.f32	s15, s8, s15
 8022d74:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8022d78:	ee35 5a23 	vadd.f32	s10, s10, s7
 8022d7c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8022d80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022d84:	b34e      	cbz	r6, 8022dda <arm_correlate_f32+0x2b2>
 8022d86:	edd5 7a01 	vldr	s15, [r5, #4]
 8022d8a:	eddb 6a01 	vldr	s13, [fp, #4]
 8022d8e:	ee22 7a27 	vmul.f32	s14, s4, s15
 8022d92:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8022d96:	ee67 3a84 	vmul.f32	s7, s15, s8
 8022d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022d9e:	2e01      	cmp	r6, #1
 8022da0:	ee74 4a87 	vadd.f32	s9, s9, s14
 8022da4:	ee35 5a03 	vadd.f32	s10, s10, s6
 8022da8:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8022dac:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022db0:	d013      	beq.n	8022dda <arm_correlate_f32+0x2b2>
 8022db2:	ed95 7a02 	vldr	s14, [r5, #8]
 8022db6:	eddb 3a02 	vldr	s7, [fp, #8]
 8022dba:	ee62 7a87 	vmul.f32	s15, s5, s14
 8022dbe:	ee27 4a04 	vmul.f32	s8, s14, s8
 8022dc2:	ee67 6a26 	vmul.f32	s13, s14, s13
 8022dc6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022dca:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8022dce:	ee35 5a04 	vadd.f32	s10, s10, s8
 8022dd2:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8022dd6:	ee36 6a07 	vadd.f32	s12, s12, s14
 8022dda:	f108 0810 	add.w	r8, r8, #16
 8022dde:	eb09 020e 	add.w	r2, r9, lr
 8022de2:	eb0a 030e 	add.w	r3, sl, lr
 8022de6:	4547      	cmp	r7, r8
 8022de8:	edc9 4a00 	vstr	s9, [r9]
 8022dec:	f10b 0b10 	add.w	fp, fp, #16
 8022df0:	ed82 5a00 	vstr	s10, [r2]
 8022df4:	44a1      	add	r9, r4
 8022df6:	edca 5a00 	vstr	s11, [sl]
 8022dfa:	ed83 6a00 	vstr	s12, [r3]
 8022dfe:	44a2      	add	sl, r4
 8022e00:	f47f af3d 	bne.w	8022c7e <arm_correlate_f32+0x156>
 8022e04:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8022e08:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 8022e0c:	9b03      	ldr	r3, [sp, #12]
 8022e0e:	9c05      	ldr	r4, [sp, #20]
 8022e10:	9904      	ldr	r1, [sp, #16]
 8022e12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022e14:	fb04 cc03 	mla	ip, r4, r3, ip
 8022e18:	4401      	add	r1, r0
 8022e1a:	009b      	lsls	r3, r3, #2
 8022e1c:	460d      	mov	r5, r1
 8022e1e:	9303      	str	r3, [sp, #12]
 8022e20:	9b02      	ldr	r3, [sp, #8]
 8022e22:	f013 0303 	ands.w	r3, r3, #3
 8022e26:	9301      	str	r3, [sp, #4]
 8022e28:	d071      	beq.n	8022f0e <arm_correlate_f32+0x3e6>
 8022e2a:	9903      	ldr	r1, [sp, #12]
 8022e2c:	9205      	str	r2, [sp, #20]
 8022e2e:	f007 0403 	and.w	r4, r7, #3
 8022e32:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8022e36:	1c4f      	adds	r7, r1, #1
 8022e38:	1859      	adds	r1, r3, r1
 8022e3a:	1d03      	adds	r3, r0, #4
 8022e3c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8022e40:	9400      	str	r4, [sp, #0]
 8022e42:	f102 0110 	add.w	r1, r2, #16
 8022e46:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8022e4a:	3c01      	subs	r4, #1
 8022e4c:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8022e50:	eb02 090a 	add.w	r9, r2, sl
 8022e54:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8022e58:	46e0      	mov	r8, ip
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	460e      	mov	r6, r1
 8022e5e:	4622      	mov	r2, r4
 8022e60:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022e64:	f105 0110 	add.w	r1, r5, #16
 8022e68:	4633      	mov	r3, r6
 8022e6a:	465c      	mov	r4, fp
 8022e6c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8022e70:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022e74:	ed11 6a03 	vldr	s12, [r1, #-12]
 8022e78:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022e7c:	ed51 6a02 	vldr	s13, [r1, #-8]
 8022e80:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022e84:	ed51 5a01 	vldr	s11, [r1, #-4]
 8022e88:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022e8c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8022e90:	ee26 6a04 	vmul.f32	s12, s12, s8
 8022e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022e98:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8022e9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8022ea0:	ee65 6a85 	vmul.f32	s13, s11, s10
 8022ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022ea8:	3c01      	subs	r4, #1
 8022eaa:	f101 0110 	add.w	r1, r1, #16
 8022eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022eb2:	f103 0310 	add.w	r3, r3, #16
 8022eb6:	d1d9      	bne.n	8022e6c <arm_correlate_f32+0x344>
 8022eb8:	9b00      	ldr	r3, [sp, #0]
 8022eba:	4455      	add	r5, sl
 8022ebc:	b1d3      	cbz	r3, 8022ef4 <arm_correlate_f32+0x3cc>
 8022ebe:	ed99 7a00 	vldr	s14, [r9]
 8022ec2:	edd5 6a00 	vldr	s13, [r5]
 8022ec6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ece:	b18a      	cbz	r2, 8022ef4 <arm_correlate_f32+0x3cc>
 8022ed0:	ed99 7a01 	vldr	s14, [r9, #4]
 8022ed4:	edd5 6a01 	vldr	s13, [r5, #4]
 8022ed8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022edc:	2a01      	cmp	r2, #1
 8022ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ee2:	d007      	beq.n	8022ef4 <arm_correlate_f32+0x3cc>
 8022ee4:	ed95 7a02 	vldr	s14, [r5, #8]
 8022ee8:	edd9 6a02 	vldr	s13, [r9, #8]
 8022eec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022ef4:	463d      	mov	r5, r7
 8022ef6:	3704      	adds	r7, #4
 8022ef8:	42b8      	cmp	r0, r7
 8022efa:	edc8 7a00 	vstr	s15, [r8]
 8022efe:	44f0      	add	r8, lr
 8022f00:	d1ae      	bne.n	8022e60 <arm_correlate_f32+0x338>
 8022f02:	9b01      	ldr	r3, [sp, #4]
 8022f04:	9a05      	ldr	r2, [sp, #20]
 8022f06:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8022f0a:	fb0e cc03 	mla	ip, lr, r3, ip
 8022f0e:	9b02      	ldr	r3, [sp, #8]
 8022f10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022f14:	08b5      	lsrs	r5, r6, #2
 8022f16:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022f1a:	f000 80ac 	beq.w	8023076 <arm_correlate_f32+0x54e>
 8022f1e:	f100 0110 	add.w	r1, r0, #16
 8022f22:	f102 0310 	add.w	r3, r2, #16
 8022f26:	462c      	mov	r4, r5
 8022f28:	ed51 6a04 	vldr	s13, [r1, #-16]
 8022f2c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8022f30:	ed11 7a03 	vldr	s14, [r1, #-12]
 8022f34:	ed13 4a03 	vldr	s8, [r3, #-12]
 8022f38:	ed51 7a02 	vldr	s15, [r1, #-8]
 8022f3c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8022f40:	ed11 6a01 	vldr	s12, [r1, #-4]
 8022f44:	ed13 5a01 	vldr	s10, [r3, #-4]
 8022f48:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8022f4c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8022f50:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8022f54:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8022f58:	ee37 7a26 	vadd.f32	s14, s14, s13
 8022f5c:	ee66 6a05 	vmul.f32	s13, s12, s10
 8022f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f64:	3c01      	subs	r4, #1
 8022f66:	f101 0110 	add.w	r1, r1, #16
 8022f6a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8022f6e:	f103 0310 	add.w	r3, r3, #16
 8022f72:	d1d9      	bne.n	8022f28 <arm_correlate_f32+0x400>
 8022f74:	012d      	lsls	r5, r5, #4
 8022f76:	1941      	adds	r1, r0, r5
 8022f78:	4415      	add	r5, r2
 8022f7a:	f016 0303 	ands.w	r3, r6, #3
 8022f7e:	d01b      	beq.n	8022fb8 <arm_correlate_f32+0x490>
 8022f80:	edd5 7a00 	vldr	s15, [r5]
 8022f84:	ed91 7a00 	vldr	s14, [r1]
 8022f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022f8c:	3b01      	subs	r3, #1
 8022f8e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022f92:	d011      	beq.n	8022fb8 <arm_correlate_f32+0x490>
 8022f94:	edd5 7a01 	vldr	s15, [r5, #4]
 8022f98:	ed91 7a01 	vldr	s14, [r1, #4]
 8022f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fa0:	2b01      	cmp	r3, #1
 8022fa2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022fa6:	d007      	beq.n	8022fb8 <arm_correlate_f32+0x490>
 8022fa8:	edd1 7a02 	vldr	s15, [r1, #8]
 8022fac:	ed95 7a02 	vldr	s14, [r5, #8]
 8022fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022fb4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8022fb8:	3e01      	subs	r6, #1
 8022fba:	edcc 5a00 	vstr	s11, [ip]
 8022fbe:	f100 0004 	add.w	r0, r0, #4
 8022fc2:	44f4      	add	ip, lr
 8022fc4:	d1a6      	bne.n	8022f14 <arm_correlate_f32+0x3ec>
 8022fc6:	b00d      	add	sp, #52	@ 0x34
 8022fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fcc:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 8022fd0:	4606      	mov	r6, r0
 8022fd2:	3c02      	subs	r4, #2
 8022fd4:	4610      	mov	r0, r2
 8022fd6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022fd8:	440c      	add	r4, r1
 8022fda:	460d      	mov	r5, r1
 8022fdc:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8022fe0:	4619      	mov	r1, r3
 8022fe2:	4632      	mov	r2, r6
 8022fe4:	f06f 0e03 	mvn.w	lr, #3
 8022fe8:	462b      	mov	r3, r5
 8022fea:	e5aa      	b.n	8022b42 <arm_correlate_f32+0x1a>
 8022fec:	9902      	ldr	r1, [sp, #8]
 8022fee:	2900      	cmp	r1, #0
 8022ff0:	d090      	beq.n	8022f14 <arm_correlate_f32+0x3ec>
 8022ff2:	9902      	ldr	r1, [sp, #8]
 8022ff4:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 8022ca8 <arm_correlate_f32+0x180>
 8022ff8:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8022ffc:	eb00 0708 	add.w	r7, r0, r8
 8023000:	4601      	mov	r1, r0
 8023002:	4665      	mov	r5, ip
 8023004:	e020      	b.n	8023048 <arm_correlate_f32+0x520>
 8023006:	edd2 7a00 	vldr	s15, [r2]
 802300a:	ecb4 7a01 	vldmia	r4!, {s14}
 802300e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023012:	ee77 7a86 	vadd.f32	s15, s15, s12
 8023016:	b18e      	cbz	r6, 802303c <arm_correlate_f32+0x514>
 8023018:	ed92 7a01 	vldr	s14, [r2, #4]
 802301c:	edd1 6a01 	vldr	s13, [r1, #4]
 8023020:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023024:	2b02      	cmp	r3, #2
 8023026:	ee77 7a87 	vadd.f32	s15, s15, s14
 802302a:	d007      	beq.n	802303c <arm_correlate_f32+0x514>
 802302c:	ed91 7a02 	vldr	s14, [r1, #8]
 8023030:	edd2 6a02 	vldr	s13, [r2, #8]
 8023034:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023038:	ee77 7a87 	vadd.f32	s15, s15, s14
 802303c:	42bc      	cmp	r4, r7
 802303e:	edc5 7a00 	vstr	s15, [r5]
 8023042:	4621      	mov	r1, r4
 8023044:	4475      	add	r5, lr
 8023046:	d00b      	beq.n	8023060 <arm_correlate_f32+0x538>
 8023048:	460c      	mov	r4, r1
 802304a:	2b00      	cmp	r3, #0
 802304c:	d1db      	bne.n	8023006 <arm_correlate_f32+0x4de>
 802304e:	1d0c      	adds	r4, r1, #4
 8023050:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8023090 <arm_correlate_f32+0x568>
 8023054:	42bc      	cmp	r4, r7
 8023056:	edc5 7a00 	vstr	s15, [r5]
 802305a:	4621      	mov	r1, r4
 802305c:	4475      	add	r5, lr
 802305e:	d1f3      	bne.n	8023048 <arm_correlate_f32+0x520>
 8023060:	9b02      	ldr	r3, [sp, #8]
 8023062:	4440      	add	r0, r8
 8023064:	fb0e cc03 	mla	ip, lr, r3, ip
 8023068:	2e00      	cmp	r6, #0
 802306a:	d0ac      	beq.n	8022fc6 <arm_correlate_f32+0x49e>
 802306c:	08b5      	lsrs	r5, r6, #2
 802306e:	eddf 5a08 	vldr	s11, [pc, #32]	@ 8023090 <arm_correlate_f32+0x568>
 8023072:	f47f af54 	bne.w	8022f1e <arm_correlate_f32+0x3f6>
 8023076:	4615      	mov	r5, r2
 8023078:	4601      	mov	r1, r0
 802307a:	e77e      	b.n	8022f7a <arm_correlate_f32+0x452>
 802307c:	4605      	mov	r5, r0
 802307e:	e6cf      	b.n	8022e20 <arm_correlate_f32+0x2f8>
 8023080:	9902      	ldr	r1, [sp, #8]
 8023082:	2900      	cmp	r1, #0
 8023084:	d1b5      	bne.n	8022ff2 <arm_correlate_f32+0x4ca>
 8023086:	e79e      	b.n	8022fc6 <arm_correlate_f32+0x49e>
 8023088:	eddf 7a01 	vldr	s15, [pc, #4]	@ 8023090 <arm_correlate_f32+0x568>
 802308c:	4605      	mov	r5, r0
 802308e:	e5c7      	b.n	8022c20 <arm_correlate_f32+0xf8>
 8023090:	00000000 	.word	0x00000000

08023094 <arm_conv_f32>:
 8023094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023098:	b08b      	sub	sp, #44	@ 0x2c
 802309a:	4299      	cmp	r1, r3
 802309c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802309e:	d205      	bcs.n	80230ac <arm_conv_f32+0x18>
 80230a0:	4606      	mov	r6, r0
 80230a2:	460c      	mov	r4, r1
 80230a4:	4610      	mov	r0, r2
 80230a6:	4619      	mov	r1, r3
 80230a8:	4632      	mov	r2, r6
 80230aa:	4623      	mov	r3, r4
 80230ac:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 80230b0:	3101      	adds	r1, #1
 80230b2:	1ac9      	subs	r1, r1, r3
 80230b4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80230b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80230bc:	9101      	str	r1, [sp, #4]
 80230be:	1e59      	subs	r1, r3, #1
 80230c0:	eb02 070b 	add.w	r7, r2, fp
 80230c4:	f000 8277 	beq.w	80235b6 <arm_conv_f32+0x522>
 80230c8:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 8023388 <arm_conv_f32+0x2f4>
 80230cc:	f102 0904 	add.w	r9, r2, #4
 80230d0:	46aa      	mov	sl, r5
 80230d2:	4680      	mov	r8, r0
 80230d4:	2401      	movs	r4, #1
 80230d6:	f014 0603 	ands.w	r6, r4, #3
 80230da:	d01b      	beq.n	8023114 <arm_conv_f32+0x80>
 80230dc:	ed92 7a00 	vldr	s14, [r2]
 80230e0:	edd8 6a00 	vldr	s13, [r8]
 80230e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80230e8:	3e01      	subs	r6, #1
 80230ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80230ee:	d011      	beq.n	8023114 <arm_conv_f32+0x80>
 80230f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80230f4:	edd8 6a01 	vldr	s13, [r8, #4]
 80230f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80230fc:	2e01      	cmp	r6, #1
 80230fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023102:	d007      	beq.n	8023114 <arm_conv_f32+0x80>
 8023104:	ed98 7a02 	vldr	s14, [r8, #8]
 8023108:	ed52 6a02 	vldr	s13, [r2, #-8]
 802310c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023114:	3401      	adds	r4, #1
 8023116:	42a3      	cmp	r3, r4
 8023118:	ecea 7a01 	vstmia	sl!, {s15}
 802311c:	464a      	mov	r2, r9
 802311e:	d03a      	beq.n	8023196 <arm_conv_f32+0x102>
 8023120:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8023124:	f000 824c 	beq.w	80235c0 <arm_conv_f32+0x52c>
 8023128:	f100 0210 	add.w	r2, r0, #16
 802312c:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8023130:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8023388 <arm_conv_f32+0x2f4>
 8023134:	eb02 0c08 	add.w	ip, r2, r8
 8023138:	f1a9 0610 	sub.w	r6, r9, #16
 802313c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8023140:	edd6 3a04 	vldr	s7, [r6, #16]
 8023144:	ed12 6a03 	vldr	s12, [r2, #-12]
 8023148:	ed96 4a03 	vldr	s8, [r6, #12]
 802314c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8023150:	edd6 4a02 	vldr	s9, [r6, #8]
 8023154:	ed52 5a01 	vldr	s11, [r2, #-4]
 8023158:	ed96 5a01 	vldr	s10, [r6, #4]
 802315c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8023160:	ee26 6a04 	vmul.f32	s12, s12, s8
 8023164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023168:	ee26 7aa4 	vmul.f32	s14, s13, s9
 802316c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8023170:	ee65 6a85 	vmul.f32	s13, s11, s10
 8023174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023178:	3210      	adds	r2, #16
 802317a:	4594      	cmp	ip, r2
 802317c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023180:	f1a6 0610 	sub.w	r6, r6, #16
 8023184:	d1da      	bne.n	802313c <arm_conv_f32+0xa8>
 8023186:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 802318a:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 802318e:	4480      	add	r8, r0
 8023190:	f109 0904 	add.w	r9, r9, #4
 8023194:	e79f      	b.n	80230d6 <arm_conv_f32+0x42>
 8023196:	2b03      	cmp	r3, #3
 8023198:	445d      	add	r5, fp
 802319a:	f240 80e9 	bls.w	8023370 <arm_conv_f32+0x2dc>
 802319e:	9b01      	ldr	r3, [sp, #4]
 80231a0:	089a      	lsrs	r2, r3, #2
 80231a2:	9202      	str	r2, [sp, #8]
 80231a4:	f000 8203 	beq.w	80235ae <arm_conv_f32+0x51a>
 80231a8:	ea4f 0894 	mov.w	r8, r4, lsr #2
 80231ac:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80231b0:	0112      	lsls	r2, r2, #4
 80231b2:	f004 0603 	and.w	r6, r4, #3
 80231b6:	9203      	str	r2, [sp, #12]
 80231b8:	f1a3 0a10 	sub.w	sl, r3, #16
 80231bc:	f1a3 020c 	sub.w	r2, r3, #12
 80231c0:	3b08      	subs	r3, #8
 80231c2:	9204      	str	r2, [sp, #16]
 80231c4:	9305      	str	r3, [sp, #20]
 80231c6:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
 80231ca:	e9cd 7008 	strd	r7, r0, [sp, #32]
 80231ce:	9a03      	ldr	r2, [sp, #12]
 80231d0:	f100 0c1c 	add.w	ip, r0, #28
 80231d4:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80231d8:	464c      	mov	r4, r9
 80231da:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80231de:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80231e2:	f1a7 0310 	sub.w	r3, r7, #16
 80231e6:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80231ea:	eb05 0b02 	add.w	fp, r5, r2
 80231ee:	461f      	mov	r7, r3
 80231f0:	3510      	adds	r5, #16
 80231f2:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8023388 <arm_conv_f32+0x2f4>
 80231f6:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 80231fa:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 80231fe:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 8023202:	eeb0 5a46 	vmov.f32	s10, s12
 8023206:	eef0 4a46 	vmov.f32	s9, s12
 802320a:	eef0 5a46 	vmov.f32	s11, s12
 802320e:	463a      	mov	r2, r7
 8023210:	4663      	mov	r3, ip
 8023212:	4641      	mov	r1, r8
 8023214:	edd2 6a04 	vldr	s13, [r2, #16]
 8023218:	ed13 0a04 	vldr	s0, [r3, #-16]
 802321c:	ed92 7a03 	vldr	s14, [r2, #12]
 8023220:	edd2 7a02 	vldr	s15, [r2, #8]
 8023224:	edd2 0a01 	vldr	s1, [r2, #4]
 8023228:	ee21 3aa6 	vmul.f32	s6, s3, s13
 802322c:	ee62 3a26 	vmul.f32	s7, s4, s13
 8023230:	ee61 2a26 	vmul.f32	s5, s2, s13
 8023234:	ed13 1a03 	vldr	s2, [r3, #-12]
 8023238:	ee66 6a80 	vmul.f32	s13, s13, s0
 802323c:	ee21 4a87 	vmul.f32	s8, s3, s14
 8023240:	ee73 4a24 	vadd.f32	s9, s6, s9
 8023244:	ee33 5a85 	vadd.f32	s10, s7, s10
 8023248:	ee22 3a07 	vmul.f32	s6, s4, s14
 802324c:	ed53 1a02 	vldr	s3, [r3, #-8]
 8023250:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8023254:	ee36 6a86 	vadd.f32	s12, s13, s12
 8023258:	ee60 3a07 	vmul.f32	s7, s0, s14
 802325c:	ee27 7a01 	vmul.f32	s14, s14, s2
 8023260:	ee33 3a24 	vadd.f32	s6, s6, s9
 8023264:	ee37 7a06 	vadd.f32	s14, s14, s12
 8023268:	ee74 2a22 	vadd.f32	s5, s8, s5
 802326c:	ee60 4a27 	vmul.f32	s9, s0, s15
 8023270:	ee22 4a27 	vmul.f32	s8, s4, s15
 8023274:	ee73 3a85 	vadd.f32	s7, s7, s10
 8023278:	ed13 2a01 	vldr	s4, [r3, #-4]
 802327c:	ee21 5a27 	vmul.f32	s10, s2, s15
 8023280:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8023284:	ee74 4a83 	vadd.f32	s9, s9, s6
 8023288:	ee77 7a87 	vadd.f32	s15, s15, s14
 802328c:	ee34 4a22 	vadd.f32	s8, s8, s5
 8023290:	ee60 5a20 	vmul.f32	s11, s0, s1
 8023294:	ee21 3a20 	vmul.f32	s6, s2, s1
 8023298:	ee35 5a23 	vadd.f32	s10, s10, s7
 802329c:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80232a0:	ee20 6a82 	vmul.f32	s12, s1, s4
 80232a4:	3901      	subs	r1, #1
 80232a6:	f1a2 0210 	sub.w	r2, r2, #16
 80232aa:	ee75 5a84 	vadd.f32	s11, s11, s8
 80232ae:	ee73 4a24 	vadd.f32	s9, s6, s9
 80232b2:	ee37 5a05 	vadd.f32	s10, s14, s10
 80232b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80232ba:	f103 0310 	add.w	r3, r3, #16
 80232be:	d1a9      	bne.n	8023214 <arm_conv_f32+0x180>
 80232c0:	eb0a 030c 	add.w	r3, sl, ip
 80232c4:	2e00      	cmp	r6, #0
 80232c6:	d042      	beq.n	802334e <arm_conv_f32+0x2ba>
 80232c8:	edde 7a00 	vldr	s15, [lr]
 80232cc:	ed93 4a00 	vldr	s8, [r3]
 80232d0:	ee61 6a27 	vmul.f32	s13, s2, s15
 80232d4:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80232d8:	ee22 7a27 	vmul.f32	s14, s4, s15
 80232dc:	ee64 7a27 	vmul.f32	s15, s8, s15
 80232e0:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80232e4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80232e8:	ee35 5a07 	vadd.f32	s10, s10, s14
 80232ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80232f0:	eb09 030c 	add.w	r3, r9, ip
 80232f4:	b35c      	cbz	r4, 802334e <arm_conv_f32+0x2ba>
 80232f6:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80232fa:	edd3 6a00 	vldr	s13, [r3]
 80232fe:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8023302:	ee22 3a27 	vmul.f32	s6, s4, s15
 8023306:	ee67 3a84 	vmul.f32	s7, s15, s8
 802330a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802330e:	2c01      	cmp	r4, #1
 8023310:	ee75 5a87 	vadd.f32	s11, s11, s14
 8023314:	ee74 4a83 	vadd.f32	s9, s9, s6
 8023318:	ee35 5a23 	vadd.f32	s10, s10, s7
 802331c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8023320:	eb00 030c 	add.w	r3, r0, ip
 8023324:	d013      	beq.n	802334e <arm_conv_f32+0x2ba>
 8023326:	ed1e 7a02 	vldr	s14, [lr, #-8]
 802332a:	edd3 3a00 	vldr	s7, [r3]
 802332e:	ee62 7a07 	vmul.f32	s15, s4, s14
 8023332:	ee27 4a04 	vmul.f32	s8, s14, s8
 8023336:	ee67 6a26 	vmul.f32	s13, s14, s13
 802333a:	ee27 7a23 	vmul.f32	s14, s14, s7
 802333e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8023342:	ee74 4a84 	vadd.f32	s9, s9, s8
 8023346:	ee35 5a26 	vadd.f32	s10, s10, s13
 802334a:	ee36 6a07 	vadd.f32	s12, s12, s14
 802334e:	45ab      	cmp	fp, r5
 8023350:	ed45 5a04 	vstr	s11, [r5, #-16]
 8023354:	ed45 4a03 	vstr	s9, [r5, #-12]
 8023358:	ed05 5a02 	vstr	s10, [r5, #-8]
 802335c:	ed05 6a01 	vstr	s12, [r5, #-4]
 8023360:	f10c 0c10 	add.w	ip, ip, #16
 8023364:	f105 0310 	add.w	r3, r5, #16
 8023368:	f000 809e 	beq.w	80234a8 <arm_conv_f32+0x414>
 802336c:	461d      	mov	r5, r3
 802336e:	e740      	b.n	80231f2 <arm_conv_f32+0x15e>
 8023370:	9a01      	ldr	r2, [sp, #4]
 8023372:	46ac      	mov	ip, r5
 8023374:	2a00      	cmp	r2, #0
 8023376:	d037      	beq.n	80233e8 <arm_conv_f32+0x354>
 8023378:	9a01      	ldr	r2, [sp, #4]
 802337a:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 8023388 <arm_conv_f32+0x2f4>
 802337e:	0096      	lsls	r6, r2, #2
 8023380:	eb05 0c06 	add.w	ip, r5, r6
 8023384:	4604      	mov	r4, r0
 8023386:	e021      	b.n	80233cc <arm_conv_f32+0x338>
 8023388:	00000000 	.word	0x00000000
 802338c:	edd7 7a00 	vldr	s15, [r7]
 8023390:	ecb2 7a01 	vldmia	r2!, {s14}
 8023394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023398:	ee77 7a86 	vadd.f32	s15, s15, s12
 802339c:	b189      	cbz	r1, 80233c2 <arm_conv_f32+0x32e>
 802339e:	ed17 7a01 	vldr	s14, [r7, #-4]
 80233a2:	edd4 6a01 	vldr	s13, [r4, #4]
 80233a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80233aa:	2b02      	cmp	r3, #2
 80233ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80233b0:	d007      	beq.n	80233c2 <arm_conv_f32+0x32e>
 80233b2:	ed94 7a02 	vldr	s14, [r4, #8]
 80233b6:	ed57 6a02 	vldr	s13, [r7, #-8]
 80233ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80233be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80233c2:	ece5 7a01 	vstmia	r5!, {s15}
 80233c6:	4565      	cmp	r5, ip
 80233c8:	4614      	mov	r4, r2
 80233ca:	d00a      	beq.n	80233e2 <arm_conv_f32+0x34e>
 80233cc:	4622      	mov	r2, r4
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d1dc      	bne.n	802338c <arm_conv_f32+0x2f8>
 80233d2:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8023388 <arm_conv_f32+0x2f4>
 80233d6:	ece5 7a01 	vstmia	r5!, {s15}
 80233da:	1d22      	adds	r2, r4, #4
 80233dc:	4565      	cmp	r5, ip
 80233de:	4614      	mov	r4, r2
 80233e0:	d1f4      	bne.n	80233cc <arm_conv_f32+0x338>
 80233e2:	4430      	add	r0, r6
 80233e4:	2900      	cmp	r1, #0
 80233e6:	d059      	beq.n	802349c <arm_conv_f32+0x408>
 80233e8:	088d      	lsrs	r5, r1, #2
 80233ea:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 8023388 <arm_conv_f32+0x2f4>
 80233ee:	d058      	beq.n	80234a2 <arm_conv_f32+0x40e>
 80233f0:	f100 0210 	add.w	r2, r0, #16
 80233f4:	f1a7 0310 	sub.w	r3, r7, #16
 80233f8:	462c      	mov	r4, r5
 80233fa:	ed52 6a04 	vldr	s13, [r2, #-16]
 80233fe:	edd3 3a04 	vldr	s7, [r3, #16]
 8023402:	ed12 7a03 	vldr	s14, [r2, #-12]
 8023406:	ed93 4a03 	vldr	s8, [r3, #12]
 802340a:	ed52 7a02 	vldr	s15, [r2, #-8]
 802340e:	edd3 4a02 	vldr	s9, [r3, #8]
 8023412:	ed12 6a01 	vldr	s12, [r2, #-4]
 8023416:	ed93 5a01 	vldr	s10, [r3, #4]
 802341a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 802341e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8023422:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8023426:	ee67 7aa4 	vmul.f32	s15, s15, s9
 802342a:	ee37 7a26 	vadd.f32	s14, s14, s13
 802342e:	ee66 6a05 	vmul.f32	s13, s12, s10
 8023432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023436:	3c01      	subs	r4, #1
 8023438:	f102 0210 	add.w	r2, r2, #16
 802343c:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8023440:	f1a3 0310 	sub.w	r3, r3, #16
 8023444:	d1d9      	bne.n	80233fa <arm_conv_f32+0x366>
 8023446:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 802344a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 802344e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8023452:	f011 0203 	ands.w	r2, r1, #3
 8023456:	d01b      	beq.n	8023490 <arm_conv_f32+0x3fc>
 8023458:	edd3 7a00 	vldr	s15, [r3]
 802345c:	ed95 7a00 	vldr	s14, [r5]
 8023460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023464:	3a01      	subs	r2, #1
 8023466:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802346a:	d011      	beq.n	8023490 <arm_conv_f32+0x3fc>
 802346c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8023470:	ed95 7a01 	vldr	s14, [r5, #4]
 8023474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023478:	2a01      	cmp	r2, #1
 802347a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 802347e:	d007      	beq.n	8023490 <arm_conv_f32+0x3fc>
 8023480:	edd5 7a02 	vldr	s15, [r5, #8]
 8023484:	ed13 7a02 	vldr	s14, [r3, #-8]
 8023488:	ee67 7a87 	vmul.f32	s15, s15, s14
 802348c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8023490:	3901      	subs	r1, #1
 8023492:	ecec 5a01 	vstmia	ip!, {s11}
 8023496:	f100 0004 	add.w	r0, r0, #4
 802349a:	d1a5      	bne.n	80233e8 <arm_conv_f32+0x354>
 802349c:	b00b      	add	sp, #44	@ 0x2c
 802349e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a2:	463b      	mov	r3, r7
 80234a4:	4605      	mov	r5, r0
 80234a6:	e7d4      	b.n	8023452 <arm_conv_f32+0x3be>
 80234a8:	9b02      	ldr	r3, [sp, #8]
 80234aa:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 80234ae:	009b      	lsls	r3, r3, #2
 80234b0:	9302      	str	r3, [sp, #8]
 80234b2:	9b03      	ldr	r3, [sp, #12]
 80234b4:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80234b8:	4403      	add	r3, r0
 80234ba:	465d      	mov	r5, fp
 80234bc:	469e      	mov	lr, r3
 80234be:	9b01      	ldr	r3, [sp, #4]
 80234c0:	f013 0c03 	ands.w	ip, r3, #3
 80234c4:	d075      	beq.n	80235b2 <arm_conv_f32+0x51e>
 80234c6:	9b02      	ldr	r3, [sp, #8]
 80234c8:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 80234cc:	f004 0403 	and.w	r4, r4, #3
 80234d0:	f104 3bff 	add.w	fp, r4, #4294967295	@ 0xffffffff
 80234d4:	f103 0801 	add.w	r8, r3, #1
 80234d8:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80234dc:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80234e0:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80234e4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80234e8:	f1a7 0210 	sub.w	r2, r7, #16
 80234ec:	4618      	mov	r0, r3
 80234ee:	465b      	mov	r3, fp
 80234f0:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80234f4:	468b      	mov	fp, r1
 80234f6:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80234fa:	4621      	mov	r1, r4
 80234fc:	4617      	mov	r7, r2
 80234fe:	461c      	mov	r4, r3
 8023500:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 8023388 <arm_conv_f32+0x2f4>
 8023504:	f10e 0210 	add.w	r2, lr, #16
 8023508:	463b      	mov	r3, r7
 802350a:	4656      	mov	r6, sl
 802350c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8023510:	edd3 3a04 	vldr	s7, [r3, #16]
 8023514:	ed12 6a03 	vldr	s12, [r2, #-12]
 8023518:	ed93 4a03 	vldr	s8, [r3, #12]
 802351c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8023520:	edd3 4a02 	vldr	s9, [r3, #8]
 8023524:	ed52 5a01 	vldr	s11, [r2, #-4]
 8023528:	ed93 5a01 	vldr	s10, [r3, #4]
 802352c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8023530:	ee26 6a04 	vmul.f32	s12, s12, s8
 8023534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023538:	ee26 7aa4 	vmul.f32	s14, s13, s9
 802353c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8023540:	ee65 6a85 	vmul.f32	s13, s11, s10
 8023544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023548:	3e01      	subs	r6, #1
 802354a:	f102 0210 	add.w	r2, r2, #16
 802354e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023552:	f1a3 0310 	sub.w	r3, r3, #16
 8023556:	d1d9      	bne.n	802350c <arm_conv_f32+0x478>
 8023558:	4486      	add	lr, r0
 802355a:	b1d1      	cbz	r1, 8023592 <arm_conv_f32+0x4fe>
 802355c:	ed99 7a00 	vldr	s14, [r9]
 8023560:	edde 6a00 	vldr	s13, [lr]
 8023564:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023568:	ee77 7a87 	vadd.f32	s15, s15, s14
 802356c:	b18c      	cbz	r4, 8023592 <arm_conv_f32+0x4fe>
 802356e:	ed19 7a01 	vldr	s14, [r9, #-4]
 8023572:	edde 6a01 	vldr	s13, [lr, #4]
 8023576:	ee27 7a26 	vmul.f32	s14, s14, s13
 802357a:	2c01      	cmp	r4, #1
 802357c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023580:	d007      	beq.n	8023592 <arm_conv_f32+0x4fe>
 8023582:	ed9e 7a02 	vldr	s14, [lr, #8]
 8023586:	ed59 6a02 	vldr	s13, [r9, #-8]
 802358a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802358e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023592:	ece5 7a01 	vstmia	r5!, {s15}
 8023596:	4565      	cmp	r5, ip
 8023598:	46c6      	mov	lr, r8
 802359a:	f108 0804 	add.w	r8, r8, #4
 802359e:	d1af      	bne.n	8023500 <arm_conv_f32+0x46c>
 80235a0:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80235a4:	4659      	mov	r1, fp
 80235a6:	9b01      	ldr	r3, [sp, #4]
 80235a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80235ac:	e71c      	b.n	80233e8 <arm_conv_f32+0x354>
 80235ae:	4686      	mov	lr, r0
 80235b0:	e785      	b.n	80234be <arm_conv_f32+0x42a>
 80235b2:	46ac      	mov	ip, r5
 80235b4:	e7f7      	b.n	80235a6 <arm_conv_f32+0x512>
 80235b6:	9a01      	ldr	r2, [sp, #4]
 80235b8:	2a00      	cmp	r2, #0
 80235ba:	f47f aedd 	bne.w	8023378 <arm_conv_f32+0x2e4>
 80235be:	e76d      	b.n	802349c <arm_conv_f32+0x408>
 80235c0:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 8023388 <arm_conv_f32+0x2f4>
 80235c4:	4680      	mov	r8, r0
 80235c6:	e5e3      	b.n	8023190 <arm_conv_f32+0xfc>

080235c8 <arm_sub_f32>:
 80235c8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80235cc:	b4f0      	push	{r4, r5, r6, r7}
 80235ce:	d033      	beq.n	8023638 <arm_sub_f32+0x70>
 80235d0:	f100 0610 	add.w	r6, r0, #16
 80235d4:	f101 0510 	add.w	r5, r1, #16
 80235d8:	f102 0410 	add.w	r4, r2, #16
 80235dc:	4667      	mov	r7, ip
 80235de:	ed15 7a04 	vldr	s14, [r5, #-16]
 80235e2:	ed56 7a04 	vldr	s15, [r6, #-16]
 80235e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80235ea:	3f01      	subs	r7, #1
 80235ec:	ed44 7a04 	vstr	s15, [r4, #-16]
 80235f0:	ed15 7a03 	vldr	s14, [r5, #-12]
 80235f4:	ed56 7a03 	vldr	s15, [r6, #-12]
 80235f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80235fc:	f106 0610 	add.w	r6, r6, #16
 8023600:	ed44 7a03 	vstr	s15, [r4, #-12]
 8023604:	ed15 7a02 	vldr	s14, [r5, #-8]
 8023608:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 802360c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023610:	f105 0510 	add.w	r5, r5, #16
 8023614:	ed44 7a02 	vstr	s15, [r4, #-8]
 8023618:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 802361c:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8023620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023624:	f104 0410 	add.w	r4, r4, #16
 8023628:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 802362c:	d1d7      	bne.n	80235de <arm_sub_f32+0x16>
 802362e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8023632:	4420      	add	r0, r4
 8023634:	4421      	add	r1, r4
 8023636:	4422      	add	r2, r4
 8023638:	f013 0303 	ands.w	r3, r3, #3
 802363c:	d01b      	beq.n	8023676 <arm_sub_f32+0xae>
 802363e:	edd0 7a00 	vldr	s15, [r0]
 8023642:	ed91 7a00 	vldr	s14, [r1]
 8023646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802364a:	3b01      	subs	r3, #1
 802364c:	edc2 7a00 	vstr	s15, [r2]
 8023650:	d011      	beq.n	8023676 <arm_sub_f32+0xae>
 8023652:	edd0 7a01 	vldr	s15, [r0, #4]
 8023656:	ed91 7a01 	vldr	s14, [r1, #4]
 802365a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802365e:	2b01      	cmp	r3, #1
 8023660:	edc2 7a01 	vstr	s15, [r2, #4]
 8023664:	d007      	beq.n	8023676 <arm_sub_f32+0xae>
 8023666:	edd0 7a02 	vldr	s15, [r0, #8]
 802366a:	ed91 7a02 	vldr	s14, [r1, #8]
 802366e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023672:	edc2 7a02 	vstr	s15, [r2, #8]
 8023676:	bcf0      	pop	{r4, r5, r6, r7}
 8023678:	4770      	bx	lr
 802367a:	bf00      	nop

0802367c <arm_mult_f32>:
 802367c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8023680:	b4f0      	push	{r4, r5, r6, r7}
 8023682:	d033      	beq.n	80236ec <arm_mult_f32+0x70>
 8023684:	f100 0610 	add.w	r6, r0, #16
 8023688:	f101 0510 	add.w	r5, r1, #16
 802368c:	f102 0410 	add.w	r4, r2, #16
 8023690:	4667      	mov	r7, ip
 8023692:	ed15 7a04 	vldr	s14, [r5, #-16]
 8023696:	ed56 7a04 	vldr	s15, [r6, #-16]
 802369a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802369e:	3f01      	subs	r7, #1
 80236a0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80236a4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80236a8:	ed56 7a03 	vldr	s15, [r6, #-12]
 80236ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236b0:	f106 0610 	add.w	r6, r6, #16
 80236b4:	ed44 7a03 	vstr	s15, [r4, #-12]
 80236b8:	ed15 7a02 	vldr	s14, [r5, #-8]
 80236bc:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80236c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236c4:	f105 0510 	add.w	r5, r5, #16
 80236c8:	ed44 7a02 	vstr	s15, [r4, #-8]
 80236cc:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80236d0:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 80236d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236d8:	f104 0410 	add.w	r4, r4, #16
 80236dc:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80236e0:	d1d7      	bne.n	8023692 <arm_mult_f32+0x16>
 80236e2:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80236e6:	4420      	add	r0, r4
 80236e8:	4421      	add	r1, r4
 80236ea:	4422      	add	r2, r4
 80236ec:	f013 0303 	ands.w	r3, r3, #3
 80236f0:	d01b      	beq.n	802372a <arm_mult_f32+0xae>
 80236f2:	edd1 7a00 	vldr	s15, [r1]
 80236f6:	ed90 7a00 	vldr	s14, [r0]
 80236fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80236fe:	3b01      	subs	r3, #1
 8023700:	edc2 7a00 	vstr	s15, [r2]
 8023704:	d011      	beq.n	802372a <arm_mult_f32+0xae>
 8023706:	edd0 7a01 	vldr	s15, [r0, #4]
 802370a:	ed91 7a01 	vldr	s14, [r1, #4]
 802370e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023712:	2b01      	cmp	r3, #1
 8023714:	edc2 7a01 	vstr	s15, [r2, #4]
 8023718:	d007      	beq.n	802372a <arm_mult_f32+0xae>
 802371a:	edd0 7a02 	vldr	s15, [r0, #8]
 802371e:	ed91 7a02 	vldr	s14, [r1, #8]
 8023722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023726:	edc2 7a02 	vstr	s15, [r2, #8]
 802372a:	bcf0      	pop	{r4, r5, r6, r7}
 802372c:	4770      	bx	lr
 802372e:	bf00      	nop

08023730 <arm_add_f32>:
 8023730:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8023734:	b4f0      	push	{r4, r5, r6, r7}
 8023736:	d033      	beq.n	80237a0 <arm_add_f32+0x70>
 8023738:	f100 0610 	add.w	r6, r0, #16
 802373c:	f101 0510 	add.w	r5, r1, #16
 8023740:	f102 0410 	add.w	r4, r2, #16
 8023744:	4667      	mov	r7, ip
 8023746:	ed15 7a04 	vldr	s14, [r5, #-16]
 802374a:	ed56 7a04 	vldr	s15, [r6, #-16]
 802374e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023752:	3f01      	subs	r7, #1
 8023754:	ed44 7a04 	vstr	s15, [r4, #-16]
 8023758:	ed15 7a03 	vldr	s14, [r5, #-12]
 802375c:	ed56 7a03 	vldr	s15, [r6, #-12]
 8023760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023764:	f106 0610 	add.w	r6, r6, #16
 8023768:	ed44 7a03 	vstr	s15, [r4, #-12]
 802376c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8023770:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8023774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023778:	f105 0510 	add.w	r5, r5, #16
 802377c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8023780:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8023784:	ed15 7a05 	vldr	s14, [r5, #-20]	@ 0xffffffec
 8023788:	ee77 7a87 	vadd.f32	s15, s15, s14
 802378c:	f104 0410 	add.w	r4, r4, #16
 8023790:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8023794:	d1d7      	bne.n	8023746 <arm_add_f32+0x16>
 8023796:	ea4f 140c 	mov.w	r4, ip, lsl #4
 802379a:	4420      	add	r0, r4
 802379c:	4421      	add	r1, r4
 802379e:	4422      	add	r2, r4
 80237a0:	f013 0303 	ands.w	r3, r3, #3
 80237a4:	d01b      	beq.n	80237de <arm_add_f32+0xae>
 80237a6:	edd1 7a00 	vldr	s15, [r1]
 80237aa:	ed90 7a00 	vldr	s14, [r0]
 80237ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237b2:	3b01      	subs	r3, #1
 80237b4:	edc2 7a00 	vstr	s15, [r2]
 80237b8:	d011      	beq.n	80237de <arm_add_f32+0xae>
 80237ba:	edd0 7a01 	vldr	s15, [r0, #4]
 80237be:	ed91 7a01 	vldr	s14, [r1, #4]
 80237c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237c6:	2b01      	cmp	r3, #1
 80237c8:	edc2 7a01 	vstr	s15, [r2, #4]
 80237cc:	d007      	beq.n	80237de <arm_add_f32+0xae>
 80237ce:	edd0 7a02 	vldr	s15, [r0, #8]
 80237d2:	ed91 7a02 	vldr	s14, [r1, #8]
 80237d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80237da:	edc2 7a02 	vstr	s15, [r2, #8]
 80237de:	bcf0      	pop	{r4, r5, r6, r7}
 80237e0:	4770      	bx	lr
 80237e2:	bf00      	nop

080237e4 <memset>:
 80237e4:	4402      	add	r2, r0
 80237e6:	4603      	mov	r3, r0
 80237e8:	4293      	cmp	r3, r2
 80237ea:	d100      	bne.n	80237ee <memset+0xa>
 80237ec:	4770      	bx	lr
 80237ee:	f803 1b01 	strb.w	r1, [r3], #1
 80237f2:	e7f9      	b.n	80237e8 <memset+0x4>

080237f4 <__errno>:
 80237f4:	4b01      	ldr	r3, [pc, #4]	@ (80237fc <__errno+0x8>)
 80237f6:	6818      	ldr	r0, [r3, #0]
 80237f8:	4770      	bx	lr
 80237fa:	bf00      	nop
 80237fc:	2000000c 	.word	0x2000000c

08023800 <__libc_init_array>:
 8023800:	b570      	push	{r4, r5, r6, lr}
 8023802:	4d0d      	ldr	r5, [pc, #52]	@ (8023838 <__libc_init_array+0x38>)
 8023804:	4c0d      	ldr	r4, [pc, #52]	@ (802383c <__libc_init_array+0x3c>)
 8023806:	1b64      	subs	r4, r4, r5
 8023808:	10a4      	asrs	r4, r4, #2
 802380a:	2600      	movs	r6, #0
 802380c:	42a6      	cmp	r6, r4
 802380e:	d109      	bne.n	8023824 <__libc_init_array+0x24>
 8023810:	4d0b      	ldr	r5, [pc, #44]	@ (8023840 <__libc_init_array+0x40>)
 8023812:	4c0c      	ldr	r4, [pc, #48]	@ (8023844 <__libc_init_array+0x44>)
 8023814:	f000 f94e 	bl	8023ab4 <_init>
 8023818:	1b64      	subs	r4, r4, r5
 802381a:	10a4      	asrs	r4, r4, #2
 802381c:	2600      	movs	r6, #0
 802381e:	42a6      	cmp	r6, r4
 8023820:	d105      	bne.n	802382e <__libc_init_array+0x2e>
 8023822:	bd70      	pop	{r4, r5, r6, pc}
 8023824:	f855 3b04 	ldr.w	r3, [r5], #4
 8023828:	4798      	blx	r3
 802382a:	3601      	adds	r6, #1
 802382c:	e7ee      	b.n	802380c <__libc_init_array+0xc>
 802382e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023832:	4798      	blx	r3
 8023834:	3601      	adds	r6, #1
 8023836:	e7f2      	b.n	802381e <__libc_init_array+0x1e>
 8023838:	08023cb4 	.word	0x08023cb4
 802383c:	08023cb4 	.word	0x08023cb4
 8023840:	08023cb4 	.word	0x08023cb4
 8023844:	08023cb8 	.word	0x08023cb8

08023848 <memcpy>:
 8023848:	440a      	add	r2, r1
 802384a:	4291      	cmp	r1, r2
 802384c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8023850:	d100      	bne.n	8023854 <memcpy+0xc>
 8023852:	4770      	bx	lr
 8023854:	b510      	push	{r4, lr}
 8023856:	f811 4b01 	ldrb.w	r4, [r1], #1
 802385a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802385e:	4291      	cmp	r1, r2
 8023860:	d1f9      	bne.n	8023856 <memcpy+0xe>
 8023862:	bd10      	pop	{r4, pc}

08023864 <sqrtf>:
 8023864:	b508      	push	{r3, lr}
 8023866:	ed2d 8b02 	vpush	{d8}
 802386a:	eeb0 8a40 	vmov.f32	s16, s0
 802386e:	f000 f91d 	bl	8023aac <__ieee754_sqrtf>
 8023872:	eeb4 8a48 	vcmp.f32	s16, s16
 8023876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802387a:	d60c      	bvs.n	8023896 <sqrtf+0x32>
 802387c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802389c <sqrtf+0x38>
 8023880:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023888:	d505      	bpl.n	8023896 <sqrtf+0x32>
 802388a:	f7ff ffb3 	bl	80237f4 <__errno>
 802388e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023892:	2321      	movs	r3, #33	@ 0x21
 8023894:	6003      	str	r3, [r0, #0]
 8023896:	ecbd 8b02 	vpop	{d8}
 802389a:	bd08      	pop	{r3, pc}
 802389c:	00000000 	.word	0x00000000

080238a0 <sqrt>:
 80238a0:	b538      	push	{r3, r4, r5, lr}
 80238a2:	ed2d 8b02 	vpush	{d8}
 80238a6:	ec55 4b10 	vmov	r4, r5, d0
 80238aa:	f000 f825 	bl	80238f8 <__ieee754_sqrt>
 80238ae:	4622      	mov	r2, r4
 80238b0:	462b      	mov	r3, r5
 80238b2:	4620      	mov	r0, r4
 80238b4:	4629      	mov	r1, r5
 80238b6:	eeb0 8a40 	vmov.f32	s16, s0
 80238ba:	eef0 8a60 	vmov.f32	s17, s1
 80238be:	f7fd f82b 	bl	8020918 <__aeabi_dcmpun>
 80238c2:	b990      	cbnz	r0, 80238ea <sqrt+0x4a>
 80238c4:	2200      	movs	r2, #0
 80238c6:	2300      	movs	r3, #0
 80238c8:	4620      	mov	r0, r4
 80238ca:	4629      	mov	r1, r5
 80238cc:	f7fc fffc 	bl	80208c8 <__aeabi_dcmplt>
 80238d0:	b158      	cbz	r0, 80238ea <sqrt+0x4a>
 80238d2:	f7ff ff8f 	bl	80237f4 <__errno>
 80238d6:	2321      	movs	r3, #33	@ 0x21
 80238d8:	6003      	str	r3, [r0, #0]
 80238da:	2200      	movs	r2, #0
 80238dc:	2300      	movs	r3, #0
 80238de:	4610      	mov	r0, r2
 80238e0:	4619      	mov	r1, r3
 80238e2:	f7fc fea9 	bl	8020638 <__aeabi_ddiv>
 80238e6:	ec41 0b18 	vmov	d8, r0, r1
 80238ea:	eeb0 0a48 	vmov.f32	s0, s16
 80238ee:	eef0 0a68 	vmov.f32	s1, s17
 80238f2:	ecbd 8b02 	vpop	{d8}
 80238f6:	bd38      	pop	{r3, r4, r5, pc}

080238f8 <__ieee754_sqrt>:
 80238f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238fc:	4a68      	ldr	r2, [pc, #416]	@ (8023aa0 <__ieee754_sqrt+0x1a8>)
 80238fe:	ec55 4b10 	vmov	r4, r5, d0
 8023902:	43aa      	bics	r2, r5
 8023904:	462b      	mov	r3, r5
 8023906:	4621      	mov	r1, r4
 8023908:	d110      	bne.n	802392c <__ieee754_sqrt+0x34>
 802390a:	4622      	mov	r2, r4
 802390c:	4620      	mov	r0, r4
 802390e:	4629      	mov	r1, r5
 8023910:	f7fc fd68 	bl	80203e4 <__aeabi_dmul>
 8023914:	4602      	mov	r2, r0
 8023916:	460b      	mov	r3, r1
 8023918:	4620      	mov	r0, r4
 802391a:	4629      	mov	r1, r5
 802391c:	f7fc fbac 	bl	8020078 <__adddf3>
 8023920:	4604      	mov	r4, r0
 8023922:	460d      	mov	r5, r1
 8023924:	ec45 4b10 	vmov	d0, r4, r5
 8023928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802392c:	2d00      	cmp	r5, #0
 802392e:	dc0e      	bgt.n	802394e <__ieee754_sqrt+0x56>
 8023930:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8023934:	4322      	orrs	r2, r4
 8023936:	d0f5      	beq.n	8023924 <__ieee754_sqrt+0x2c>
 8023938:	b19d      	cbz	r5, 8023962 <__ieee754_sqrt+0x6a>
 802393a:	4622      	mov	r2, r4
 802393c:	4620      	mov	r0, r4
 802393e:	4629      	mov	r1, r5
 8023940:	f7fc fb98 	bl	8020074 <__aeabi_dsub>
 8023944:	4602      	mov	r2, r0
 8023946:	460b      	mov	r3, r1
 8023948:	f7fc fe76 	bl	8020638 <__aeabi_ddiv>
 802394c:	e7e8      	b.n	8023920 <__ieee754_sqrt+0x28>
 802394e:	152a      	asrs	r2, r5, #20
 8023950:	d115      	bne.n	802397e <__ieee754_sqrt+0x86>
 8023952:	2000      	movs	r0, #0
 8023954:	e009      	b.n	802396a <__ieee754_sqrt+0x72>
 8023956:	0acb      	lsrs	r3, r1, #11
 8023958:	3a15      	subs	r2, #21
 802395a:	0549      	lsls	r1, r1, #21
 802395c:	2b00      	cmp	r3, #0
 802395e:	d0fa      	beq.n	8023956 <__ieee754_sqrt+0x5e>
 8023960:	e7f7      	b.n	8023952 <__ieee754_sqrt+0x5a>
 8023962:	462a      	mov	r2, r5
 8023964:	e7fa      	b.n	802395c <__ieee754_sqrt+0x64>
 8023966:	005b      	lsls	r3, r3, #1
 8023968:	3001      	adds	r0, #1
 802396a:	02dc      	lsls	r4, r3, #11
 802396c:	d5fb      	bpl.n	8023966 <__ieee754_sqrt+0x6e>
 802396e:	1e44      	subs	r4, r0, #1
 8023970:	1b12      	subs	r2, r2, r4
 8023972:	f1c0 0420 	rsb	r4, r0, #32
 8023976:	fa21 f404 	lsr.w	r4, r1, r4
 802397a:	4323      	orrs	r3, r4
 802397c:	4081      	lsls	r1, r0
 802397e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023982:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8023986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802398a:	07d2      	lsls	r2, r2, #31
 802398c:	bf5c      	itt	pl
 802398e:	005b      	lslpl	r3, r3, #1
 8023990:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8023994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023998:	bf58      	it	pl
 802399a:	0049      	lslpl	r1, r1, #1
 802399c:	2600      	movs	r6, #0
 802399e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80239a2:	106d      	asrs	r5, r5, #1
 80239a4:	0049      	lsls	r1, r1, #1
 80239a6:	2016      	movs	r0, #22
 80239a8:	4632      	mov	r2, r6
 80239aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80239ae:	1917      	adds	r7, r2, r4
 80239b0:	429f      	cmp	r7, r3
 80239b2:	bfde      	ittt	le
 80239b4:	193a      	addle	r2, r7, r4
 80239b6:	1bdb      	suble	r3, r3, r7
 80239b8:	1936      	addle	r6, r6, r4
 80239ba:	0fcf      	lsrs	r7, r1, #31
 80239bc:	3801      	subs	r0, #1
 80239be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80239c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80239c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80239ca:	d1f0      	bne.n	80239ae <__ieee754_sqrt+0xb6>
 80239cc:	4604      	mov	r4, r0
 80239ce:	2720      	movs	r7, #32
 80239d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80239d4:	429a      	cmp	r2, r3
 80239d6:	eb00 0e0c 	add.w	lr, r0, ip
 80239da:	db02      	blt.n	80239e2 <__ieee754_sqrt+0xea>
 80239dc:	d113      	bne.n	8023a06 <__ieee754_sqrt+0x10e>
 80239de:	458e      	cmp	lr, r1
 80239e0:	d811      	bhi.n	8023a06 <__ieee754_sqrt+0x10e>
 80239e2:	f1be 0f00 	cmp.w	lr, #0
 80239e6:	eb0e 000c 	add.w	r0, lr, ip
 80239ea:	da42      	bge.n	8023a72 <__ieee754_sqrt+0x17a>
 80239ec:	2800      	cmp	r0, #0
 80239ee:	db40      	blt.n	8023a72 <__ieee754_sqrt+0x17a>
 80239f0:	f102 0801 	add.w	r8, r2, #1
 80239f4:	1a9b      	subs	r3, r3, r2
 80239f6:	458e      	cmp	lr, r1
 80239f8:	bf88      	it	hi
 80239fa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80239fe:	eba1 010e 	sub.w	r1, r1, lr
 8023a02:	4464      	add	r4, ip
 8023a04:	4642      	mov	r2, r8
 8023a06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8023a0a:	3f01      	subs	r7, #1
 8023a0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8023a10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023a14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8023a18:	d1dc      	bne.n	80239d4 <__ieee754_sqrt+0xdc>
 8023a1a:	4319      	orrs	r1, r3
 8023a1c:	d01b      	beq.n	8023a56 <__ieee754_sqrt+0x15e>
 8023a1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8023aa4 <__ieee754_sqrt+0x1ac>
 8023a22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8023aa8 <__ieee754_sqrt+0x1b0>
 8023a26:	e9da 0100 	ldrd	r0, r1, [sl]
 8023a2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8023a2e:	f7fc fb21 	bl	8020074 <__aeabi_dsub>
 8023a32:	e9da 8900 	ldrd	r8, r9, [sl]
 8023a36:	4602      	mov	r2, r0
 8023a38:	460b      	mov	r3, r1
 8023a3a:	4640      	mov	r0, r8
 8023a3c:	4649      	mov	r1, r9
 8023a3e:	f7fc ff4d 	bl	80208dc <__aeabi_dcmple>
 8023a42:	b140      	cbz	r0, 8023a56 <__ieee754_sqrt+0x15e>
 8023a44:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8023a48:	e9da 0100 	ldrd	r0, r1, [sl]
 8023a4c:	e9db 2300 	ldrd	r2, r3, [fp]
 8023a50:	d111      	bne.n	8023a76 <__ieee754_sqrt+0x17e>
 8023a52:	3601      	adds	r6, #1
 8023a54:	463c      	mov	r4, r7
 8023a56:	1072      	asrs	r2, r6, #1
 8023a58:	0863      	lsrs	r3, r4, #1
 8023a5a:	07f1      	lsls	r1, r6, #31
 8023a5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8023a60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8023a64:	bf48      	it	mi
 8023a66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8023a6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8023a6e:	4618      	mov	r0, r3
 8023a70:	e756      	b.n	8023920 <__ieee754_sqrt+0x28>
 8023a72:	4690      	mov	r8, r2
 8023a74:	e7be      	b.n	80239f4 <__ieee754_sqrt+0xfc>
 8023a76:	f7fc faff 	bl	8020078 <__adddf3>
 8023a7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8023a7e:	4602      	mov	r2, r0
 8023a80:	460b      	mov	r3, r1
 8023a82:	4640      	mov	r0, r8
 8023a84:	4649      	mov	r1, r9
 8023a86:	f7fc ff1f 	bl	80208c8 <__aeabi_dcmplt>
 8023a8a:	b120      	cbz	r0, 8023a96 <__ieee754_sqrt+0x19e>
 8023a8c:	1ca0      	adds	r0, r4, #2
 8023a8e:	bf08      	it	eq
 8023a90:	3601      	addeq	r6, #1
 8023a92:	3402      	adds	r4, #2
 8023a94:	e7df      	b.n	8023a56 <__ieee754_sqrt+0x15e>
 8023a96:	1c63      	adds	r3, r4, #1
 8023a98:	f023 0401 	bic.w	r4, r3, #1
 8023a9c:	e7db      	b.n	8023a56 <__ieee754_sqrt+0x15e>
 8023a9e:	bf00      	nop
 8023aa0:	7ff00000 	.word	0x7ff00000
 8023aa4:	20000068 	.word	0x20000068
 8023aa8:	20000060 	.word	0x20000060

08023aac <__ieee754_sqrtf>:
 8023aac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8023ab0:	4770      	bx	lr
	...

08023ab4 <_init>:
 8023ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ab6:	bf00      	nop
 8023ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023aba:	bc08      	pop	{r3}
 8023abc:	469e      	mov	lr, r3
 8023abe:	4770      	bx	lr

08023ac0 <_fini>:
 8023ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ac2:	bf00      	nop
 8023ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ac6:	bc08      	pop	{r3}
 8023ac8:	469e      	mov	lr, r3
 8023aca:	4770      	bx	lr
